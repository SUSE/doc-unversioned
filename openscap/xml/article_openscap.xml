<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="urn:x-suse:xslt:profiling:docbook50-profile.xsl"
 type="text/xml"
 title="Profiling step"?>
<!DOCTYPE article
[
<!ENTITY % entities SYSTEM "generic-entities.ent">
%entities;
]>
<article xml:id="article-openscap"
 xmlns="http://docbook.org/ns/docbook"
 version="5.0"
 xml:lang="en"
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink">
  <title>Hardening &sle; with &openscap;</title>
  <titleabbrev>Hardening &sle; with &openscap;</titleabbrev>
  <info><productname>&productname;</productname><date>
<?dbtimestamp format="B d, Y"?></date>
    <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
      <dm:bugtracker>
        <dm:url>https://bugzilla.suse.com/enter_bug.cgi</dm:url>
        <dm:component>Security</dm:component>
        <dm:product>Documentation</dm:product>
        <dm:assignee>ssarkar@suse.com</dm:assignee>
      </dm:bugtracker>
      <dm:editurl>https://github.com/SUSE/doc-unversioned/edit/main/openscap/xml/</dm:editurl>
      <dm:translation>no</dm:translation>
    </dm:docmanager>
    <abstract>
      <para>
        This document introduces you to auditing and hardening &sle; with
        &openscap; and the <literal>&ssg;</literal>.
      </para>
    </abstract>
  </info>
  <important xml:id="openscap-disclaimer">
    <title>Disclaimer</title>
    <para>
      &suse; seeks to provide customers with quick and easy guides that can
      assist them in maintaining security compliance. Implementation of the
      settings contained within this guide without its prior testing in a
      non-operational environment is highly discouraged. The developers of
      these profiles and documentation have made reasonable efforts to ensure
      overall compliance. They assume no responsibility for its use by other
      parties, and make no guarantee, expressed or implied, about its quality,
      reliability or any other characteristic.
    </para>
  </important>
  <sect1 xml:id="openscap-whatis">
    <title>What are SCAP and &openscap;?</title>

    <para>
      SCAP stands for <systemitem class="protocol">Security Content Automation
      Protocol</systemitem>. It is a framework of specifications that support
      automated configuration, vulnerability scanning, and policy compliance
      evaluation of systems deployed in an organization. It also standardizes
      how vulnerabilities and security configurations are communicated both to
      machines and human beings.
    </para>

    <para>
      &openscap; is a collection of open source tools that implement the SCAP
      framework for Linux. SCAP is maintained by the
      <orgname>National Institute of Standards and Technology (NIST)</orgname>
      . &openscap; received the SCAP 1.2 certification by NIST in 2014.
    </para>
  </sect1>
  <sect1 xml:id="openscap-benefits">
    <title>Benefits</title>

    <para>
      The &openscap; tools, together with the <literal>&ssg;</literal>, can be
      used for auditing your system in an automated way. The
      <literal>&ssg;</literal> implements security guidances recommended by
      respected authorities. These security guidances are transformed into a
      machine-readable format which then can be used by &openscap; and other
      tools.
    </para>
  </sect1>
  <sect1 xml:id="openscap-installation">
    <title>Installation</title>

    <para>
      To use the &openscap; tools and the <literal>&ssg;</literal> for
      hardening your target system by scanning and remediating vulnerabilities,
      install the following core packages:
    </para>

    <itemizedlist>
      <listitem>
        <para>
          <package>openscap</package>
        </para>
      </listitem>
      <listitem>
        <para>
          <package>openscap-utils</package>
        </para>
      </listitem>
      <listitem>
        <para>
          <package>scap-security-guide</package>
        </para>
      </listitem>
    </itemizedlist>

<screen>&prompt.sudo;<command>zypper install openscap openscap-utils scap-security-guide</command>
</screen>

    <note>
      <para>
        These packages are dependencies for other optional packages discussed
        below.
      </para>
    </note>

    <para>
      Optionally, install the following packages:
    </para>

    <itemizedlist>
      <listitem>
        <para>
          <package>scap-workbench</package>: This package provides the SCAP
          Workbench graphical utility to perform common
          <systemitem>oscap</systemitem> tasks.
        </para>
      </listitem>
      <listitem>
        <para>
          <package>ssg-apply</package>: When used along with SCAP Workbench,
          this package helps you conveniently apply a tailoring file for
          customized hardening.
        </para>
      </listitem>
    </itemizedlist>

<screen>&prompt.sudo;<command>zypper install scap-workbench scap-workbench-doc ssg-apply</command></screen>

    <tip>
      <title>Security best practice for SCAP Workbench</title>
      <para>
        As a security best practice, avoid installing an application software
        such as SCAP Workbench on the target system that you are planning to
        harden. Instead, install SCAP Workbench on a client machine and apply
        the hardening on the target system, while maintaining an air gap before
        the target system is connected to a potentially insecure network.
      </para>
    </tip>
  </sect1>
  <sect1 xml:id="openscap-components">
    <title>Important SCAP components</title>

    <para>
      SCAP consists of the following important components which interact with
      each other.
    </para>

    <variablelist>
      <varlistentry>
        <term>Open Vulnerability and Assessment Language (OVAL)</term>
        <listitem>
          <para>
            An XML format for testing the presence of a specific state.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Extensible Configuration Checklist Description Format (XCCDF)</term>
        <listitem>
          <para>
            An XML format that specifies security checklists, benchmarks and
            configuration documentation. The XCCDF file includes a benchmark as
            a set of different profiles related to different groups. Each group
            is a set of rules which have OVAL definitions. Each profile is
            related to different good practices such as STIG, HIPAA, PCI-DSS,
            or ANSSI.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Common Platform Enumeration (CPE)</term>
        <listitem>
          <para>
            A structured naming scheme to identify information technology
            systems, platforms and software packages. It is maintained by NIST
            and NDV. The naming scheme consists of the following elements:
            <literal>cpe:/<replaceable>part</replaceable>:<replaceable>vendor</replaceable>:<replaceable>product</replaceable>:<replaceable>version</replaceable>:<replaceable>update</replaceable>:<replaceable>edition</replaceable>:<replaceable>language</replaceable></literal>
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>DataStreams (DS)</term>
        <listitem>
          <para>
            An XML format which packs different SCAP components (CPE, XCCDF,
            OVAL) into a single file. It can be used to distribute SCAP content
            over the network. The DataStreams files are useful because they
            include everything you need when you want to harden and audit your
            &sle; system.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Common Configuration Enumeration (CCE)</term>
        <listitem>
          <para>
            Unique identifiers to security-related system configuration issues.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </sect1>
  <sect1 xml:id="openscap-ssg">
    <title>&ssg; content and directories</title>

    <para>
      &suse; ships the <literal>&ssg;</literal> (SSG) toolset in the
      <package>scap-security-guide</package> package. It contains the latest
      set of security polices for Linux systems. The <literal>&ssg;</literal>
      is maintained upstream in the
      <link xlink:href="https://github.com/ComplianceAsCode/"
    >ComplianceAsCode</link>
      repository.
    </para>

    <para>
      After you have installed the package, the SSG security content and the
      related files are available in your system from the following
      directories:
    </para>

    <variablelist xml:id="ssg-directories">
      <title>Overview of files and directories</title>
      <varlistentry>
        <term><filename>/usr/share/xml/scap/ssg/content/</filename></term>
        <listitem>
          <para>
            Contains the SSG security content. It consists of several
            <xref linkend="openscap-components"
      xrefstyle="select:title"/>,
            which are all based on XML. All XML files in that directory are
            named according to the SCAP component and to the &sle; codestream
            they apply to (code 12 or 15). The directory also holds XML files
            specific to &osuse;.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><filename>/usr/share/doc/scap-security-guide/guides/</filename></term>
        <listitem>
          <para>
            Contains profiles for different hardening policies in
            human-readable format. They describe the profiles that are included
            in the DataStream files. The profiles applicable to &sle; are
            codestream-specific and differ between code 12 and code 15. Each
            profile is a guide on securing your operating system to ensure
            compliance with a regulation.
          </para>
          <para>
            The guides usually have the following structure:
          </para>
          <itemizedlist>
            <listitem>
              <para>
                Short description
              </para>
            </listitem>
            <listitem>
              <para>
                Profile Title. For example: <citetitle>DISA STIG for &sle;
                15</citetitle>
              </para>
            </listitem>
            <listitem>
              <para>
                Profile ID. For example:
                <citetitle>xccdf_org.ssgproject.content_profile_stig</citetitle>
              </para>
            </listitem>
            <listitem>
              <para>
                Revision History. Information about the current version and
                status of the profile. For example:
                <citetitle>xccdf_org.ssgproject.content_profile_stig</citetitle>
              </para>
            </listitem>
            <listitem>
              <para>
                Platforms (in CPE notation). Which product or system the
                profile applies to. For example:
                <citetitle>cpe:/o:suse:linux_enterprise_server:15</citetitle>
              </para>
            </listitem>
            <listitem>
              <para>
                A table of contents
              </para>
            </listitem>
            <listitem>
              <para>
                A checklist which consists of groups (and subgroups) with rules
              </para>
              <para>
                Each rule consists of a short description, the rationale behind
                the rule, a severity (low, medium or high) and a unique
                identifier in the <literal>Common Configuration Enumeration
                (CCE)</literal> format. The CCE number for each rule is
                provided to &suse; by NIST.
              </para>
              <para>
                Each rule also lists references to different good practices.
                For example, the rule known by the unique identifier
                <literal>CCE-83289-9</literal> in STIG has a reference to a
                specific good practice <literal>A.12.4.1</literal> in ISO/IEC
                27001:2013.
              </para>
              <para>
                If remediation options exist for a rule, they are listed in
                different formats.
              </para>
            </listitem>
          </itemizedlist>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><filename>/usr/share/scap-security-guide</filename></term>
        <listitem>
          <para>
            Contains subdirectories with fix scripts which can be used to
            remediate the target system in case a vulnerability is found during
            a scan. Fix scripts are available in the following two formats:
            Shell scripts
            (<filename>bash/<replaceable>*.sh</replaceable></filename>) and
            Ansible snippets
            (<filename>ansible/<replaceable>*.yml</replaceable></filename>).
            <!--taroth 2022-10-28: I suppose SUSE does not support nor ship the following formats:
              'Puppet snippet' and 'OSBuild Blueprint' snippet - at least there are no subdirectories within
              /usr/share/scap-security-guide (apart from an empty kickstart directory, which probably should
              not be there at all?!?) - answer by msmeissn: yes, we support only shell and ansible currently.-->
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </sect1>
  <sect1 xml:id="openscap-ssg-profiles">
    <title>&ssg; profiles</title>

    <para>
      The <literal>&ssg;</literal> contains multiple profiles. The profiles
      applicable to &sle; are codestream-specific and differ between code 12
      and code 15.
    </para>

    <para>
      They are maintained and hosted at the following repositories:
    </para>

    <itemizedlist>
      <listitem>
        <para>
          <link
      xlink:href="https://github.com/ComplianceAsCode/content/tree/master/products/sle15/profiles"
     />
        </para>
      </listitem>
      <listitem>
        <para>
          <link
      xlink:href="https://github.com/ComplianceAsCode/content/tree/master/products/sle12/profiles"
     />
        </para>
      </listitem>
    </itemizedlist>

    <para>
      After the installation of the <package>scap-security-guide</package>
      package, human-readable versions of the profiles are available in your
      file system in
      <filename>/usr/share/doc/scap-security-guide/guides</filename>.
    </para>

    <para>
      Alternatively, find the same content online as static HTML pages:
    </para>

    <itemizedlist>
      <listitem>
        <para>
          <link xlink:href="https://static.open-scap.org/ssg-guides/ssg-sle15-guide-index.html"></link>
        </para>
      </listitem>
      <listitem>
        <para>
          <link xlink:href="https://static.open-scap.org/ssg-guides/ssg-sle12-guide-index.html"></link>
        </para>
      </listitem>
    </itemizedlist>

    <para>
      In the online versions, use the drop-down list in the upper-right corner
      of the page to select one of the available profiles and to view a
      command-line snippet about how to evaluate the respective profile with
      &openscap;.
    </para>

    <sect2 xml:id="openscap-ssg-profiles-sle15">
      <title>&sle; 15 profiles</title>
      <para>
        For code 15, the following profiles are supported by &suse;:
      </para>
      <itemizedlist>
        <listitem>
          <para>
            ANSSI-BP-028 (enhanced)
          </para>
        </listitem>
        <listitem>
          <para>
            ANSSI-BP-028 (high)
          </para>
        </listitem>
        <listitem>
          <para>
            ANSSI-BP-028 (intermediary)
          </para>
        </listitem>
        <listitem>
          <para>
            ANSSI-BP-028 (minimal)
          </para>
        </listitem>
        <listitem>
          <para>
            CIS SUSE &sle; 15 Benchmark Level 2 (Workstation)
          </para>
        </listitem>
        <listitem>
          <para>
            CIS &sle; 15 Benchmark for Level 1 (Server)
          </para>
        </listitem>
        <listitem>
          <para>
            CIS &sle; 15 Benchmark for Level 1 (Workstation)
          </para>
        </listitem>
        <listitem>
          <para>
            CIS &sle; 15 Benchmark for Level 2 (Server)
          </para>
        </listitem>
        <listitem>
          <para>
            DISA STIG for &sle; 15
          </para>
        </listitem>
        <listitem>
          <para>
            Hardening for Public Cloud Image of &sles; (SLES) for SAP
            Applications 15
          </para>
        </listitem>
        <listitem>
          <para>
            Health Insurance Portability and Accountability Act (HIPAA)
          </para>
        </listitem>
        <listitem>
          <para>
            PCI-DSS v3.2.1 Control Baseline for &sle; 15
          </para>
        </listitem>
        <listitem>
          <para>
            PCI-DSS v4 Control Baseline for &sle; 15
          </para>
        </listitem>
        <listitem>
          <para>
            Public Cloud Hardening for &sle; 15
          </para>
        </listitem>
        <listitem>
          <para>
            Standard System Security Profile for &sle; 15
          </para>
        </listitem>
      </itemizedlist>
      <figure>
        <title>&ssg; profiles for &sle; 15</title>
        <mediaobject>
          <imageobject role="fo">
            <imagedata fileref="openscap-ssg-static-html-sle15.png" width="95%"/>
          </imageobject>
          <imageobject role="html">
            <imagedata fileref="openscap-ssg-static-html-sle15.png" width="90%"/>
          </imageobject>
          <textobject role="description"><phrase>&ssg; profiles for &sle; 15</phrase>
          </textobject>
        </mediaobject>
      </figure>
    </sect2>

    <sect2 xml:id="openscap-ssg-profiles-sle12">
      <title>&sle; 12 profiles</title>
      <para>
        For code 12, the following profiles are supported by &suse;:
      </para>
      <itemizedlist>
        <listitem>
          <para>
            ANSSI-BP-028 (enhanced)
          </para>
        </listitem>
        <listitem>
          <para>
            ANSSI-BP-028 (high)
          </para>
        </listitem>
        <listitem>
          <para>
            ANSSI-BP-028 (intermediary)
          </para>
        </listitem>
        <listitem>
          <para>
            ANSSI-BP-028 (minimal)
          </para>
        </listitem>
        <listitem>
          <para>
            CIS SUSE &sle; 12 Benchmark Level 2 (Workstation)
          </para>
        </listitem>
        <listitem>
          <para>
            CIS &sle; 12 Benchmark for Level 1 (Server)
          </para>
        </listitem>
        <listitem>
          <para>
            CIS &sle; 12 Benchmark for Level 1 (Workstation)
          </para>
        </listitem>
        <listitem>
          <para>
            CIS &sle; 12 Benchmark for Level 2 (Server)
          </para>
        </listitem>
        <listitem>
          <para>
            DISA STIG for &sle; 12
          </para>
        </listitem>
        <listitem>
          <para>
            PCI-DSS v3.2.1 Control Baseline for &sle; 12
          </para>
        </listitem>
        <listitem>
          <para>
            PCI-DSS v.4 Control Baseline for &sle; 12
          </para>
        </listitem>
        <listitem>
          <para>
            Standard System Security Profile for &sle; 12
          </para>
        </listitem>
      </itemizedlist>
      <figure>
        <title>&ssg; profiles for &sle; 12</title>
        <mediaobject>
          <imageobject role="fo">
            <imagedata fileref="openscap-ssg-static-html-sle12.png" width="95%"/>
          </imageobject>
          <imageobject role="html">
            <imagedata fileref="openscap-ssg-static-html-sle12.png" width="90%"/>
          </imageobject>
          <textobject role="description"><phrase>&ssg; profiles for &sle; 12</phrase>
          </textobject>
        </mediaobject>
      </figure>
    </sect2>
  </sect1>
  <sect1 xml:id="openscap-scan">
    <title>Vulnerability scanning</title>

    <sect2 xml:id="openscap-scan-targets">
      <title>Targets to scan</title>
      <para>
        The content provided by the <literal>&ssg;</literal> can be used to
        scan the following targets for vulnerabilities:
      </para>
      <itemizedlist>
        <listitem>
          <para>
            bare-metal machines
          </para>
        </listitem>
        <listitem>
          <para>
            virtual machines
          </para>
        </listitem>
        <listitem>
          <para>
            virtual machine images
          </para>
        </listitem>
        <listitem>
          <para>
            containers
          </para>
        </listitem>
        <listitem>
          <para>
            container images
          </para>
        </listitem>
      </itemizedlist>
      <para>
        Automated checks help to identify the target and to select only the
        rules that make sense for this specific target. For example, checks for
        separate partitions make sense for bare-metal machines but not for
        containers.
      </para>
    </sect2>

    <sect2 xml:id="openscap-scan-tools">
      <title>Tools for scanning</title>
      <note>
        <para>
          Before using the tools described in this section, ensure that you
          have installed them as described in
          <xref linkend="openscap-installation"></xref>, as they are
          interdependent.
        </para>
      </note>
      <para>
        Depending on your setup and the target to scan (remote or local), you
        can use either of the following tools:
      </para>
      <variablelist>
        <varlistentry>
          <term>oscap</term>
          <listitem>
            <para>
              A command-line interface that can be used to scan local machines.
              Both the <package>openscap-utils</package> and
              <package>scap-security-guide</package> package need to be
              installed on the local machine.
            </para>
            <para>
              To understand the basic usage of <command>oscap</command>, run it
              with the <command>-h</command> option:
            </para>
<screen>&prompt.user;<command>oscap -h</command>

  oscap

  OpenSCAP command-line tool

  Usage: oscap [options] module operation [operation-options-and-arguments]

  Common options:
    --verbose &lt;verbosity_level&gt;   - Turn on verbose mode at specified verbosity level.
                                    Verbosity level must be one of: DEVEL, INFO, WARNING, ERROR.
    --verbose-log-file &lt;file&gt;     - Write verbose information into file.

  oscap options:
    -h --help                     - show this help
    -q --quiet                    - quiet mode
    -V --version                  - print info about supported SCAP versions

  Commands:
      ds - Data stream utilities
      oval - Open Vulnerability and Assessment Language
      xccdf - eXtensible Configuration Checklist Description Format
      cvss - Common Vulnerability Scoring System
      cpe - Common Platform Enumeration
      cve - Common Vulnerabilities and Exposures
      cvrf - Common Vulnerability Reporting Framework
      info - Print information about a SCAP file.

</screen>
            <para>
              To understand <literal>oscap</literal> in greater detail, read
              its man pages by running the <command>man oscap</command>.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>oscap-ssh</term>
          <listitem>
            <para>
              A command-line interface that can be used to scan a remote
              machine via SSH with an interface resembling the
              <command>oscap</command> tool. On the local machine, the package
              <package>openscap-utils</package> needs to be installed. On the
              remote machine, the <package>openscap-utils</package> package
              needs to be installed.
            </para>
            <para>
              To understand the basic usage of <command>oscap-ssh</command>,
              run it with the <command>-h</command> option:
            </para>
<screen>&prompt.user;<command>oscap -h</command>

  oscap-ssh -- Tool for running oscap over SSH and collecting results.

  Usage:

  $ oscap-ssh user@host 22 info INPUT_CONTENT
  $ oscap-ssh user@host 22 xccdf eval [options] INPUT_CONTENT

  Only source data streams are supported as INPUT_CONTENT!

  supported oscap xccdf eval options are:
    --profile
    --tailoring-file
    --tailoring-id
    --cpe (external OVAL dependencies are not supported yet!)
    --oval-results
    --results
    --results-arf
    --report
    --skip-valid
    --skip-validation
    --fetch-remote-resources
    --local-files
    --progress
    --datastream-id
    --xccdf-id
    --benchmark-id
    --remediate

  $ oscap-ssh user@host 22 oval eval [options] INPUT_CONTENT

  supported oscap oval eval options are:
    --id
    --variables
    --directives
    --results
    --report
    --skip-valid
    --skip-validation
    --datastream-id
    --oval-id

  $ oscap-ssh user@host 22 oval collect [options] INPUT_CONTENT

  supported oscap oval collect options are:
    --id
    --syschar
    --variables
    --skip-valid
    --skip-validation

  specific option for oscap-ssh (must be first argument):
    --sudo

  To supply additional options to ssh/scp, define the SSH_ADDITIONAL_OPTIONS variable
  For instance, to ignore known hosts records, define SSH_ADDITIONAL_OPTIONS='-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'

  specific option for oscap-ssh (must be first argument):

  See `man oscap` to learn more about semantics of these options.

</screen>
            <para>
              To understand <literal>oscap-ssh</literal> in greater detail,
              read its man pages by running <command>man oscap-ssh</command>.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>SCAP Workbench</term>
          <listitem>
            <para>
              SCAP Workbench is a graphical user interface for &openscap;. You
              can use it for convenience instead of using
              <literal>oscap</literal>. For example, you can use SCAP Workbench
              for scanning a single machine, either local or remote (via SSH).
            </para>
            <para>
              To use SCAP Workbench, both the <package>scap-workbench</package>
              and <package>scap-security-guide</package> packages need to be
              installed on the local machine. On the remote machine, the
              <package>openscap-utils</package> package needs to be installed.
            </para>
            <para>
              To start SCAP Workbench, run the following command:
            </para>
<screen>&prompt.user;<command>scap-workbench</command></screen>
            <figure>
              <title>SCAP Workbench</title>
              <mediaobject>
                <imageobject role="fo">
                  <imagedata fileref="scap-workbench.png" width="90%"/>
                </imageobject>
                <imageobject role="html">
                  <imagedata fileref="scap-workbench.png" width="95%"/>
                </imageobject>
                <textobject role="description"><phrase>Start screen of SCAP Workbench</phrase>
                </textobject>
              </mediaobject>
            </figure>
            <para>
              Although not recommended, you can invoke and perform certain
              basic operations by using SCAP Workbench as a command-line tool.
              To know more, read its man page by running <command>man
              scap-workbench</command>.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <sect2 xml:id="openscap-scan-sle15">
      <title>Scanning a &sle; system</title>
      <para>
        The following example shows how to scan &sle; 15 locally with
        <command>oscap</command> for vulnerability issues according to a
        certain profile. You can save the results in XML format and generate an
        HTML report.
      </para>
      <example xml:id="ex-oscap-scan-sle15">
        <title>Scanning &sle; with oscap</title>
<screen>&prompt.sudo;<command>oscap</command> xccdf eval<co xml:id="co-oscap-eval"/> \
    --profile <replaceable>stig</replaceable><co xml:id="co-oscap-eval-profile"/> \
    --results <replaceable>/tmp/results.xml</replaceable><co xml:id="co-oscap-eval-results"/> \
    --report <replaceable>/tmp/report.html</replaceable><co xml:id="co-oscap-eval-report"/> \
    /usr/share/xml/scap/ssg/content/ssg-sle15-ds.xml<co xml:id="co-oscap-eval-ssg"/></screen>
        <calloutlist>
          <callout arearefs="co-oscap-eval">
            <para>
              Calls the <command>oscap xccdf</command> module and tells it to
              perform an evaluation (vulnerability scan).
            </para>
          </callout>
          <callout arearefs="co-oscap-eval-profile">
            <para>
              Specifies the profile to use, in this case,
              <literal>stig</literal>.
            </para>
          </callout>
          <callout arearefs="co-oscap-eval-results">
            <para>
              Saves the results of the evaluation to
              <replaceable>/tmp/results.xml</replaceable>.
            </para>
          </callout>
          <callout arearefs="co-oscap-eval-report">
            <para>
              Generates an HTML report called
              <replaceable>/tmp/report.html</replaceable> in addition to the
              results in XML.
            </para>
          </callout>
          <callout arearefs="co-oscap-eval-ssg">
            <para>
              Specifies the <literal>&ssg;</literal> policy file to use. In
              this example, we use a policy file in the
              <literal>DataStream</literal> format that applies to &sle; code
              15. To list all available policies, run: <command>ls -1
              /usr/share/xml/scap/ssg/content/ssg-*-ds.xml</command>. For more
              information about a particular policy, run <command>oscap
              info</command> on the file.
            </para>
          </callout>
        </calloutlist>
        <para>
          The evaluation process usually takes a few minutes, depending on the
          number of selected rules.
        </para>
      </example>
    </sect2>
  </sect1>
  <sect1 xml:id="openscap-remediate">
    <title>Vulnerability remediation</title>

    <!--taroth 2022-10-20: todo: oscap, scap-workbench, ansible playbooks, bash scripts-->

    <para>
      The security policy profiles in the <literal>&ssg;</literal> can not only
      be used to scan a target system and to generate reports, but also to
      automatically apply fixes to the target system
      (<literal>remediation</literal>), if possible.
    </para>

    <important>
      <title>Automatic remediation not always available</title>
      <para>
        Automatic remediation is <emphasis>not</emphasis> offered in case the
        automatic application of a fix is too dangerous to be enforced in a
        running target system.
      </para>
    </important>

    <sect2 xml:id="openscap-remediate-process">
      <title>&openscap; remediation process</title>
      <para>
        &openscap; allows to automatically remediate target systems that have
        been found in a non-compliant state. This requires an XCCDF file with
        instructions. The overall process is as follows:
      </para>
      <procedure>
        <step>
          <para>
            The <command>oscap</command> command-line tool performs a system
            scan.
          </para>
        </step>
        <step>
          <para>
            Each rule that fails is marked as a candidate for remediation.
          </para>
        </step>
        <step>
          <para>
            Within the XCCDF file, <command>oscap</command> then searches for
            an appropriate &lt;xccdf:fix&gt; element, resolves it, prepares the
            environment, and executes the fix script. The fix scripts can be
            either Bash <filename>*.sh</filename> files or Ansible playbook
            <filename>*.yml</filename> files.
          </para>
        </step>
        <step>
          <para>
            After the execution of the script, the respective rule is evaluated
            again to check if the fix was successful.
          </para>
        </step>
      </procedure>
      <para>
        All results of the remediation are stored in an output XCCDF file.
      </para>
    </sect2>

    <sect2 xml:id="openscap-remediate-options">
      <title>&openscap; remediation options</title>
      <para>
        For remediating a target system with <command>oscap</command>, you have
        the following options:
      </para>
      <variablelist>
        <varlistentry>
          <term>Remediation on the fly</term>
          <listitem>
            <para>
              You can remediate a target system on the fly, while you are
              scanning it. In this case, evaluation and remediation are
              performed as a part of a single command. For details, see
              <xref linkend="oscap-remediate-sle-fly"/>.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Remediation after scanning</term>
          <listitem>
            <para>
              You can remediate a target system after you have scanned it. In
              the first step, the system is only evaluated, and the results are
              stored in the XCCDF results file. In the second step,
              <command>oscap</command> executes the fix scripts and verifies
              the result. For details, see
              <xref linkend="oscap-remediate-sle-post"/>.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Review mode</term>
          <listitem>
            <para>
              The review mode allows to save remediation instructions to a file
              for further review. The remediation content is not executed
              during this operation. For details, see
              <xref linkend="oscap-remediate-sle-review"/>.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <sect2 xml:id="openscap-remediate-sle">
      <title>Remediating a &slea; system with <command>oscap</command></title>
      <para>
        The following examples show how to scan and remediate &sle; locally
        with <command>oscap</command> to comply with a certain profile.
      </para>
      <sect3 xml:id="oscap-remediate-sle-fly">
        <title>Remediating &sle; (on the fly)</title>
        <para>
          For remediation on the fly, use the <option>--remediate</option>
          command-line option.
        </para>
        <example xml:id="ex-oscap-remediate-sle15-fly">
          <title>Remediating &slea; 15 (on the fly)</title>
<screen>&prompt.sudo;<command>oscap</command> xccdf eval --remediate<co xml:id="co-oscap-remedy-fly"/> \
     --profile <replaceable>stig</replaceable><co xml:id="co-oscap-remedy-fly-profile"/> \
     --results <replaceable>/tmp/results.xml</replaceable><co xml:id="co-oscap-remedy-fly-results"/> \
     /usr/share/xml/scap/ssg/content/ssg-sle15-ds.xml<co xml:id="co-oscap-remedy-fly-ssg"/></screen>
          <calloutlist>
            <callout arearefs="co-oscap-remedy-fly">
              <para>
                Calls the <command>oscap xccdf</command> module and tells it to
                perform an evaluation plus a remediation of the target system
                in one go.
              </para>
            </callout>
            <callout arearefs="co-oscap-remedy-fly-profile">
              <para>
                Specifies the profile to use, in this case,
                <literal>stig</literal>.
              </para>
            </callout>
            <callout arearefs="co-oscap-remedy-fly-results">
              <para>
                Saves the results of the evaluation to
                <replaceable>/tmp/results.xml</replaceable>.
              </para>
            </callout>
            <callout arearefs="co-oscap-remedy-fly-ssg">
              <para>
                Specifies the <literal>&ssg;</literal> policy file to use. In
                this example, we use a policy file in the
                <literal>DataStream</literal> format that applies to &sle; code
                15. To list all available policies, run: <command>ls -1
                /usr/share/xml/scap/ssg/content/ssg-*-ds.xml</command>. For
                more information about a particular policy, run <command>oscap
                info</command> on the file.
              </para>
            </callout>
          </calloutlist>
          <para>
            In the resulting <replaceable>/tmp/results.xml</replaceable> file,
            the first <tag class="element"
      >TestResult</tag> element
            shows the result of the scan <emphasis>before</emphasis> the
            remediation. The second <tag class="element">TestResult</tag>
            element shows the result of the scan <emphasis>after</emphasis>
            applying the remediation. In the second
            <tag class="element">TestResult</tag> element, if the result of a
            rule is <literal>fixed</literal>, this means that the fix was
            successfully applied, and this rule now passes evaluation. If the
            result of a rule is <literal>error</literal>, this means that the
            remediation for this rule was not successful, and the rule still
            does not pass evaluation.
          </para>
        </example>
      </sect3>
      <sect3 xml:id="oscap-remediate-sle-post">
        <title>Remediating &sle; (after scanning)</title>
        <para>
          In this example, we first execute a scan and then run the remediation
          as next step.
        </para>
        <example xml:id="ex-oscap-remediate-sle15-post">
          <title>Remediating &slea; (after scanning)</title>
          <procedure>
            <step>
<screen>&prompt.sudo;<command>oscap</command> xccdf eval<co xml:id="co-oscap-remedy-post1"/> \
      --profile <replaceable>stig</replaceable><co xml:id="co-oscap-remedy-post1-profile"/> \
      --results <replaceable>/tmp/results.xml</replaceable><co xml:id="co-oscap-remedy-post1-results"/> \
      /usr/share/xml/scap/ssg/content/ssg-sle15-ds.xml<co xml:id="co-oscap-remedy-post1-ssg"/></screen>
              <calloutlist>
                <callout arearefs="co-oscap-remedy-post1">
                  <para>
                    Calls the <command>oscap xccdf</command> module and tells
                    it to perform an evaluation.
                  </para>
                </callout>
                <callout arearefs="co-oscap-remedy-post1-profile">
                  <para>
                    Specifies the profile to use, in this case,
                    <literal>stig</literal>.
                  </para>
                </callout>
                <callout arearefs="co-oscap-remedy-post1-results">
                  <para>
                    Saves the results of the evaluation as an XCCDF file to
                    <replaceable>/tmp/results.xml</replaceable>.
                  </para>
                </callout>
                <callout arearefs="co-oscap-remedy-post1-ssg">
                  <para>
                    Specifies the <literal>&ssg;</literal> policy file to use.
                    In this example, we use a policy file in the
                    <literal>DataStream</literal> format that applies to &sle;
                    code 15. To list all available policies, run: <command>ls
                    -1 /usr/share/xml/scap/ssg/content/ssg-*-ds.xml</command>.
                    For more information about a particular policy, run
                    <command>oscap info</command> on the file.
                  </para>
                </callout>
              </calloutlist>
              <para>
                During this step, the system is only evaluated, and the results
                are stored in a <tag class="element">TestResult</tag> element
                in <replaceable>/tmp/results.xml</replaceable>.
              </para>
            </step>
            <step>
<screen>&prompt.sudo;<command>oscap</command> xccdf remediate<co xml:id="co-oscap-remedy-post2-command"/> \
     --results <replaceable>/tmp/results.xml</replaceable><co xml:id="co-oscap-remedy-post2-results"/> \
     <replaceable>/tmp/results.xml</replaceable><co xml:id="co-oscap-remedy-post2-ssg"/></screen>
              <calloutlist>
                <callout arearefs="co-oscap-remedy-post2-command">
                  <para>
                    Calls the <command>oscap xccdf</command> module and tells
                    it to perform a remediation.
                  </para>
                </callout>
                <callout arearefs="co-oscap-remedy-post2-results">
                  <para>
                    Saves the results of the remediation to
                    <replaceable>/tmp/results.xml</replaceable>.
                  </para>
                </callout>
                <callout arearefs="co-oscap-remedy-post2-ssg">
                  <para>
                    Uses the <replaceable>/tmp/results.xml</replaceable> XCCDF
                    file from the first step (evaluation) as input file.
                  </para>
                </callout>
              </calloutlist>
              <para>
                During this step, the results file from the first step is used
                as input for the <command>oscap</command> command. You can
                safely store the results from the second step in the same file
                that you use as input file,
                <replaceable>/tmp/results.xml</replaceable>. During this run,
                <command>oscap</command> creates a new
                <tag class="element">xccdf:TestResult</tag> element in the
                file. The new element is based on the previous one and inherits
                all the data. The newly created
                <tag class="element">xccdf:TestResult</tag> element differs
                only in the <tag class="element">rule-result</tag> elements
                which failed in the first run. Only for those is the
                remediation executed.
              </para>
            </step>
          </procedure>
        </example>
      </sect3>
      <sect3 xml:id="oscap-remediate-sle-review">
        <title>Storing &slea; remediation instructions for review</title>
        <para>
          You can also run <command>oscap</command> in review mode to store
          remediation instructions to a file for further review. During this
          operation, the remediation content is <emphasis>not</emphasis>
          executed. The following shows how to generate remediation
          instructions in the form of a shell script:
        </para>
        <example xml:id="ex-oscap-remediate-sle15-review">
          <title>Storing &slea; 15 remediation instructions for review</title>
<screen>&prompt.sudo;<command>oscap</command> xccdf generate fix<co xml:id="co-oscap-generate-fix"/> \
     --template urn:xccdf:fix:script:sh<co xml:id="co-oscap-generate-template"/> \
     --profile <replaceable>stig</replaceable><co xml:id="co-oscap-generate-profile"/> \
     --output <replaceable>my-remediation-script.sh</replaceable><co xml:id="co-oscap-generate-output"/> \
     /usr/share/xml/scap/ssg/content/ssg-sle15-ds.xml<co xml:id="co-oscap-generate-ssg"/></screen>
          <calloutlist>
            <callout arearefs="co-oscap-generate-fix">
              <para>
                Calls the <command>oscap xccdf</command> module and tells it to
                generate a file with remediation instructions.
              </para>
            </callout>
            <callout arearefs="co-oscap-generate-template">
              <para>
                Specifies the template to use, in this case, a shell script.
              </para>
            </callout>
            <callout arearefs="co-oscap-generate-profile">
              <para>
                Specifies the profile to use, in this case,
                <literal>stig</literal>.
              </para>
            </callout>
            <callout arearefs="co-oscap-generate-output">
              <para>
                Specifies the file to which the remediation instructions are
                written.
              </para>
            </callout>
            <callout arearefs="co-oscap-generate-ssg">
              <para>
                Specifies the <literal>&ssg;</literal> policy file to use. In
                this example, we use a policy file in the
                <literal>DataStream</literal> format that applies to &sle; code
                15. To list all available policies, run: <command>ls -1
                /usr/share/xml/scap/ssg/content/ssg-*-ds.xml</command>. For
                more information about a particular policy, run <command>oscap
                info</command> on the file.
              </para>
            </callout>
          </calloutlist>
        </example>
      </sect3>
    </sect2>

    <sect2 xml:id="openscap-remediate-sle-ansible">
      <title>Remediating a &slea; system with Ansible</title>
      <para>
        You can use the Ansible playbooks provided by the
        <literal>&ssg;</literal> to remediate a local system.
      </para>
      <para>
        The <package>ansible</package> package is available from <literal>SUSE
        Package Hub</literal>. Register your &sle; system and enable the
        <literal>SUSE Package Hub</literal> extension. For &sle; 12, you
        additionally need to enable the <literal>Public Cloud</literal> module.
        Then install the package with <command>sudo zypper in
        ansible</command>.
      </para>
      <example xml:id="ex-remediate-sle15-ansible">
        <title>Remediating &slea; 15 with Ansible</title>
        <para>
          For example, to remediate your system using the &stiga; Ansible
          playbook for &sle; 15 provided by the <literal>&ssg;</literal>, use
          the following command.
        </para>
        <warning>
          <title>System configuration changes</title>
          <para>
            The following command alters the configuration of your system
            immediately. Make sure to test this thoroughly in a non-production
            system first.
          </para>
        </warning>
<screen>&prompt.sudo;ansible-playbook -i "localhost," -c local \
/usr/share/scap-security-guide/ansible/sle15-playbook-stig.yml</screen>
        <para>
          After the playbook has finished, you are prompted to log in to your
          system, which is now compliant to the chosen policy.
        </para>
      </example>
    </sect2>
  </sect1>
  <sect1 xml:id="oscap-related-topics">
    <title>Related topics</title>

    <itemizedlist>
      <listitem>
        <para>
          Check out the <literal>&ssg;</literal> pages online at
          <link
     xlink:href="https://www.open-scap.org/security-policies/scap-security-guide/"/>.
        </para>
      </listitem>
      <listitem>
        <para>
          For general instructions on how to use the <literal>&ssg;</literal>,
          see the README in
          <link
      xlink:href="https://github.com/ComplianceAsCode/content/"/>.
        </para>
      </listitem>
      <listitem>
        <para>
          Find the <citetitle>&openscap; User Manual</citetitle> at
          <link xlink:href="https://static.open-scap.org/openscap-1.2/oscap_user_manual.html"></link>.
        </para>
      </listitem>
      <!--<listitem>
        <para>
        <remark>taroth 2022-11-30: after writing the other compliance papers, add pointers here</remark>
        </para>
        </listitem>-->
    </itemizedlist>
  </sect1>
  <xi:include href="common_copyright_quick.xml"/>
  <xi:include href="common_license_gfdl1.2.xml"/>
</article>
