<?xml version="1.0" encoding="UTF-8"?>
<!-- This file originates from the project https://github.com/openSUSE/doc-kit -->
<!-- This file can be edited downstream. -->
<?xml-stylesheet href="urn:x-suse:xslt:profiling:docbook51-profile.xsl"
 type="text/xml"
 title="Profiling step"?>
<!DOCTYPE article
[
  <!ENTITY % entities SYSTEM "../common/generic-entities.ent">
    %entities;
]>
<article xml:id="container-buildah" xml:lang="en"
 role="concept"
 xmlns="http://docbook.org/ns/docbook" version="5.2"
 xmlns:its="http://www.w3.org/2005/11/its"
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink">
  <info>
    <title>&buildah; overview</title>
  </info>
  <para>
    <link xlink:href="https://buildah.io/">&buildah;</link> is tool for
    building OCI-compliant container images. &buildah; can handle the following
    tasks:
  </para>
  <itemizedlist>
    <listitem>
      <para>
        Create containers from scratch or from existing images.
      </para>
    </listitem>
    <listitem>
      <para>
        Create an image from a working container or via a
        <literal>&docker;file</literal>.
      </para>
    </listitem>
    <listitem>
      <para>
        Build images in the OCI or &deng; image formats.
      </para>
    </listitem>
    <listitem>
      <para>
        Mount a working container's root file system for manipulation.
      </para>
    </listitem>
    <listitem>
      <para>
        Use the updated contents of a container's root file system as a file
        system layer to create a new image.
      </para>
    </listitem>
    <listitem>
      <para>
        Delete a working container or an image and rename a local container.
      </para>
    </listitem>
  </itemizedlist>
  <para>
    Compared to &deng;, &buildah; offers the following advantages:
  </para>
  <itemizedlist>
    <listitem>
      <para>
        The tool makes it possible to mount a working container's file system,
        so it becomes accessible by the host.
      </para>
    </listitem>
    <listitem>
      <para>
        The process of building container images using &buildah; can be
        automated via scripts by using &buildah; subcommands instead of a
        <filename>Containerfile</filename> or
        <filename>&docker;file</filename>.
      </para>
    </listitem>
    <listitem>
      <para>
        Similar to &podman;, &buildah; does not require a daemon to run and can
        be used by unprivileged users.
      </para>
    </listitem>
    <listitem>
      <para>
        It is possible to build images inside a container without mounting the
        &docker; socket, which improves security.
      </para>
    </listitem>
  </itemizedlist>
  <para>
    Both &podman; and &buildah; can be used to build container images. While
    &podman; makes it possible to build images using &docker;files, &buildah;
    offers an expanded range of image building options and capabilities.
  </para>
  <section xml:id="sec-buildah-install">
    <title>&buildah; installation</title>
    <para>
      To install &buildah;, run the command <command>sudo zypper in
      buildah</command>. Run the command <command>buildah --version</command>
      to check whether &buildah; has been installed successfully.
    </para>
    <para>
      If you already have &podman; installed and set up for use in rootless
      mode, &buildah; can be used in an unprivileged environment without any
      further configuration. If you need to enable rootless mode for &buildah;,
      run the following command:
    </para>
<screen>&prompt.user;sudo usermod --add-subuids 100000-165535 --add-subgids 100000-165535 USER</screen>
    <para>
      This command enables rootless mode for the current user. After running
      the command, log out and log in again to enable the changes.
    </para>
    <para>
      The command above defines a range of local UIDs on the host, onto which
      the UIDs allocated to users inside the container are mapped. Note that
      the ranges defined for different users must not overlap. It is also
      important that the ranges do not reuse the UID of any existing local
      users or groups. By default, adding a user with the
      <command>useradd</command> command on &productname; automatically
      allocates subUID and subGID ranges.
    </para>
    <note>
      <title>&buildah; in rootless mode</title>
      <para>
        In rootless mode, &buildah; commands must be executed in a modified
        user namespace of the user. To enter this user namespace, run the
        command <command>buildah unshare</command>. Otherwise, the
        <command>buildah mount</command> command will fail.
      </para>
    </note>
  </section>
  <section xml:id="sec-buildah-build-images">
    <title>Building images with &buildah;</title>
    <para>
      Instead of a special file with instructions, &buildah; uses individual
      commands to build an image. Building an image with &buildah; involves the
      following steps:
    </para>
    <itemizedlist>
      <listitem>
        <para>
          run a container based on the specified image
        </para>
      </listitem>
      <listitem>
        <para>
          edit the container (install packages, configure settings, etc.)
        </para>
      </listitem>
      <listitem>
        <para>
          configure the container options
        </para>
      </listitem>
      <listitem>
        <para>
          commit all changes into a new image
        </para>
      </listitem>
    </itemizedlist>
    <para>
      While this process may include additional steps, such as mounting the
      container's file system and working with it, the basic workflow logic
      remains the same.
    </para>
    <para>
      The following example can give you a general idea of how to build an
      image with &buildah;.
    </para>
<screen>container=$(buildah from suse/sle15) <co xml:id="CO3-1"/>
    buildah run $container zypper up <co xml:id="CO3-2"/>
    buildah copy $container . /usr/src/example/ <co xml:id="CO3-3"/>
    buildah config --workingdir /usr/src/example $container <co xml:id="CO3-4"/>
    buildah config --port 8000 $container
    buildah config --cmd "php -S 0.0.0.0:8000" $container
    buildah config --label maintainer="Tux" $container <co xml:id="CO3-5"/>
    buildah config --label version="0.1" $container
    buildah commit $container example <co xml:id="CO3-6"/>
    buildah rm $container <co xml:id="CO3-7"/></screen>
    <calloutlist>
      <callout arearefs="CO3-1">
        <para>
          Specify a container (also called a working container) based on the
          specified image (in this case, <literal>sle15</literal>).
        </para>
      </callout>
      <callout arearefs="CO3-2">
        <para>
          Run a command in the working container you just created. In this
          example, &buildah; runs the <command>zypper up</command> command.
        </para>
      </callout>
      <callout arearefs="CO3-3">
        <para>
          Copy files and directories to the specified location in the
          container. In this example, &buildah; copies the entire contents of
          the current directory to <filename>/usr/src/example/</filename>.
        </para>
      </callout>
      <callout arearefs="CO3-4">
        <para>
          The <command>buildah config</command> commands specify container
          options. These include defining a working directory, exposing a port,
          and running a command inside the container.
        </para>
      </callout>
      <callout arearefs="CO3-5">
        <para>
          The <command>buildah config --label</command> command allows you to
          assign labels to the container. This may include
          <literal>maintainer</literal>, <literal>description</literal>,
          <literal>version</literal>, and so on.
        </para>
      </callout>
      <callout arearefs="CO3-6">
        <para>
          Create an image from the working container by committing all the
          modifications.
        </para>
      </callout>
      <callout arearefs="CO3-7">
        <para>
          Delete the working container.
        </para>
      </callout>
    </calloutlist>
  </section>
</article>
