<?xml version="1.0" encoding="UTF-8"?>
<!-- This file originates from the project https://github.com/openSUSE/doc-kit -->
<!-- This file can be edited downstream. -->
<?xml-stylesheet href="urn:x-suse:xslt:profiling:docbook51-profile.xsl"
 type="text/xml"
 title="Profiling step"?>
<!DOCTYPE article
[
  <!ENTITY % entities SYSTEM "../common/generic-entities.ent">
    %entities;
]>
<article xml:id="container-podman" xml:lang="en"
 role="concept"
 xmlns="http://docbook.org/ns/docbook" version="5.2"
 xmlns:its="http://www.w3.org/2005/11/its"
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink">
  <info>
    <title>&podman; overview</title>
  </info>
  <para>
    <link xlink:href="https://podman.io/">&podman;</link> is short for Pod
    Manager Tool. It is a daemonless container engine for managing Open
    Container Initiative (OCI) containers on a Linux system. By default, Podman
    supports rootless containers, which reduces attack surface when running
    containers. &podman; can be used to create OCI-compliant container images
    using a <literal>Dockerfile</literal> and a range of commands identical to
    &deng;. For example, the <literal>podman build</literal> command performs
    the same task as <literal>docker build</literal>. In other words, &podman;
    provides a drop-in replacement for &deng;.
  </para>
  <para>
    Moving from &deng; to &podman; does not require any changes in the
    established workflow. There is no need to rebuild images, and you can use
    the exact same commands to build and manage images as well as run and
    control containers.
  </para>
  <para>
    &podman; differs from &deng; in the following ways:
  </para>
  <itemizedlist>
    <listitem>
      <para>
        &podman; does not use a daemon, so the container engine interacts
        directly with an image registry, containers and image storage when
        needed.
      </para>
    </listitem>
    <listitem>
      <para>
        &podman; features native systemd integration that allows for the use of
        systemd to run containers. Generating the required systemd unit files
        is supported by &podman; using the <command>podman generate
        systemd</command> command. Moreover, &podman; can run systemd inside
        containers.
      </para>
    </listitem>
    <listitem>
      <para>
        &podman; does not require root privileges to create and run containers.
        This means that &podman; can run under the <literal>root</literal> user
        as well as in an unprivileged environment. Moreover, a container
        created by an unprivileged user cannot get higher privileges on the
        host than the container's creator.
      </para>
    </listitem>
    <listitem>
      <para>
        &podman; can be configured to search multiple registries by reading
        <filename>/etc/containers/registries.conf</filename> file.
      </para>
    </listitem>
    <listitem>
      <para>
        &podman; can deploy applications from Kubernetes manifests
      </para>
    </listitem>
    <listitem>
      <para>
        &podman; supports launching systemd inside a container and requires no
        potentially dangerous workarounds.
      </para>
    </listitem>
  </itemizedlist>
  <para>
    &podman; makes it possible to group containers into pods. Pods share the
    same network interface. A typical scenario for grouping containers into a
    pod is a container that runs a database and a container with a client that
    accesses the database. For further information about pods, refer to
    <xref linkend="sec-orchestration-podman"/>.
  </para>
  <section xml:id="sec-podman-install">
    <title>&podman; installation</title>
    <para>
      To install &podman;, make sure you have the &slea; Containers Module
      enabled (see <xref linkend="container-repo-reg"/>), run the
      command <command>sudo zypper in podman</command>. Then run
      <command>podman info</command> to check whether &podman; has been
      installed successfully.
    </para>
    <para>
      By default, &podman; launches containers as the current user. For
      unprivileged users, this means launching containers in rootless mode.
      Support for rootless containers is enabled for all newly created users in
      &slea; by default, and no additional steps are necessary.
    </para>
    <para>
      In case &podman; fails to launch containers in rootless mode, check
      whether an entry for the current user is present in
      <literal>/etc/subuid</literal>:
    </para>
<screen>&prompt.user;grep $(id -nu) /etc/subuid
    user:10000:65536</screen>
    <para>
      When no entry is found, add the required sub-UID and sub-GID entries via
      the following command:
    </para>
<screen>&prompt.user;sudo usermod --add-subuids 100000-165535 --add-subgids 100000-165535 $(id -nu)</screen>
    <para>
      To enable the change, reboot the machine or stop the session of the
      current user. To do the latter, run <command>loginctl list-sessions |
      grep <replaceable>USER</replaceable></command> and note the session ID.
      Then run <command>loginctl kill-session
      <replaceable>SESSION_ID</replaceable></command> to stop the session.
    </para>
    <para>
      The <command>usermod</command> above defines a range of local UIDs to
      which the UIDs allocated to users inside the container are mapped on the
      host. Note that the ranges defined for different users must not overlap.
      It is also important that the ranges do not reuse the UID of an existing
      local user or group. By default, adding a user with the
      <command>useradd</command> command on &productname; automatically
      allocates sub-UID and sub-GID ranges.
    </para>
    <para>
      When using rootless containers with &podman;, it is recommended to use
      cgroups v2. cgroups v1 are limited in terms of functionality compared to
      v2. For example, cgroups v1 do not allow proper hierarchical delegation to
      the user's subtrees. Additionally, &podman; is unable to read container logs
      properly with cgroups v1 and the systemd log driver. To enable cgroups v2,
      add the following to the kernel cmdline:
      <option>systemd.unified_cgroup_hierarchy=1</option>
    </para>
    <para>
      Running a container with &podman; in rootless mode on &sls; may fail,
      because the container needs read access to the &scc; credentials. For
      example, running a container with the command <command>podman run -it
      --rm registry.suse.com/suse/sle15 bash</command> and then executing
      <command>zypper ref</command> results in the following error message:
    </para>
<screen>Refreshing service 'container-suseconnect-zypp'.
    Problem retrieving the repository index file for service 'container-suseconnect-zypp':
    [container-suseconnect-zypp|file:/usr/lib/zypp/plugins/services/container-suseconnect-zypp]
    Warning: Skipping service 'container-suseconnect-zypp' because of the above error.
    Warning: There are no enabled repositories defined.
    Use 'zypper addrepo' or 'zypper modifyrepo' commands to add or enable repositories</screen>
    <para>
      To solve the problem, grant the current user the required access rights
      by running the following command on the host:
    </para>
<screen>&prompt.user;sudo setfacl -m u:$(id -nu):r /etc/zypp/credentials.d/*</screen>
    <para>
      Log out and log in again to apply the changes.
    </para>
    <para>
      To give multiple users the required access, create a dedicated group
      using the <command>groupadd
      <replaceable>GROUPNAME</replaceable></command> command. Then use the
      following command to change the group ownership and rights of files in
      the <filename>/etc/zypp/credentials.d/</filename> directory.
    </para>
<screen>&prompt.user;sudo chgrp <replaceable>GROUPNAME</replaceable> /etc/zypp/credentials.d/*
      &prompt.user;sudo chmod g+r /etc/zypp/credentials.d/*</screen>
    <para>
      You can then grant a specific user write access by adding them to the
      created group.
    </para>
    <section xml:id="sec-podman-rootless-containers-tricks">
      <title>Tips and tricks for rootless containers</title>
      <para>
        &podman; remaps user IDs with rootless containers. In the following
        example, &podman; remaps the current user to the default user in the
        container:
      </para>
<screen>&prompt.user;podman run --rm -it registry.suse.com/bci/bci-base id
    uid=0(root) gid=0(root) groups=0(root)</screen>
      <para>
        Note that even if you are root in the container, you cannot gain
        superuser privileges outside of it.
      </para>
      <para>
        This user remapping can have undesired side effects when sharing data
        with the host, where the shared files belong to different user IDs in
        the container and on the host. The issue can be solved using the
        command-line flag <option>--userns=keep-id</option> that makes it
        possible to keep the current user id in the container:
      </para>
<screen>&prompt.user;podman run --userns=keep-id --rm -it registry.suse.com/bci/bci-base id
    uid=1000(user) gid=1000(users) groups=1000(users)</screen>
      <para>
        The flag <option>--userns=keep-id</option> has a similar effect when
        used with bind mounts:
      </para>
<screen>&prompt.user;podman run --rm -it -v $(pwd):/share/ registry.suse.com/bci/bci-base stat /share/
      File: /share/
      Size: 318             Blocks: 0          IO Block: 4096   directory
    Device: 2ch/44d Inode: 3506170     Links: 1
    Access: (0755/drwxr-xr-x)  Uid: (    0/    root)   Gid: (    0/    root)
    Access: 2023-05-03 12:52:18.636392618 +0000
    Modify: 2023-05-03 12:52:17.178380923 +0000
    Change: 2023-05-03 12:52:17.178380923 +0000
     Birth: 2023-05-03 12:52:15.852370288 +0000

     &prompt.user;podman run --userns=keep-id --rm -it -v $(pwd):/share/ registry.suse.com/bci/bci-base stat /share/
      File: /share/
      Size: 318             Blocks: 0          IO Block: 4096   directory
    Device: 2ch/44d Inode: 3506170     Links: 1
    Access: (0755/drwxr-xr-x)  Uid: ( 1000/     user)   Gid: ( 1000/     users)
    Access: 2023-05-03 12:52:18.636392618 +0000
    Modify: 2023-05-03 12:52:17.178380923 +0000
    Change: 2023-05-03 12:52:17.178380923 +0000
     Birth: 2023-05-03 12:52:15.852370288 +0000</screen>
      <para>
        &podman; stores the containers' data in the storage graph root (default
        is <filename>~/.local/share/containers/storage</filename>). Because of
        the way &podman; remaps user IDs in rootless containers, the graph root
        may contain files that are not owned by your current user but by a user
        ID in the sub-UID region assigned to your user. As these files do not
        belong to your current user, they can be inaccessible to you.
      </para>
      <para>
        To read or modify any file in the graph root, enter a shell as follows:
      </para>
<screen>&prompt.user;podman unshare bash

    &prompt.user;id
    uid=0(root) gid=0(root) groups=0(root),65534(nobody)</screen>
      <para>
        Note that <command>podman unshare</command> performs the same user
        remapping as <command>podman run</command> does when launching a
        rootless container. You cannot gain elevated privileges via
        <command>podman unshare</command>.
      </para>
      <para>
        Do not modify files in the graph root as this can corrupt &podman;'s
        internal state and render your containers, images and volumes
        inoperable.
      </para>
    </section>
    <section xml:id="id-caveats-of-rootless-containers">
      <title>Caveats of rootless containers</title>
      <para>
        Because unprivileged users cannot configure network namespaces on
        Linux, &podman; relies on a userspace network implementation called
        <literal>slirp4netns</literal>. It emulates the full TCP-IP stack and
        can cause a heavy performance degradation for workloads relying on high
        network transfer rates. This means that rootless containers suffer from
        slow network transfers.
      </para>
      <para>
        On Linux, unprivileged users cannot open ports below port number 1024.
        This limitation also applies to &podman;, so by default, rootless
        containers cannot expose ports below port number 1024. You can remove
        this limitation using the following command: <command>sysctl
        net.ipv4.ip_unprivileged_port_start=0</command>.
      </para>
      <para>
        To remove the limitation permanently, run <command>sysctl -w
        net.ipv4.ip_unprivileged_port_start=0</command>.
      </para>
      <para>
        Note that this allows <emphasis role="strong">all</emphasis>
        unprivileged applications to bind to ports below 1024.
      </para>
    </section>
    <section xml:id="sec-podman-docker">
      <title>podman-docker</title>
      <para>
        Because &podman; is compatible with &deng;, it features the same
        command-line interface. You can also install the package
        <package>podman-docker</package> that allows you to use an emulated
        &docker; CLI with &podman;. For example, the <command>docker
        pull</command> command, that fetches a container image from a registry,
        executes <command>podman pull</command> instead. The <command>docker
        build</command> command executes <command>podman build</command>, etc.
      </para>
      <para>
        &podman; also features a &deng; compatible socket that can be launched
        using the following command:
      </para>
<screen>&prompt.user;sudo systemctl start podman.socket</screen>
      <para>
        The &podman; socket can be used by applications designed to communicate
        with &deng; to launch containers transparently via &podman;. The
        &podman; socket can be used to launch containers using <command>docker
        compose</command>, without running &deng;.
      </para>
    </section>
  </section>
  <section xml:id="sec-podman-get">
    <title>Obtaining container images</title>
    <section xml:id="sec-podman-registries">
      <title>Configuring container registries</title>
      <para>
        By default, &podman; is configured to use &suseregistry; only. To make
        &podman; search the &suseregistry; first and use &dhub; as a fallback,
        make sure that the
        <filename>/etc/containers/registries.conf</filename> file contains the following configuration:
      </para>
<screen>unqualified-search-registries = ["registry.suse.com", "docker.io"]</screen>
    </section>
    <section xml:id="sec-podman-search">
      <title>Searching images in registries</title>
      <para>
        Using the <command>podman search</command> command allow you to list
        available containers in the registries defined in
        <filename>/etc/containers/registries.conf</filename>.
      </para>
      <para>
        To search in all registries:
      </para>
<screen>podman search go</screen>
      <para>
        To search in a specific registry:
      </para>
<screen>podman search registry.suse.com/go</screen>
    </section>
    <section xml:id="id-downloading-pulling-images">
      <title>Downloading (pulling) images</title>
      <para>
        The <command>podman pull</command> command pulls an image from an image
        registry:
      </para>
<screen>&prompt.user;podman pull <replaceable>REGISTRY</replaceable>:<replaceable>PORT</replaceable>/<replaceable>NAMESPACE</replaceable>/<replaceable>NAME</replaceable>:<replaceable>TAG</replaceable></screen>
      <para>
        For example:
      </para>
<screen>&prompt.user;podman pull registry.suse.com/bci/bci-base</screen>
      <para>
        Note that if you do not specify a tag, &podman; pulls the
        <literal>latest</literal> tag.
      </para>
    </section>
  </section>
  <section xml:id="sec-podman-tag">
    <title>Renaming images and images tag</title>
    <para>
      Tags are used to assign descriptive names to container images, 
      thus making it easier to identify individual images.
    </para>
    <para>
      Pull the &bcia;-Base image from &suseregistry;:
    </para>
<screen>&prompt.user;podman pull registry.suse.com/bci/bci-base
    Trying to pull registry.suse.com/bci/bci-base:latest...
    Getting image source signatures
    Copying blob bf6ca87723f2 done
    Copying config 34578a383c done
    Writing manifest to image destination
    Storing signatures
    34578a383c7b6fdcb85f90fbad59b7e7a16071cf47843688e90fe20ff64a684</screen>
    <para>
      List the pulled images:
    </para>
<screen>&prompt.user;podman images
    REPOSITORY                      TAG         IMAGE ID      CREATED        SIZE
    registry.suse.com/bci/bci-base  latest      34578a383c7b  22 hours ago   122 MB</screen>
    <para>
      Rename the &bcia;-Base image to <literal>my-base</literal>:
    </para>
<screen>podman tag 34578a383c7b my-base</screen>
<screen>podman images
    REPOSITORY                      TAG         IMAGE ID      CREATED        SIZE
    registry.suse.com/bci/bci-base  latest      34578a383c7b  22 hours ago   122 MB
    localhost/my-base               latest      34578a383c7b  22 hours ago   122 MB</screen>
    <para>
      Add a custom tag <literal>1</literal> (indicating that this version 1 of
      the image) to <literal>my-base</literal>:
    </para>
<screen>&prompt.user;podman tag 34578a383c7b my-base:1</screen>
<screen>&prompt.user;podman images
    REPOSITORY                      TAG         IMAGE ID      CREATED        SIZE
    registry.suse.com/bci/bci-base  latest      34578a383c7b  22 hours ago   122 MB
    localhost/my-base               latest      34578a383c7b  22 hours ago   122 MB
    localhost/my-base               1           34578a383c7b  22 hours ago   122 MB</screen>
    <para>
      Note that the default tag <literal>latest</literal> is still present.
    </para>
  </section>
  <section xml:id="sec-podman-run">
    <title>Deploying container images</title>
    <para>
      Similar to &deng;, &podman; can run containers in an interactive mode,
      allowing you to inspect and work with an image. To run the
      <literal>suse/sle15</literal> image in interactive mode, use the
      following command:
    </para>
<screen>&prompt.user;podman run --rm -ti suse/sle15</screen>
<note>
<title>
Fixing the lost network access to rootful containers
</title>
<para>
Rootful containers may occasionally become inaccessible from the outside. The
issue is caused by firewalld reloading its permanent rules and discarding any
temporary rules created by &podman;'s networking back-end (either CNI or
&netavark;).

A temporary workaround is to reload the &podman; network using the
<command>podman network reload --all</command> command.

If you use &netavark; 1.9.0 or higher as the network back-end, a permanent fix to the problem is to use the
<systemitem>netavark-firewalld-reload.service</systemitem> service. Enable and
start the service as follows:
</para>
<screen>&prompt.root;systemctl enable netavark-firewalld-reload.service
&prompt.root;systemctl restart netavark-firewalld-reload.service
</screen>
<para>
  You can check which back-end and version you are using by running
  <replaceable>podman info --format "{{.Host.NetworkBackend}}"</replaceable> and
  <replaceable>podman info --format
  "{{.Host.NetworkBackendInfo.Version}}"</replaceable>, respectively.
</para>
<para>
  We recommend adding permanent firewall rules for containers you want to be
  accessible from outside of the host. This ensures that the rules persist on
  firewall reloads and system reboots. This approach also offers greater
  flexibility (for example, it allows you to assign the rules to a certain
  firewalld zone).
</para>
</note>
  </section>
  <section xml:id="sec-podman-build-images">
    <title>Building images with &podman;</title>
    <para>
      &podman; can build images from a <filename>Dockerfile</filename>. The
      <command>podman build</command> command behaves as <command>docker
      build</command>, and it accepts the same options.
    </para>
    <para>
      &podman;'s companion tool &buildah; provides an alternative way to build
      images. For further information about &buildah;, refer to
      <xref linkend="container-buildah"/>.
    </para>
  </section>
</article>
