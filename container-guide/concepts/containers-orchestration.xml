<?xml version="1.0" encoding="UTF-8"?>
<!-- This file originates from the project https://github.com/openSUSE/doc-kit -->
<!-- This file can be edited downstream. -->
<?xml-stylesheet href="urn:x-suse:xslt:profiling:docbook51-profile.xsl"
 type="text/xml"
 title="Profiling step"?>
<!DOCTYPE article
[
  <!ENTITY % entities SYSTEM "../common/generic-entities.ent">
    %entities;
]>
<article xml:id="container-orchestration" xml:lang="en"
 role="concept"
 xmlns="http://docbook.org/ns/docbook" version="5.2"
 xmlns:its="http://www.w3.org/2005/11/its"
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink">
  <info>
    <title>Container orchestration</title>
  </info>
    <para>In a production environment, you are likely to manage multiple containers. To work with multiple containers, you
    have to group the containers into a pod that provides a specification for deploying and running the containers as well as allows them to share storage and network resources. In other words, a pod
    encapsulates an application composed of multiple containers into a single unit. The concept of pod was
    introduced by <link xlink:href="https://kubernetes.io/docs/concepts/workloads/pods/">&kube;</link>. &podman; uses the same definition as &kube;.</para>

      <para>Usually, containers within a pod can communicate directly with each other. Each pod contains an
      infrastructure container (INFRA), whose purpose is to hold the namespace. INFRA also enables &podman;
      to add other containers to the pod. Port bindings, cgroup-parent values and kernel namespaces are
      all assigned to the infrastructure container. Therefore, you cannot change any of these values later.</para>
      <informalfigure>
      <mediaobject>
      <imageobject>
      <imagedata fileref="pods_architecture.png" width="80.0%"/>
      </imageobject>
      <textobject><phrase>image</phrase></textobject>
      </mediaobject>
      </informalfigure>
      <para>Each container in a pod has its own instance of a monitoring program. The monitoring program watches
      the container's process and if the container dies, the monitoring program saves its exit code. The
      program also holds open the tty interface for the particular container. The monitoring program
      enables you to run containers in the detached mode when &podman; exits, because this program continues
      to run and enables you to attach tty later.</para>

    <section xml:id="sec-orchestration-podman">
    <title>Single container host with &podman;</title>
    
    <para><command>podman pod</command> is the command-line tool for creating, removing, querying and inspecting pods. You can
    check all the subcommands of <command>podman pod</command> in the
    <link xlink:href="https://docs.podman.io/en/latest/markdown/podman-pod.1.html">official upstream documentation</link>.</para>

    <para><command>podman pod create</command> creates a pod with a random name. You can use the <option>--name</option> parameter to
    assign the desired name to a pod.</para>
    <screen>&prompt.user;podman pod create
    344940492c00b6a19ececbc5b109351bf0a3b8b19b3c279a097da7a653c592d0</screen>
    <para>you can list our pods using the <command>podman pod list</command> command:</para>
    <screen>&prompt.user;podman pod list
    POD ID        NAME          STATUS      CREATED        INFRA ID      # OF CONTAINERS
    344940492c00  suspicious_curie  Created     2 minutes ago  617d7e3ce399  1</screen>
    <para>You can also list all containers with the pods they are associated with:</para>
    <screen>&prompt.user;podman ps -a --pod
    CONTAINER ID  IMAGE                 COMMAND     CREATED        STATUS      PORTS       NAMES               POD ID        PODNAME
    617d7e3ce399  localhost/podman-pause:4.3.1-1669118400              5 minutes ago  Created                 344940492c00-infra  344940492c00  suspicious_curie</screen>
    <para>The created pod has an infra container identified by the <literal>localhost/podman-pause:4.x</literal> name. The
    purpose of this container is to reserve the namespaces associated with the pod and allow &podman; to
    add other containers to the pod.</para>

    <para>Using the <command>podman run --pod</command> command, you can run a container and add it to the desired pod. For
    example, the command below runs a container based on the <package>suse/sle15</package> image and adds the container to
    the <literal>suspicious_curie</literal> pod:</para>
    <screen>&prompt.user;podman run -d --pod suspicious_curie registry.suse.com/bci/bci-base sleep 1h
    8f5af62a7c385bbd1a3a5cc3a53a8d0f8cf942adc26a065960d4232fcc93ac98</screen>
    <warning>
    <para>If this command shows the following warning,  refer to
    <link xlink:href="http://https//documentation.suse.com/container/all/single-html/SLES-container/#sec-bci-suseconnect-podman-buildah-nerdctl">Using container-suseconnect on non-SLE hosts or with &podman;, &buildah;, and nerdctl</link>:</para>
    </warning>
    <screen>WARN[0005] Path "/etc/SUSEConnect" from "/etc/containers/mounts.conf" doesn't exist, skipping
    WARN[0005] Failed to mount subscriptions, skipping entry in /etc/containers/mounts.conf: open /etc/zypp/credentials.d/SCCcredentials: permission denied</screen>
    <para>The command above adds a container that sleeps for 60 minutes and then exits. Run the <command>podman ps -a --pod</command> command again and you should see that the pod now has two containers.</para>
    <para>You can also check the command <command>podman pod ps</command>:</para>
    <screen>&prompt.user;podman pod ps
    POD ID        NAME          STATUS      CREATED         INFRA ID      # OF CONTAINERS
    344940492c00  suspicious_curie Running     21 minutes ago  617d7e3ce399  2</screen>
    <para>To stop our newly created container named <literal>objective_jemison</literal></para>
    <screen>&prompt.user;podman ps -a --pod
    CONTAINER ID  IMAGE                                COMMAND     CREATED         STATUS            PORTS       NAMES               POD ID        PODNAME
    617d7e3ce399  localhost/podman-pause:4.3.1-1669118400                             14 minutes ago  Up 4 minutes ago              344940492c00-infra  344940492c00  suspicious_curie 8f5af62a7c38  registry.suse.com/bci/bci-base:latest  sleep 1h    4 minutes ago   Up 4 minutes ago              objective_jemison   344940492c00  suspicious_curie
    &prompt.user;podman stop objective_jemison
    objective_jemison
    &prompt.user;podman pod ps
    POD ID        NAME          STATUS      CREATED         INFRA ID      # OF CONTAINERS
    344940492c00  suspicious_curie  Degraded    25 minutes ago  617d7e3ce399  2
    &prompt.user;podman ps -a --pod
    CONTAINER ID  IMAGE                                COMMAND     CREATED         STATUS                       PORTS       NAMES               POD ID        PODNAME
    617d7e3ce399  localhost/podman-pause:4.3.1-1669118400                             25 minutes ago  Up 15 minutes ago                        344940492c00-infra  344940492c00  suspicious_curie 8f5af62a7c38  registry.suse.com/bci/bci-base:latest  sleep 1h    15 minutes ago  Exited (137) 14 seconds ago              objective_jemison   344940492c00  suspicious_curie</screen>
    <para>You can also stop the pod and all of its containers using, podman pod stop</para>
    <screen># podman pod stop suspicious_curie
    344940492c00b6a19ececbc5b109351bf0a3b8b19b3c279a097da7a653c592d0
    &prompt.user;podman ps -ap
    CONTAINER ID  IMAGE                                COMMAND     CREATED         STATUS                      PORTS       NAMES               POD ID        PODNAME
    617d7e3ce399  localhost/podman-pause:4.3.1-1669118400                             29 minutes ago  Exited (0) 7 seconds ago                344940492c00-infra  344940492c00  suspicious_curie 8f5af62a7c38  registry.suse.com/bci/bci-base:latest  sleep 1h    19 minutes ago  Exited (137) 3 minutes ago              objective_jemison   344940492c00  suspicious_curie</screen>
    <para>You can also start and restart everything with <command>sudo podman start <replaceable>CONTAINER_NAME</replaceable></command>,
    <command>podman pod start <replaceable>POD_NAME</replaceable></command> or <command>podman pod restart <replaceable>POD_NAME</replaceable></command> .</para>
    <para>There are two ways to remove pods. You can use the <command>podman pod rm</command> command to remove one or more pods.
    Alternatively, you can remove all stopped pods using the <command>podman pod prune</command> command.
    To remove a pod or several pods, run the <command>podman pod rm</command> command as follows:</para>
    <screen>&prompt.user;podman pod rm <replaceable>POD</replaceable></screen>
    <para>POD can be a pod name or a pod ID.
    To remove all currently stopped pods, use the <command>podman pod prune</command> command. Make sure that all stopped
    pods are intended to be removed before you run the <command>podman pod prune</command> command, otherwise there is a risk of removing pods that are still in use.</para>

    <para>A container runtime makes it easy to launch an application distributed as a
    single container. But things get more complicated when you need to run
    applications consisting of multiple containers, or when it's necessary to start
    the applications automatically on system boot and restart them after they
    crash. While container orchestration tools like &kube; are designed for that
    exact purpose, they are intended to be used for highly distributed and scalable
    systems with hundreds of nodes, and not for a single machine. systemd and &podman;
    are much better suited for the single-machine scenario, as they do not add
    another layer complexity to your existing setup.</para>

    <para>&podman; supports creating systemd unit files with
    the <command>podman generate systemd</command> subcommand. The subcommand creates a systemd unit
    file, making it possible to control a container or pod via systemd. Using the
    unit file you can launch a container or pod on boot, automatically restart it if
    a failure occurs, and keep its logs in journald.</para>

    <para>The following example uses a simple NGINX container:</para>
    <screen>&prompt.user;podman run -d --name web -p 8080:80 docker.io/nginx
    c0148d8476418a2da938a711542c55efc09e4119909aea70e287465c6fb51618</screen>
    <para>Generating a systemd unit for the container can be done as follows:</para>
    <screen>&prompt.user;podman generate systemd --name --new web
    # container-web.service
    # autogenerated by Podman 4.2.0
    # Tue Sep 13 10:58:54 CEST 2022
    
    [Unit]
    Description=Podman container-web.service
    Documentation=man:podman-generate-systemd(1)
    Wants=network-online.target
    After=network-online.target
    RequiresMountsFor=%t/containers
    
    [Service]
    Environment=PODMAN_SYSTEMD_UNIT=%n
    Restart=on-failure
    TimeoutStopSec=70
    ExecStartPre=/bin/rm -f %t/%n.ctr-id
    ExecStart=/usr/bin/podman run \
            --cidfile=%t/%n.ctr-id \
            --cgroups=no-conmon \
            --rm \
            --sdnotify=conmon \
            --replace \
            -d \
            --name web \
            -p 8080:80 docker.io/nginx
    ExecStop=/usr/bin/podman stop --ignore --cidfile=%t/%n.ctr-id
    ExecStopPost=/usr/bin/podman rm -f --ignore --cidfile=%t/%n.ctr-id
    Type=notify
    NotifyAccess=all
    
    [Install]
    WantedBy=default.target</screen>
    <para>&podman; outputs a unit file to the console that can be put either into the user
    unit systemd directories (<filename>~/.config/systemd/user/</filename> or <filename>/etc/systemd/user/</filename>) or
    into the system unit systemd directory (<filename>/etc/systemd/system</filename>) and control the
    container via systemd. The <option>--new</option> flag instructs &podman; to recreate the
    container on a restart. This ensures that the systemd unit is self-contained,
    and it does not depend on external state. The <option>--name</option> flag allows you to assign
    a user-friendly name to the container: without it &podman; uses container IDs
    instead of their names.</para>
    <para>To control the container as a user unit, proceed as follows:</para>
    <screen>&prompt.user;podman generate systemd --name --new --files web
    /home/user/container-web.service
    &prompt.user;mv container-web.service ~/.config/systemd/user/
    &prompt.user;systemctl --user daemon-reload</screen>
    <para>Now the container can be started with <command>systemctl --user start container-web</command>:</para>
    <screen>&prompt.user;systemctl --user start container-web
    &prompt.user;systemctl --user is-active container-web.service
    active</screen>
    <para>Run the <command>podman ps</command> command to see the list of all running containers :</para>
    <screen>&prompt.user;podman ps
    CONTAINER ID  IMAGE                           COMMAND               CREATED         STATUS             PORTS                 NAMES
    af92743971d2  docker.io/library/nginx:latest  nginx -g daemon o...  15 minutes ago  Up 15 minutes ago  0.0.0.0:8080-&gt;80/tcp  web</screen>
    <para>One of the benefits of managing the container via systemd is the ability to
    automatically restart the container if it crashes. You can simulate a crash by
    sending <literal>SIGKILL</literal> to the main process in the container:</para>
    <screen>&prompt.user;podman ps
    CONTAINER ID  IMAGE                           COMMAND               CREATED             STATUS                 PORTS                 NAMES
    4c89582fa9cb  docker.io/library/nginx:latest  nginx -g daemon o...  About a minute ago  Up About a minute ago  0.0.0.0:8080-&gt;80/tcp  web
    
    &prompt.user;kill -9 $(podman inspect --format "{{.State.Pid}}" web)
    
    &prompt.user;podman ps
    CONTAINER ID  IMAGE                           COMMAND               CREATED        STATUS            PORTS                 NAMES
    0b5be4493251  docker.io/library/nginx:latest  nginx -g daemon o...  4 seconds ago  Up 4 seconds ago  0.0.0.0:8080-&gt;80/tcp  web</screen>
    <para>Note that the container is <emphasis role="strong">not</emphasis> restarted when it is stopped gracefully,
    e.g. via <command>podman stop web</command>. To always restart it, add the flag
    <option>--restart-policy=always</option> to <command>podman generate systemd</command>.</para>
    </section>
    <section xml:id="id-updating-container-images">
    <title>Updating container images</title>
    <para>Using the described approach means that the container image is never
    updated. You can solve the problem by adding the <option>--pull=always</option> flag to the
    <option>ExecStart=</option> entry in the unit file. But be aware that this increases the
    startup time of the container and updates the image on <emphasis role="strong">every</emphasis> restart. The
    latter also means that a container image update can make the container
    unavailable outside of a scheduled maintenance window due to a newly
    introduced bug.</para>
    <para>The
    <link xlink:href="https://docs.podman.io/en/latest/markdown/podman-auto-update.1.html"><command>auto-update</command></link>
    subcommand in &podman; provides a possible solution. Add the label
    <option>io.containers.autoupdate=registry</option> to a container to make &podman; pull a new
    version of the container image from the registry when running <command>podman
    auto-update</command>. This makes it possible to update all container images with a
    single command at a desired time, and without increasing the startup time of the
    systemd units.</para>
    <para>The auto update feature can be enabled by adding the line <option>--label
    "io.containers.autoupdate=registry" \</option> to the <option>ExecStart=</option> entry of the
    container's systemd unit file. for the NGINX example, modify
    <literal>~/.config/systemd/user/container-web.service</literal> as follows:</para>
    <screen>ExecStart=/usr/bin/podman run \
            --cidfile=%t/%n.ctr-id \
            --cgroups=no-conmon \
            --rm \
            --sdnotify=conmon \
            --replace \
            -d \
            --name web \
            --label "io.containers.autoupdate=registry" \
            -p 8080:80 docker.io/nginx</screen>
    <para>After reloading the daemons and restarting the container, perform a dry
    run of the update (it will most likely not report any updates):</para>
    <screen>&prompt.user;podman auto-update --dry-run
    UNIT                   CONTAINER           IMAGE            POLICY      UPDATED
    container-web.service  87d263489307 (web)  docker.io/nginx  registry    false</screen>
    <para>It is good practice to have external testing in place to make sure that image
    updates are generally safe to be deployed. If you are confident in the quality
    of our container image, you can let &podman; automatically apply image updates
    periodically by enabling the <option>podman-auto-update.timer</option>:</para>
    <screen># only for the current user
    &prompt.user;systemctl --user enable podman-auto-update.timer
    Created symlink /home/user/.config/systemd/user/timers.target.wants/podman-auto-update.timer → /usr/lib/systemd/user/podman-auto-update.timer.
    # or as root
    &prompt.user;sudo systemctl enable podman-auto-update.timer
    Created symlink /etc/systemd/system/timers.target.wants/podman-auto-update.timer → /usr/lib/systemd/system/podman-auto-update.timer.</screen>
    </section>

    <section xml:id="id-managing-multiple-containers">
    <title>Managing multiple containers</title>
    <para>Certain applications rely on more than one container to function, for example, a
    web front-end, a back-end server and a
    database. <link xlink:href="https://docs.docker.com/compose/">Docker compose</link> is popular tool for
    deploying multi-container applications on a single machine. While &podman; does
    not support the <command>compose</command> command natively, in most cases compose files can be
    ported to a &podman; pod and multiple containers.</para>
    <para>The following example deploys a Drupal and PostgreSQL container in a single pod
    and manages these via systemd units. First, create a new pod that exposes the
    Drupal web interface:</para>
    <screen>&prompt.user;podman pod create -p 8080:80 --name drupal
    736cab072c49e68ad368ba819e9117be13ef8fa048a2eb88736b5968b3a19a64</screen>
    <para>Once the pod has been created, launch the Drupal front-end and the
    PostgreSQL database inside it:</para>
    <screen>&prompt.user;podman run -d --name drupal-frontend --pod drupal docker.io/drupal
    ffd2fbd6d445e63fb0c28abb8d25ced78f819211d3bce9d6174fe4912d89f0ca
    
    &prompt.user;podman run -d --name drupal-pg --pod drupal \
          -e POSTGRES_DB=drupal \
          -e POSTGRES_USER=user \
          -e POSTGRES_PASSWORD=pass \
          docker.io/postgres:11
    a4dc31b24000780d9ffd81a486d0d144c47c3adfbecf0f7effee24a00273fcde</screen>
    <para>This results in three running containers: the Drupal web interface, the
    PostgreSQL database and the pod's infrastructure container.</para>
    <screen>&prompt.user;podman ps
    CONTAINER ID  IMAGE                                    COMMAND               CREATED             STATUS                 PORTS                 NAMES
    2948fa1476c6  localhost/podman-pause:4.2.0-1660228937                        2 minutes ago       Up About a minute ago  0.0.0.0:8080-&gt;80/tcp  736cab072c49-infra
    ffd2fbd6d445  docker.io/library/drupal:latest          apache2-foregroun...  About a minute ago  Up About a minute ago  0.0.0.0:8080-&gt;80/tcp  drupal-frontend
    a4dc31b24000  docker.io/library/postgres:11            postgres              40 seconds ago      Up 41 seconds ago      0.0.0.0:8080-&gt;80/tcp  drupal-pg</screen>
    <para>Creating a systemd unit for the pod is done similar to a
    single container:</para>
    <screen language="Shell" linenumbering="unnumbered">&prompt.user;podman generate systemd --name --new --files drupal
    /home/user/pod-drupal.service
    /home/user/container-drupal-frontend.service
    /home/user/container-drupal-pg.service
    &prompt.user;mv *service ~/.config/systemd/user/
    &prompt.user;systemctl daemon-reload --user</screen>
    <para>Since &podman; is aware of which containers belong to the <literal>drupal</literal> pod and how
    their systemd units are called, it can correctly add the dependencies to the
    pod's unit file. This means that when you start or stop the pod, systemd ensures
    that all containers inside the pod are started or stopped automatically.</para>
    <para>To check systemd's dependency handling, first stop the <literal>drupal</literal> pod and verify
    that no containers are currently running on the host:</para>
    <screen>&prompt.user;podman pod stop drupal
    736cab072c49e68ad368ba819e9117be13ef8fa048a2eb88736b5968b3a19a64
    &prompt.user;podman pod rm drupal
    736cab072c49e68ad368ba819e9117be13ef8fa048a2eb88736b5968b3a19a64
    &prompt.user;podman ps -a
    CONTAINER ID  IMAGE       COMMAND     CREATED     STATUS      PORTS       NAMES</screen>
    <para>Start the <literal>drupal</literal> pod via <command>systemctl start --user pod-drupal.service</command>, and
    systemd launches the containers inside the pod:</para>
    <screen>&prompt.user;systemctl start --user pod-drupal.service
    &prompt.user;podman ps
    CONTAINER ID  IMAGE                                    COMMAND               CREATED        STATUS            PORTS                 NAMES
    d1589d3ac68b  localhost/podman-pause:4.2.0-1660228937                        5 seconds ago  Up 5 seconds ago  0.0.0.0:8080-&gt;80/tcp  ca41b505bd13-infra
    a49bea53c20c  docker.io/library/postgres:11            postgres              4 seconds ago  Up 5 seconds ago  0.0.0.0:8080-&gt;80/tcp  drupal-pg
    dc9dca018dad  docker.io/library/drupal:latest          apache2-foregroun...  4 seconds ago  Up 5 seconds ago  0.0.0.0:8080-&gt;80/tcp  drupal-frontend</screen>
    </section>
    <section xml:id="sec-orchestration-podman-more">
    <title>More on &podman;</title>
    <para>If you want to learn more about &podman; and handling pod deployment,
    please check <link xlink:href="https://docs.podman.io/en/latest/">https://docs.podman.io/en/latest/</link> and <link xlink:href="https://github.com/containers/podman">https://github.com/containers/podman</link></para>
    </section>
    <section xml:id="sec-orchestration-kubernetes">
    <title>Multi-container host with &kube;</title>
    <para><link xlink:href="https://kubernetes.io">&kube;</link> is an open source container orchestration engine for automating deployment, scaling and
    management of containerized applications. The open source project is hosted by the Cloud Native
    Computing Foundation (<link xlink:href="https://www.cncf.io/about">CNCF</link>).</para>
    
    <para>&kube; makes it possible for multiple machines (or servers or nodes) to work together and create a cluster that you can
    then interact with through APIs. We recommend using <link xlink:href="https://ranchermanager.docs.rancher.com">Rancher</link> for deploying &kube; clusters and managing applications running on top of them. A single Rancher setup can manage multiple &kube; clusters running anywhere: from bare-metal, to on-prem or cloud service providers.</para>
    <para>For more information on Ranger, refer to the <link xlink:href="https://ranchermanager.docs.rancher.com">official Rancher documentation</link>.</para>
    </section>
    <section xml:id="sec-k3s">
    <title>Lightweight &kube; (k3s)</title>
    <para><link xlink:href="https://k3s.io">K3s</link> is lightweight CNCF-certified &kube; distribution
    built for IoT &amp; Edge computing. Unlike &kube; K3s is packaged as a single &lt;60 MB binary and
    optimized for the &arm; architecture.</para>
    <para>For more info, refer to
    <link xlink:href="https://www.suse.com/c/rancher_blog/introduction-to-k3s/">Introduction to K3s</link> and
    <link xlink:href="https://documentation.suse.com/trd/kubernetes/single-html/kubernetes_ri_rancher-k3s-sles/index.html#id-introduction">how to install K3s and Rancher on SUSE Linux Enterprise Server</link></para>
    </section>
</article>
