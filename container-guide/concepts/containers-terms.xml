<?xml version="1.0" encoding="UTF-8"?>
<!-- This file originates from the project https://github.com/openSUSE/doc-kit -->
<!-- This file can be edited downstream. -->
<?xml-stylesheet href="urn:x-suse:xslt:profiling:docbook51-profile.xsl"
 type="text/xml"
 title="Profiling step"?>
<!DOCTYPE article
[
  <!ENTITY % entities SYSTEM "../common/generic-entities.ent">
    %entities;
]>
<article xml:id="container-terms" xml:lang="en"
 role="concept"
 xmlns="http://docbook.org/ns/docbook" version="5.2"
 xmlns:its="http://www.w3.org/2005/11/its"
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink">
  <info>
    <title>Terminology</title>
  </info>
  <variablelist>
    <varlistentry>
      <term>Container</term>
      <listitem>
        <para>
          A <emphasis>container</emphasis> is a running instance based on a
          particular container image. Each <emphasis>container</emphasis> can
          be distinguished by a unique container ID.
        </para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Control groups</term>
      <listitem>
        <para>
          <emphasis>Control groups</emphasis>, also called
          <literal>cgroups</literal> , are a Linux kernel feature that allows
          aggregating or partitioning tasks (processes) and all their children
          into hierarchically-organized groups, to manage their resource
          limits.
        </para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Docker Open Source Engine</term>
      <listitem>
        <para>
          Docker Open Source Engine is a server-client type application that
          performs all tasks related to containers. Docker Open Source Engine
          comprises the following: +
        </para>
        <itemizedlist>
          <listitem>
            <para>
              <emphasis role="strong">Daemon:.</emphasis> + The server side of
              Docker Open Source Engine, which manages all Docker objects
              (images, containers, network connections used by containers,
              etc.).
            </para>
          </listitem>
          <listitem>
            <para>
              <emphasis role="strong">REST API:.</emphasis> + Applications can
              use this API to communicate directly with the daemon.
            </para>
          </listitem>
          <listitem>
            <para>
              <emphasis role="strong">CLI client:.</emphasis> + Enables you to
              communicate with the daemon. If the daemon is running on a
              different machine than the CLI client, the CLI client can
              communicate by using network sockets or the REST API provided by
              Docker Open Source Engine.
            </para>
          </listitem>
        </itemizedlist>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Dockerfile</term>
      <listitem>
        <para>
          A <emphasis>Dockerfile</emphasis> provides instructions on how to
          build a container image. Docker Open Source Engine reads instructions
          in the <emphasis>Dockerfile</emphasis> and builds a new image
          according to the instructions.
        </para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Image</term>
      <listitem>
        <para>
          An <emphasis>image</emphasis> is a read-only template used to create
          a <emphasis>container</emphasis>. A Docker image is made of a series
          of layers built one over the other. Each layer corresponds to a
          permanent change, for example, an update of an application. The
          changes are stored in a file called a
          <emphasis>Dockerfile</emphasis>. For more details, see
          <link xlink:href="http://docs.docker.com/engine/reference/glossary#image">the
          official Docker documentation</link>.
        </para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Container image</term>
      <listitem>
        <para>
          A <emphasis>container image</emphasis> is an unchangeable, static
          file that includes executable code so it can run an isolated process
          on IT infrastructure. The image is comprised of system libraries,
          system tools, and other platform settings a program needs to run on a
          containerization platform. A container image is compiled from file
          system layers built on top of a parent or base image.
        </para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Base image</term>
      <listitem>
        <para>
          A <emphasis>base image</emphasis> is an image that does not have a
          parent image. In a Dockerfile, a base image is identified by the
          <literal>FROM scratch</literal> directive.
        </para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Parent image</term>
      <listitem>
        <para>
          The image that serves as the basis for another container image. In
          other words, if an image is not a base image, it is derived from a
          parent image. In a Dockerfile, the <literal>FROM</literal> directive
          is pointing to the parent image. Most Docker containers are created
          using parent images.
        </para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Namespaces</term>
      <listitem>
        <para>
          Docker Open Source Engine uses Linux <emphasis>namespaces</emphasis>
          for its containers, which isolates resources reserved for particular
          containers.
        </para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Orchestration</term>
      <listitem>
        <para>
          In a production environment, you typically need a cluster with many
          containers on each cluster node. The containers must cooperate and
          you need a framework that enables you to automatically manage the
          containers. The act of automatic container management is called
          container orchestration and is typically handled by Kubernetes.
        </para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Registry</term>
      <listitem>
        <para>
          A <emphasis>registry</emphasis> is storage for already-created
          images. It typically contains several
          <emphasis>repositories</emphasis>. There are two types of registries:
          +
        </para>
        <itemizedlist>
          <listitem>
            <para>
              public registry: Any (usually registered) user can download and
              use images. A typical example of a public registry is
              <link xlink:href="https://hub.docker.com/">Docker Hub</link>.
            </para>
          </listitem>
          <listitem>
            <para>
              private registry: Access is restricted to particular users, or
              from a particular private network.
            </para>
          </listitem>
        </itemizedlist>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Repository</term>
      <listitem>
        <para>
          A <emphasis>repository</emphasis> is storage for images in a
          <emphasis>registry</emphasis>.
        </para>
      </listitem>
    </varlistentry>
  </variablelist>
</article>
