<?xml version="1.0" encoding="UTF-8"?>
<!-- This file originates from the project https://github.com/openSUSE/doc-kit -->
<!-- This file can be edited downstream. -->
<?xml-stylesheet href="urn:x-suse:xslt:profiling:docbook51-profile.xsl"
 type="text/xml"
 title="Profiling step"?>
<!DOCTYPE article
[
  <!ENTITY % entities SYSTEM "../common/generic-entities.ent">
    %entities;
]>
<article xml:id="container-build-app-images" xml:lang="en"
 role="concept"
 xmlns="http://docbook.org/ns/docbook" version="5.2"
 xmlns:its="http://www.w3.org/2005/11/its"
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink">
  <info>
    <title>Creating application container images</title>
  </info>
  <para>
    Applications that are suitable for running inside containers include
    daemons, Web servers, and applications that expose IP ports for
    communications. You can use &podman; to automate the building and
    deployment processes by performing the build process inside a container,
    building an image, and then deploying containers based on the image.
  </para>
  <para>
    Running an application inside a container has the following advantages:
  </para>
  <itemizedlist>
    <listitem>
      <para>
        The image with the application is portable across servers running
        different Linux host distributions and versions.
      </para>
    </listitem>
    <listitem>
      <para>
        You can share the image of the application using a repository.
      </para>
    </listitem>
    <listitem>
      <para>
        You can use different versions of software in the container and on the
        host system, without creating dependency issues.
      </para>
    </listitem>
    <listitem>
      <para>
        You can run multiple instances of the same application that are
        independent from each other.
      </para>
    </listitem>
  </itemizedlist>
  <para>
    Using &podman; to build applications has the following advantages:
  </para>
  <itemizedlist>
    <listitem>
      <para>
        You can prepare an image of the complete build environment.
      </para>
    </listitem>
    <listitem>
      <para>
        The application can run in the same environment it was built in.
      </para>
    </listitem>
    <listitem>
      <para>
        Developers can test their code in the same environment as used in
        production.
      </para>
    </listitem>
  </itemizedlist>
  <para>
    The following section provides examples and recommendations on creating
    container images for applications. Before proceeding, make sure that you
    have activated your &sls; base image as described in
    <xref linkend="sec-download-prebuild-images"/> .
  </para>
  <section xml:id="sec-application-with-specific-dependencies">
    <title>Running an application with specific package versions</title>
    <para>
      If your application needs a version of a package different from the
      package installed on the system, you can create a container image that
      includes the package version the application requires. The following
      example <filename>Dockerfile</filename> allows building an image based on
      an up-to-date version of &sls; with an older version of the
      <package>example</package> package:
    </para>
<screen>FROM registry.suse.com/suse/sle15
    LABEL maintainer=EXAMPLEUSER_PLAIN
    RUN zypper ref &amp;&amp; zypper in -f example-1.0.0-0
    COPY application.rpm /tmp/
    RUN zypper --non-interactive in /tmp/application.rpm
    ENTRYPOINT ["/etc/bin/application"]
    CMD ["-i"]</screen>
    <para>
      Build the image by running the following command in the directory that
      the <filename>Dockerfile</filename> resides in:
    </para>
<screen>&prompt.user;podman build --tag tux_application:latest .</screen>
    <para>
      The <filename>Dockerfile</filename> example shown above performs the
      following operations during the image build process:
    </para>
    <orderedlist>
      <listitem>
        <para>
          Updates the &sls; repositories.
        </para>
      </listitem>
      <listitem>
        <para>
          Installs the desired version of the <package>example</package>
          package.
        </para>
      </listitem>
      <listitem>
        <para>
          Copies the application package to the image. The binary RPM must be
          placed in the build context.
        </para>
      </listitem>
      <listitem>
        <para>
          Unpacks the application.
        </para>
      </listitem>
      <listitem>
        <para>
          The last two steps run the application after a container is started.
        </para>
      </listitem>
    </orderedlist>
    <para>
      After a successful build of the <literal>tux_application</literal> image,
      you can start a container based on the new image using the following
      command:
    </para>
<screen>&prompt.user;podman run -it --name application_instance tux_application:latest</screen>
    <para>
      Keep in mind that after closing the application, the container exits as
      well.
    </para>
  </section>
  <section xml:id="sec-applications-with-configuration">
    <title>Running an application with a specific configuration</title>
    <para>
      To run an instance using a different configuration, create a derived
      image and include the additional configuration with it. In the example
      below, an application called <emphasis>example</emphasis> is configured
      using the file <filename>/etc/example/configuration_example</filename>:
    </para>
<screen>FROM registry.suse.com/suse/sle15 <co xml:id="CO1-1"/>
    RUN zypper ref &amp;&amp; zypper --non-interactive in example <co xml:id="CO1-2"/>
    ENV BACKUP=/backup <co xml:id="CO1-3"/>
    RUN mkdir -p $BACKUP <co xml:id="CO1-4"/>
    COPY configuration_example /etc/example/ <co xml:id="CO1-5"/>
    ENTRYPOINT ["/etc/bin/example"] <co xml:id="CO1-6"/></screen>
    <para>
      The above example <literal>Dockerfile</literal> performs the following
      operations:
    </para>
    <calloutlist>
      <callout arearefs="CO1-1">
        <para>
          Pulls the <literal>sle15</literal> base image as described in
          <xref linkend="sec-download-prebuild-images"/>.
        </para>
      </callout>
      <callout arearefs="CO1-2">
        <para>
          Refreshes repositories and installations of the
          <emphasis>example</emphasis>.
        </para>
      </callout>
      <callout arearefs="CO1-3">
        <para>
          Sets a <option>BACKUP</option> environment variable (the variable
          persists to containers started from the image). You can always
          overwrite the value of the variable while running the container by
          specifying a new value.
        </para>
      </callout>
      <callout arearefs="CO1-4">
        <para>
          Creates the directory <filename>/backup</filename>.
        </para>
      </callout>
      <callout arearefs="CO1-5">
        <para>
          Copies the <filename>configuration_example</filename> to the image.
        </para>
      </callout>
      <callout arearefs="CO1-6">
        <para>
          Runs the <literal>example</literal> application.
        </para>
      </callout>
    </calloutlist>
  </section>
  <section xml:id="sec-run-application-with-volumes">
    <title>Sharing data between an application and the host system</title>
    <para>
      &podman; allows sharing data between host and a container by using
      volumes. You can specify a mount point directly in the
      <filename>Dockerfile</filename>. However, you cannot specify a directory
      on the host system in the <filename>Dockerfile</filename>, as the
      directory may not be accessible at build time. Find the mounted directory
      under <filename>/var/lib/docker/volumes/</filename> on the host system.
    </para>
    <note>
      <title>Discarding changes to the directory to be shared</title>
      <para>
        After you specify a mount point by using the <literal>VOLUME</literal>
        instruction, all changes made to the directory with the
        <command>RUN</command> instruction are discarded. After the mount point
        is specified, the volume becomes a part of a temporary container which
        is removed after a successful build. This means that for certain
        actions to take effect, they must be performed
        <emphasis role="strong">before</emphasis> specifying a mount point. For
        example, if you need to change permissions, do this before you specify
        the directory as a mount point in the <filename>Dockerfile</filename>.
      </para>
    </note>
    <para>
      Specify a particular mount point on the host system when running a
      container by using the <option>-v</option> option:
    </para>
<screen>&prompt.user;podman run -it --name testing -v /home/tux/data:/data sles12sp4:latest /bin/bash</screen>
    <note>
      <para>
        The <option>-v</option> option overwrites the <command>VOLUME</command>
        instruction if you specify the same mount point in the container.
      </para>
    </note>
    <para>
      The following <filename>Dockerfile</filename> example builds an image
      containing a Web server that reads Web content from the host's file
      system:
    </para>
<screen>FROM registry.suse.com/suse/sles12sp4
    RUN zypper ref &amp;&amp; zypper --non-interactive in apache2
    COPY apache2 /etc/sysconfig/
    RUN chown -R admin /data
    EXPOSE 80
    VOLUME /data
    ENTRYPOINT ["apache2ctl"]</screen>
    <para>
      The example above installs the Apache Web server to the image and copies
      the entire configuration to the image. The <literal>data</literal>
      directory is owned by the <emphasis>admin</emphasis> user and is used as
      a mount point to store Web pages.
    </para>
  </section>
  <section xml:id="sec-docker-daemons">
    <title>Applications running in the background</title>
    <para>
      If your application needs to run in the background as a daemon, or as an
      application exposing ports for communication, you can run the container
      in the background.
    </para>
    <para>
      An example <filename>Dockerfile</filename> for an application exposing a
      port is as follows:
    </para>
<screen xml:id="ex-docker-dockerfile-apache2">FROM registry.suse.com/suse/sle15 <co xml:id="CO2-1"/>
    LABEL maintainer=<replaceable>EXAMPLEUSER_PLAIN</replaceable> <co xml:id="CO2-2"/>
    ADD etc/ /etc/zypp/ <co xml:id="CO2-3"/>
    RUN zypper refs &amp;&amp; zypper refresh <co xml:id="CO2-4"/>
    RUN zypper --non-interactive in apache2 <co xml:id="CO2-5"/>
    RUN echo "The Web server is running" &prompt.user;/srv/www/htdocs/test.html <co xml:id="CO2-6"/>
    # COPY data/* /srv/www/htdocs/ <co xml:id="CO2-7"/>
    EXPOSE 80 <co xml:id="CO2-8"/>
    ENTRYPOINT ["/usr/sbin/httpd"]
    CMD ["-D", "FOREGROUND"]</screen>
    <calloutlist>
      <callout arearefs="CO2-1">
        <para>
          Pull the base image as described in
          <xref linkend="sec-download-prebuild-images"/>.
        </para>
      </callout>
      <callout arearefs="CO2-2">
        <para>
          Maintainer of the image (optional).
        </para>
      </callout>
      <callout arearefs="CO2-3">
        <para>
          The repositories and service files to be copied to
          <filename>/etc/zypp/repos.d</filename> and
          <filename>/etc/zypp/services.d</filename>. This makes them available
          on the host in the container.
        </para>
      </callout>
      <callout arearefs="CO2-4">
        <para>
          Command to refresh repositories and services.
        </para>
      </callout>
      <callout arearefs="CO2-5">
        <para>
          Command to install Apache2.
        </para>
      </callout>
      <callout arearefs="CO2-6">
        <para>
          Test line for debugging purposes. This line can be removed if
          everything works as expected.
        </para>
      </callout>
      <callout arearefs="CO2-7">
        <para>
          A <command>COPY</command> instruction to copy data from the host
          system to the directory in the container used by the server. The
          leading hash character ( <literal>#</literal> ) marks this line as a
          comment; it is not executed.
        </para>
      </callout>
      <callout arearefs="CO2-8">
        <para>
          The exposed port for the Apache Web server.
        </para>
      </callout>
    </calloutlist>
    <note>
      <para>
        To use port 80, make sure there is no other server software running on
        this port on the host.
      </para>
    </note>
    <para>
      To use the container, proceed as follows:
    </para>
    <orderedlist>
      <listitem>
        <para>
          Prepare the host system for the build process.
        </para>
        <orderedlist numeration="loweralpha">
          <listitem>
            <para>
              Make sure the host system is subscribed to the Server
              Applications Module of &sls;. To view installed modules or
              install additional modules, open YaST and select Add System
              Extensions or Modules.
            </para>
          </listitem>
          <listitem>
            <para>
              Make sure the &slea; images from the &suseregistry; are installed
              as described in <xref linkend="sec-download-prebuild-images"/>.
            </para>
          </listitem>
          <listitem>
            <para>
              Save the <filename>Dockerfile</filename> in the
              <filename>docker</filename> directory.
            </para>
          </listitem>
          <listitem>
            <para>
              Within the container, you need access to software repositories
              and services that are registered on the host. To make them
              available, copy repositories and service files from the host to
              the <filename>docker/etc</filename> directory:
            </para>
<screen>&prompt.user;cd docker
    &prompt.user;mkdir etc
    &prompt.user;sudo cp -a /etc/zypp/{repos.d,services.d} etc/</screen>
            <para>
              Instead of copying all repository and service files, you can also
              copy only the subset that is required by the container.
            </para>
          </listitem>
          <listitem>
            <para>
              Add Web site data (such as HTML files) into the
              <filename>docker/data</filename> directory. The contents of this
              directory are copied to the container image and are thus
              published by the Web server.
            </para>
          </listitem>
        </orderedlist>
      </listitem>
      <listitem>
        <para>
          Build the container. Set a tag for your image with the
          <option>-t</option> option (in the command below, it is
          <replaceable>EXAMPLEUSER_PLAIN</replaceable>):
        </para>
<screen>&prompt.user;docker build -t <replaceable>EXAMPLEUSER_PLAIN</replaceable>/apache2 .</screen>
        <para>
          &deng; executes the instructions provided in the
          <filename>Dockerfile</filename>: pull the base image, copy content,
          refresh repositories, install the Apache2, etc.
        </para>
      </listitem>
      <listitem>
        <para>
          Start a container instance from the image created in the previous
          step:
        </para>
<screen>&prompt.user;docker run --detach --interactive --tty <replaceable>EXAMPLEUSER_PLAIN</replaceable>/apache2</screen>
        <para>
          &deng; returns the container ID, for example:
        </para>
<screen>7bd674eb196d330d50f8a3cfc2bc61a243a4a535390767250b11a7886134ab93</screen>
      </listitem>
      <listitem>
        <para>
          Point a browser to
          <link xlink:href="http://localhost:80/test.html">http://localhost:80/test.html</link>
          . You should see the message <emphasis>The Web server is
          running</emphasis>.
        </para>
      </listitem>
      <listitem>
        <para>
          To see an overview of running containers, run the <command>docker ps
          --latest</command> command:
        </para>
<screen>&prompt.user;docker ps --latest
    CONTAINER ID        IMAGE               COMMAND                  [...]
    7bd674eb196d
    tux/apache2         "/usr/sbin/httpd -..."   [...]</screen>
        <para>
          To stop and delete the container, run the following command:
        </para>
<screen>&prompt.user;docker rm --force 7bd674eb196d</screen>
      </listitem>
    </orderedlist>
    <para>
      You can use the resulting container to serve your data with the Apache2
      Web server by following these steps:
    </para>
    <orderedlist>
      <listitem>
        <para>
          In the <filename>Dockerfile</filename> :
        </para>
        <itemizedlist>
          <listitem>
            <para>
              In the example <filename>Dockerfile</filename>, comment the line
              that starts with <literal>RUN echo</literal> by adding a
              <literal>#</literal> character at its beginning.
            </para>
          </listitem>
          <listitem>
            <para>
              In the example <filename>Dockerfile</filename>, uncomment the
              line starting with <literal>COPY</literal> by removing the
              leading <literal>#</literal> character.
            </para>
          </listitem>
        </itemizedlist>
      </listitem>
      <listitem>
        <para>
          Rebuild the image.
        </para>
      </listitem>
      <listitem>
        <para>
          Run the image in detached mode:
        </para>
<screen>&prompt.user;docker run --detach --interactive --tty <replaceable>EXAMPLEUSER_PLAIN</replaceable>/apache2</screen>
        <para>
          &deng; responds with the container ID, for example:
        </para>
<screen>e43fff4ae9832ecdb7677c058a73039d7610c32145a1d9b6ad0a4ed52b5c4dc7</screen>
      </listitem>
    </orderedlist>
    <para>
      To view the published data, point a browser at
      <link xlink:href="http://localhost:80/test.html">http://localhost:80/test.html</link>
      .
    </para>
    <para>
      To avoid copying Web site data into the container, share a directory of
      the host with the container. For more information, see
      <link xlink:href="https://docs.docker.com/storage/volumes/"/>
      .
    </para>
  </section>
</article>
