<?xml version="1.0" encoding="UTF-8"?>
<!-- This file originates from the project https://github.com/openSUSE/doc-kit -->
<!-- This file can be edited downstream. -->
<?xml-stylesheet href="urn:x-suse:xslt:profiling:docbook51-profile.xsl"
 type="text/xml"
 title="Profiling step"?>
<!DOCTYPE article
[
  <!ENTITY % entities SYSTEM "../common/generic-entities.ent">
    %entities;
]>
<article xml:id="container-bci-suseconnect" xml:lang="en"
 role="concept"
 xmlns="http://docbook.org/ns/docbook" version="5.1"
 xmlns:its="http://www.w3.org/2005/11/its"
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink">
  <info>
    <title>Using container-suseconnect with &bcia;s</title>
    <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
      <dm:bugtracker>
        <dm:url>https://bugzilla.suse.com/enter_bug.cgi</dm:url>
        <dm:component>Smart Docs</dm:component>
        <dm:product>Documentation</dm:product>
        <dm:assignee>dpopov@suse.com</dm:assignee>
      </dm:bugtracker>
      <dm:translation>no</dm:translation>
    </dm:docmanager>
  </info>
  <para><link xlink:href="https://github.com/&suse;/container-suseconnect"><literal>container-suseconnect</literal></link>
  is a plugin available in all &bcia;s that ship with
  &zypper;. When the plugin detects the host's &suse; Linux Enterprise Server
  registration credentials, it uses them to give the container access the
  &suse; Linux Enterprise repositories. This includes additional modules and
  previous package versions that are not part of the free <literal>SLE_BCI</literal>
  repository.
  Refer to  <xref linkend="sec-container-suseconnect"/> for more information on how to use the repository for &slsa;, openSUSE and non-&slsa; hosts.</para>
  </section>
  <section xml:id="sec-bci-task-examples">
  <title>Common patterns</title>
  <para>Here are a few examples that can give you an idea how to accomplish certain tasks in a &bcia; compared to Debian.</para>
  <variablelist>
  <varlistentry>
  <term>Remove orphaned packages</term>
  <listitem>
  <itemizedlist>
  <listitem>
  <para>Debian: <literal>apt-get autoremove -y</literal></para>
  </listitem>
  <listitem>
  <para>&bcia;: Not required if you remove installed packages using the <literal>zypper --non-interactive remove --clean-deps
  PACKAGE_NAME</literal></para>
  </listitem>
  </itemizedlist>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term>Obtain container's architecture</term>
  <listitem>
  <itemizedlist>
  <listitem>
  <para>Debian: <literal>dpkgArch="$(dpkg --print-architecture | awk -F- '{
  print $NF }')"</literal></para>
  </listitem>
  <listitem>
  <para>&bcia;: <literal>arch="$(uname -p)"</literal></para>
  </listitem>
  </itemizedlist>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term>Install packages required for compilation</term>
  <listitem>
  <itemizedlist>
  <listitem>
  <para>Debian: <literal>apt-get install -y build-essential</literal></para>
  </listitem>
  <listitem>
  <para>&bcia;: <literal>zypper -n in gcc gcc-c++ make</literal></para>
  </listitem>
  </itemizedlist>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term>Verify GnuPG signatures</term>
  <listitem>
  <itemizedlist>
  <listitem>
  <para>Debian: <literal>gpg --batch --verify
  SIGNATURE_URL
  FILE_TO_VERIFY</literal></para>
  </listitem>
  <listitem>
  <para>&bcia;: <literal>zypper -n in dirmngr; gpg --batch --verify
  SIGNATURE_URL
  FILE_TO_VERIFY; zypper -n remove
  --clean-deps dirmngr; zypper -n clean</literal></para>
  </listitem>
  </itemizedlist>
  </listitem>
  </varlistentry>
  </variablelist>
  </section>
  <section xml:id="sec-bci-package-naming">
  <title>Package naming conventions</title>
  <para>&slea; package naming conventions differ from Debian, Ubuntu and Alpine, and they are closer to those of RHEL. The main difference is that development packages of libraries (that is, packages containing headers and build description files) are named <emphasis>PACKAGE-devel</emphasis> in &slea;, as opposed to <emphasis>PACKAGE-dev</emphasis> as they are in Debian and Ubuntu. When in doubt, search for the package directly using the following command: <literal>docker run --rm
      registry.suse.com/bci/bci-base:OS_VERSION zypper
      search PACKAGE_NAME</literal> (replace OS_VERSION with the appropriate service version number, for example: <literal>15.3</literal> or <literal>15.4</literal>).</para>
  </section>
  <section xml:id="sec-bci-gpg-keys">
  <title>Adding GPG signing keys</title>
  <para>Adding external repositories to a container or container image normally requires importing the GPG key used for signing the packages. This can be done with the <literal>rpm --import KEY_URL</literal> command. This adds the key to the RPM database, and all packages from the repository can be installed afterwards.</para>
  </section>
  </section>
  <section xml:id="sec-getting-started-bci">
  <title>Getting started with &bci;s</title>
  <para>The &bcia;s are available as OCI-compatible container images directly from <link xlink:href="https://registry.suse.com">registry.suse.com</link> and can be used like any other container image. For example, using one of the general purpose containers:</para>
  <screen>&gt; podman run --rm -it registry.suse.com/bci/bci-base:15.4 grep '^NAME' /etc/os-release
  NAME="{sles}"</screen>
  <para>Alternatively, you can use a &bcia; in <literal>Dockerfile</literal> as follows:</para>
  <screen>FROM registry.suse.com/bci/bci-base:15.4
  RUN zypper -n in python3 &amp;&amp; \
      echo "Hello Green World!" &gt; index.html
  ENTRYPOINT ["/usr/bin/python3", "-m", "http.server"]
  EXPOSE 8000</screen>
  <para>You can then build container images using the <literal>docker build .</literal> or <literal>buildah bud .</literal> commands:</para>
  <screen>&gt; docker build .
  Sending build context to Docker daemon  2.048kB
  Step 1/4 : FROM registry.suse.com/bci/bci-base:15.4
   ---&gt; e34487b4c4e1
  Step 2/4 : RUN zypper -n in python3 &amp;&amp;     echo "Hello Green World!" &gt; index.html
   ---&gt; Using cache
   ---&gt; 9b527dfa45e8
  Step 3/4 : ENTRYPOINT ["/usr/bin/python3", "-m", "http.server"]
   ---&gt; Using cache
   ---&gt; 953080e91e1e
  Step 4/4 : EXPOSE 8000
   ---&gt; Using cache
   ---&gt; 48b33ec590a6
  Successfully built 48b33ec590a6
  
  &gt; docker run -p 8000:8000 --rm -d 48b33ec590a6
  575ad7edf43e11c2c9474055f7f6b7a221078739fc8ce5765b0e34a0c899b46a
  
  &gt; curl localhost:8000
  Hello Green World!</screen>
</article>
