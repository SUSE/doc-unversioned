<?xml version="1.0"?>
<book xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="zh-cn" xml:id="book-container">
 <info>
  <title><citetitle>容器指南</citetitle></title>
  <productname><phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase></productname>
  <productnumber><phrase role="productnumber"><phrase os="sles;sled">15 SP4</phrase></phrase></productnumber><date>
<?dbtimestamp format="Y"?>
 年 <?dbtimestamp format="B" padding="0"?>
 月 <?dbtimestamp format="d" padding="0"?>
 日
</date>
  <legalnotice xml:base="common_copyright_gfdl.xml" version="5.0">
 <info>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
 </info>
 <para>
  版权所有 © 2006–<?dbtimestamp format="Y"?>


  SUSE LLC 和贡献者。保留所有权利。
 </para>
 <para>
  根据 GNU 自由文档许可 (GNU Free Documentation License) 版本 1.2 或（根据您的选择）版本 1.3 中的条款，在此授予您复制、分发和/或修改本文档的权限；本版权声明和许可附带不可变部分。许可版本 1.2 的副本包含在题为<quote>GNU Free Documentation License</quote>的部分。
 </para>
 <para>
  有关 SUSE 商标，请参见 <link xlink:href="https://www.suse.com/company/legal/"/>。所有其他第三方商标分别为相应所有者的财产。商标符号（®、™ 等）代表 SUSE 及其关联公司的商标。星号 (*) 代表第三方商标。
 </para>
 <para>
  本指南力求涵盖所有细节，但这不能确保本指南准确无误。SUSE LLC 及其关联公司、作者和译者对于可能出现的错误或由此造成的后果皆不承担责任。
 </para>
</legalnotice>
  <abstract>
   <para>
    本指南提供 SUSE 容器生态系统的简介。本文档仍在不断完善中。内容如有更改，恕不另行通知。
   </para>
  </abstract>
  <authorgroup xml:base="container_guide_authors.xml" version="5.0">
 <author><personname><firstname>Dmitri</firstname><surname>Popov</surname></personname>
 </author>
 <author><personname><firstname>Nora</firstname><surname>Kořánová</surname></personname> 
 </author>
</authorgroup>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
 </info>
 <preface xml:base="containers-intro.xml" version="5.0" xml:id="preface-container">
 <title>前言</title>
 <info>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker>
   </dm:bugtracker>
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
 </info>

 <sect1 xml:base="common_intro_target_audience_i.xml" version="5.0" xml:id="sec-deployment-background">
 <title>必需的经验</title>

 <info>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker/>
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
 </info>

 <para>
  为使这些准则的范围可以管理，本文做了以下技术假设：
 </para>

 <itemizedlist>
  <listitem>
   <para>
    您拥有一些计算机经验，熟悉常见的技术术语。
   </para>
  </listitem>
  <listitem>
   <para>
    您熟悉系统的文档和其运行的网络。
   </para>
  </listitem>
  <listitem>
   <para>
    您基本了解 Linux 系统。
   </para>
  </listitem>
 </itemizedlist>
</sect1>
 <sect1 xml:base="common_intro_available_doc_i.xml" version="5.0">
 <title>可用文档</title>

 <info>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker>
    
   </dm:bugtracker>
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
 </info>

 <variablelist>
  <varlistentry>
   <term>联机文档</term>
   <listitem>
    <para>
     <link os="sles" xlink:href="https://documentation.suse.com/#sles"/> 上提供了此产品的相关联机文档。您可浏览或下载各种格式的文档。
    </para>
    <para os="sles;sled">
     <link xlink:href="https://documentation.suse.com/"/> 上提供了其他产品的相关联机文档。
    </para>
    <note>
     <title>最新更新</title>
     <para>
      最新的文档更新通常会在文档的英文版中提供。
     </para>
    </note>
   </listitem>
  </varlistentry>
  <varlistentry os="sles;sled;slemicro">
   <term>发行说明</term>
   <listitem>
    <para>
     有关发行说明，请参见 <link xlink:href="https://www.suse.com/releasenotes/"/>。
    </para>
   </listitem>
  </varlistentry>
  <varlistentry os="sles;sled;osuse">
   <term>在您的系统中</term>
   <listitem>
    <para>
     要以脱机方式使用，请参见安装的系统中 <filename>/usr/share/doc</filename> 下的文档。许多命令的<emphasis>手册页</emphasis>中也对相应命令进行了详细说明。要查看手册页，请运行 <command>man</command> 后跟特定的命令名。如果系统上未安装 <command>man</command> 命令，请使用 <command>sudo zypper install man</command> 加以安装。
    </para>
   </listitem>
  </varlistentry>
 </variablelist>
</sect1>
 <sect1 xml:base="common_intro_feedback_i.xml" version="5.0">
 <title>改进文档</title>

 <info>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
 </info>

 <para>
  欢迎您提供针对本文档的反馈及改进建议。您可以通过以下渠道提供反馈：
 </para>

 <variablelist>
  <varlistentry os="sles;sled;slemicro">
   <term>服务请求和支持</term>
   <listitem>
    <para>
     有关产品可用的服务和支持选项，请参见 <link xlink:href="https://www.suse.com/support/"/>。
    </para>
    <para>
     要创建服务请求，需在 SUSE Customer Center 中注册订阅的 SUSE 产品。请转到 <link xlink:href="https://scc.suse.com/support/requests"/> 并登录，然后点击<guimenu>新建</guimenu>。
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>Bug 报告</term>
   <listitem>
    <para>
     在 <link os="sles;sled;slemicro" xlink:href="https://bugzilla.suse.com/"/> 中报告文档问题。要简化此过程，可以使用本文档 HTML 版本中的<guimenu>报告问题</guimenu>链接。将光标置于受影响的句子中，然后在右侧导航面板的<guimenu>提供反馈</guimenu>部分单击<guimenu>报告问题</guimenu>。这样会在 Bugzilla 中预先选择正确的产品和类别，并添加当前章节的链接。然后，您便可以立即开始键入 Bug 报告。需要一个 Bugzilla 帐户。
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>贡献</term>
   <listitem>
    <para>
     要帮助改进本文档，请使用本文档 HTML 版本中的 <guimenu>Edit source document</guimenu>（编辑源文档）链接。将光标置于受影响的句子中，然后在右侧导航面板的<guimenu>提供反馈</guimenu>部分单击 <guimenu>Edit source document</guimenu>（编辑源文档）。这样您将会转到 GitHub 上的源代码，可以在其中提出拉取请求。需要一个 GitHub 帐户。
    </para>
    <note>
     <title><guimenu>Edit source document</guimenu>（编辑源文档）仅适用于英语版本</title>
     <para>
      <guimenu>Edit source document</guimenu>（编辑源文档）链接仅适用于每个文档的英语版本。对于其他所有语言，请按上文所述使用<guimenu>报告问题</guimenu>链接。
     </para>
    </note>
    <para>
     有关本文档使用的文档环境的详细信息，请参见软件源的自述文件（网址：<link xlink:href="https://github.com/SUSE/doc-sle/blob/main/README.adoc"/>）

     
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>邮件</term>
   <listitem>
    <para>
     您也可以将有关本文档中的错误以及相关反馈发送至：<email>doc-team@suse.com</email>。请在其中包含文档标题、产品版本和文档发布日期。此外，请包含相关的章节号和标题（或者提供 URL），并提供问题的简要说明。
    </para>
   </listitem>
  </varlistentry>
  
 </variablelist>
</sect1>
 <sect1 xml:base="common_intro_typografie_i.xml" version="5.0">
 

 <title>文档约定</title>

 <info>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
 </info>

 <para>
  本文档中使用了以下通知和排版约定：
 </para>

 <itemizedlist>
  <listitem>
   <para>
    <filename>/etc/passwd</filename>：目录名称和文件名
   </para>
  </listitem>
  <listitem>
   <para>
    <replaceable>PLACEHOLDER</replaceable>：<replaceable>PLACEHOLDER</replaceable> 将会替换为实际的值
   </para>
  </listitem>
  <listitem>
   <para>
    <envar>PATH</envar>：环境变量 PATH
   </para>
  </listitem>
  <listitem>
   <para>
    <command>ls</command>、<option>--help</option>：命令、选项和参数
   </para>
  </listitem>
  <listitem>
   <para>
    <systemitem class="username">user</systemitem>：用户或组
   </para>
  </listitem>
  <listitem>
   <para>
    <package>package name</package>：软件包的名称
   </para>
  </listitem>
  <listitem>
   <para>
    <keycap function="alt"/>、<keycombo> <keycap function="alt"/>
    <keycap>F1</keycap> </keycombo>：按键或组合键；这些键以大写形式显示，如在键盘上一样
   </para>
  </listitem>
  <listitem>
   <para>
    <guimenu>文件</guimenu>、<menuchoice> <guimenu> 文件</guimenu> <guimenu> 另存为</guimenu> </menuchoice>：菜单项，按钮
   </para>
  </listitem>
  <listitem os="sles;slemicro">
   <para arch="x86_64">
    本段内容仅与 AMD64/Intel 64 体系结构相关。箭头标记文本块的开始位置和结束位置。
   </para>
   <para arch="zseries;power">
    本段内容仅与 <literal>IBM Z</literal> 和 <literal>POWER</literal> 体系结构相关。箭头标记文本块的开始位置和结束位置。
   </para>
  </listitem>
  <listitem>
   <para>
    <emphasis>跳舞的企鹅</emphasis>（<emphasis>企鹅</emphasis>一章，↑其他手册）：此内容参见自其他手册中的一章。
   </para>
  </listitem>
  <listitem>
   <para>
    必须使用 <systemitem class="username">root</systemitem> 特权运行的命令。您往往还可以在这些命令前加上 <command>sudo</command> 命令，以非特权用户身份来运行它们。
   </para>
<screen><prompt role="root"># </prompt><command>command</command>
<prompt>&gt; </prompt><command>sudo</command> <command>command</command></screen>
  </listitem>
  <listitem>
   <para>
    可以由非特权用户运行的命令。
   </para>
<screen><prompt>&gt; </prompt><command>command</command></screen>
  </listitem>
  <listitem>
   <para>
    注意
   </para>
   <warning>
    <title>警报通知</title>
    <para>
     在继续操作之前，您必须了解的不可或缺的信息。向您指出有关安全问题、潜在数据丢失、硬件损害或物理危害的警告。
    </para>
   </warning>
   <important>
    <title>重要通知</title>
    <para>
     在继续操作之前，您必须了解的重要信息。
    </para>
   </important>
   <note>
    <title>注意通知</title>
    <para>
     额外信息，例如有关软件版本差异的信息。
    </para>
   </note>
   <tip>
    <title>提示通知</title>
    <para>
     有用信息，例如指导方针或实用性建议。
    </para>
   </tip>
  </listitem>
 </itemizedlist>
</sect1>
</preface>
 <chapter xml:base="containers-basics.xml" version="5.0" xml:id="cha-containers-basics">
 <title>Linux 容器简介</title>
 <info>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker/>
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
 </info>
 <para>
  使用 Linux 内核的名称空间和内核控制组功能，可将容器与主机系统的其余组件和其他容器隔离开来。Linux 容器提供了轻量级虚拟化方法，可在单台主机上同时运行多个隔离环境。与 Xen 和 KVM 通过虚拟化层执行完整的 Guest 操作系统不同，Linux 容器共享并直接使用主机操作系统内核。与通用虚拟机环境相比，这可以减少访问操作系统资源所需的开销，并提供更好的整体性能。
 </para>
 <itemizedlist mark="bullet" spacing="normal">
  <title>使用容器的优势</title>
  <listitem>
   <para>
    使用容器可将应用程序隔离在自给性单元中。
   </para>
  </listitem>
  <listitem>
   <para>
    容器提供接近本机的性能，因为与虚拟化和仿真相比，其内核开销更低。
   </para>
  </listitem>
  <listitem>
   <para>
    可以通过内核控制组 (cgroup) 控制网络接口并在容器内部应用资源。
   </para>
  </listitem>
  <listitem>
   <para>
    可以实现可移植性并简化应用程序开发，因为容器包含所有必要的库、依赖项和所需文件。
   </para>
  </listitem>
 </itemizedlist>
 <itemizedlist mark="bullet" spacing="normal">
  <title>容器的限制</title>
  <listitem>
   <para>
    容器在主机系统的内核上运行，因此容器必须使用主机提供的特定内核版本。
   </para>
  </listitem>
  <listitem>
   <para>
    只有基于 Linux 的应用程序才可容器化。
   </para>
  </listitem>
  <listitem>
   <para>
    容器封装特定体系结构（例如 x86_64 或 aarch64）的二进制文件。因此，为 x86_64 制作的容器只能在 x86_64 系统主机上运行。
   </para>
  </listitem>
  <listitem>
   <para>
    容器本身并不比在容器外部执行二进制文件更安全，容器的整体安全性取决于主机系统。虽然可以通过 <phrase>AppArmor</phrase> 或 SELinux 配置文件来保护容器化应用程序，但容器安全性需要部署工具和策略来确保容器基础结构和应用程序的安全性。
   </para>
  </listitem>
 </itemizedlist>
 <sect1 xml:id="sec-concepts-workflow">
  <title>Podman 的重要概念和简介</title>

  <para>
   尽管 Docker 开源引擎是用于处理映像和容器的流行解决方案，但具备诸多优势的 Podman 可以直接取代 Docker。有关 Podman 的详细信息，请参见<xref linkend="cha-podman-overview" role="internalbook"/>。本章将会简要介绍重要概念，以及创建容器映像并使用它来运行容器的基本过程。
  </para>

  <para>
   基本的 Podman 工作流程如下：
  </para>

  <informalfigure>
   <mediaobject>
    <imageobject role="fo">
     <imagedata fileref="container-workflow.png" width="80%"/>
    </imageobject>
    <imageobject role="html">
     <imagedata fileref="container-workflow.png" width="100%"/>
    </imageobject>
   </mediaobject>
  </informalfigure>

  <para>
   在本地计算机或云服务中运行容器通常涉及以下步骤：
  </para>

  <orderedlist>
   <listitem>
    <para>
     提取基本映像，方法是将其从注册表中提取到本地计算机。
    </para>
   </listitem>
   <listitem>
    <para>
     创建一个 Dockerfile，并使用它来基于基本映像构建一个自定义映像。
    </para>
   </listitem>
   <listitem>
    <para>
     使用创建的映像启动一个或多个容器。
    </para>
   </listitem>
  </orderedlist>

  <para>
   要运行容器，需要有一个映像。映像包含运行应用程序所需的全部依赖项。例如，SLE 基本映像包含选择了极少量软件包的 SLE 发行套件。
  </para>

  <para>
   尽管可以从头开始创建映像，但很少有应用程序能够在这种空环境中正常运行。因此，在大多数情况下，使用现有的基本映像更为可行。基本映像没有父项，也就是说，它不以其他映像为基础。
  </para>

  <para>
   尽管您可以使用基本映像来运行容器，但基本映像的主要用途是充当创建自定义映像的基础，自定义映像可以运行包含特定应用程序、服务器、服务等的容器。
  </para>

  <para>
   基本映像和自定义映像通常都可以通过称作“注册表”的映像软件源获得。除非显式指定了注册表，否则 Podman 将从 Docker Hub 注册表中提取映像。尽管您可以手动提取基本映像，但 Podman 可以在构建自定义映像时自动提取基本映像。
  </para>

  <para>
   要构建自定义映像，需要创建一个名为 Containerfile 或 Dockerfile 的特殊文件，其中包含构建指令。例如，Dockerfile 可以包含用于更新系统软件、安装所需应用程序、打开特定网络端口、运行命令等的指令
  </para>

  <para>
   您不仅可以基于基本映像构建映像，而且可以基于自定义映像构建映像。因此您可以构建由多个层组成的映像：
  </para>

  <informalfigure>
   <mediaobject>
    <imageobject role="fo">
     <imagedata fileref="container-image-layers.png" width="50%"/>
    </imageobject>
    <imageobject role="html">
     <imagedata fileref="container-image-layers.png" width="100%"/>
    </imageobject>
   </mediaobject>
  </informalfigure>

  <sect2 xml:id="sec-container-example">
   <title>实际示例</title>
   <para>
    以下过程说明如何构建一个可用于运行容器的自定义 Docker 映像，该容器包含通过内置 PHP 开发服务器提供服务的简单 PHP 应用程序 <literal>example</literal>。
   </para>
   <procedure>
    <title>构建映像并运行容器</title>
    <step>
     <para>
      安装 Podman：
     </para>
<screen><prompt>&gt; </prompt><command>sudo</command> zypper in podman</screen>
    </step>
    <step>
     <para>
      切换到 PHP 项目所在的目录，并创建一个名为 <filename>Dockerfile</filename> 的文件：
     </para>
<screen><prompt>&gt; </prompt>cd example
<prompt>&gt; </prompt>touch Dockerfile</screen>
    </step>
    <step>
     <para>
      打开 <filename>Dockerfile</filename> 文件进行编辑，在其中添加以下代码：
     </para>
<screen>
FROM php:7.4-cli
COPY . /usr/src/example
WORKDIR /usr/src/example
EXPOSE 8000
CMD [ "php", "-S", "0.0.0.0:8000" ]</screen>
    </step>
    <step>
     <para>
      构建容器映像：
     </para>
<screen><prompt>&gt; </prompt><command>sudo</command> podman build -t example .</screen>
    </step>
    <step>
     <para>
      运行容器：
     </para>
<screen><prompt>&gt; </prompt><command>sudo</command> podman run -it -p 8000:8000 --rm example</screen>
    </step>
    <step>
     <para>
      将浏览器指向 <literal>localhost:8000</literal> 以访问容器中运行的应用程序。
     </para>
    </step>
   </procedure>
   <para>
    请注意，SUSE 不为第三方映像（例如本示例中使用的映像）提供支持。
   </para>
  </sect2>
 </sect1>
</chapter>
 <chapter xml:base="containers-bci.xml" xml:id="cha-bci" xml:lang="zh-cn" version="5.0">
 <info>
  <title>SLE 基本容器映像</title>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
 </info>
 <sect1 xml:id="sec-bci-intro">
  <title>SLE 基本容器映像简介</title>

  <para>
   SLE 基本容器映像 (SLE BCI) 是基于 SUSE Linux Enterprise Server 15 的精简映像，可用于开发、部署和共享应用程序。SLE BCI 有两种类型：
  </para>

  <itemizedlist>
   <listitem>
    <para>
     通用 SLE BCI 可用于构建自定义容器映像和部署应用程序。
    </para>
   </listitem>
   <listitem>
    <para>
     语言堆栈 SLE BCI 为以特定编程语言开发应用程序和部署这些应用程序提供精简的环境。
    </para>
   </listitem>
  </itemizedlist>

  <para>
   除此之外，我们还提供基于 SLE BCI 的应用程序容器镜像，其中包含 Nginx、PostgreSQL、MariaDB 和 <link xlink:href="https://github.com/SUSE/rmt">RMT</link> 等流行的容器化应用程序。
  </para>

  <sect2 xml:id="sec-bci-highlihts">
   <title>高亮显示数</title>
   <itemizedlist>
    <listitem>
     <para>
      SLE BCI 与 SUSE Linux Enterprise Server 完全兼容，但<emphasis>无需订阅即可运行和分发</emphasis>。
     </para>
    </listitem>
    <listitem>
     <para>
      当主机操作系统以 FIPS 模式运行时，SLE BCI 会自动以 FIPS 兼容模式运行。
     </para>
    </listitem>
    <listitem>
     <para>
      每个 SLE BCI 都包含 RPM 数据库，因此可以审计容器映像的内容。您可以使用 RPM 数据库来确定任意给定文件所属的 RPM 软件包的特定版本。这可以确保容器映像不容易受到已知漏洞和已修复漏洞的影响。
     </para>
    </listitem>
    <listitem>
     <para>
      所有 SLE BCI（不包含 <systemitem>zypper</systemitem> 的 SLE BCI 除外）都附带 <systemitem>container-suseconnect</systemitem> 服务。因此，在已注册的 SLES 主机上运行的容器可以访问完整的 SLES 软件源。当您首次运行 <systemitem>zypper</systemitem> 时会自动调用 <systemitem>container-suseconnect</systemitem>，该服务会将正确的 SLES 软件源添加到正在运行的容器中。在未注册的 SLES 主机或非 SLES 主机上，该服务不执行任何操作。
     </para>
    </listitem>
   </itemizedlist>
  </sect2>

  <sect2 xml:id="sec-general-purpose-bci">
   <title>通用 SLE BCI</title>
   <para>
    有四个通用 SLE BCI，其中每个容器映像附带最少量的一组软件包，以保持较小的大小。可将通用 SLE BCI 用作构建自定义容器映像的起点，或用作部署特定软件的平台。有关通用 SLE BCI 的详细信息，请参见<xref linkend="sec-bci-variants" role="internalbook"/>。
   </para>
  </sect2>

  <sect2 xml:id="language-stack-bci">
   <title>语言堆栈 SLE BCI</title>
   <para>
    语言堆栈 SLE BCI 构建在 BCI-Base 通用 SLE BCI 的基础之上。每个容器映像附带 <systemitem>zypper</systemitem> 堆栈和免费的 <literal>SLE_BCI</literal> 软件源。此外，每个映像包含用于在特定语言环境中构建和部署应用程序的最常用工具。这包括编译器或解释器等工具，以及特定于语言的软件包管理器。有关语言堆栈 SLE BCI 的详细信息，请参见<xref linkend="sec-language-stack-bci" role="internalbook"/>。
   </para>
  </sect2>

  <sect2 xml:id="status-lifecycle-bci">
   <title>有关状态和生命周期的重要说明</title>
   <para>
    除基本映像以外的其他所有容器映像目前都分类为技术预览，SUSE 不为它们提供官方支持。此信息会在 <link xlink:href="https://registry.suse.com">registry.suse.com</link> 网站上显示。此外，还会通过 <literal>com.suse.supportlevel</literal> 标签来指示某个容器映像是否仍处于技术预览状态。可以使用 skopeo 和 jq 实用程序检查所需 SLE BCI 的状态，如下所示：
   </para>
<screen>❯ skopeo inspect docker://registry.suse.com/bci/bci-micro:15.4 | jq '.Labels["com.suse.supportlevel"]'
"techpreview"

❯ skopeo inspect docker://registry.suse.com/bci/bci-base:15.4 | jq '.Labels["com.suse.supportlevel"]'
"l3"
</screen>
   <para>
    在上面的示例中，<literal>bci-micro</literal> 容器映像中的 <literal>com.suse.supportlevel</literal> 标签设置为 <literal>techpreview</literal>，表示该映像仍处于技术预览状态。另一方面，<literal>bci-base</literal> 容器映像完全支持 l3。与通用 SLE BCI 不同，语言堆栈 SLE BCI 可能不遵循 SLE 分发包的生命周期：只要相应的语言堆栈能够获得支持，语言堆栈 SLE BCI 就受支持。换言之，新版本的 SLE BCI（由 OCI 标记表示）可能会在 SLE Service Pack 的生命周期内发布，而旧版本可能不受支持。请访问 <link xlink:href="https://suse.com/lifecycle">suse.com/lifecycle</link> 确定相关容器是否仍受支持。
   </para>
  </sect2>

  <sect2 xml:id="getting-started-bci">
   <title>入门</title>
   <para>
    可以直接从 <link xlink:href="https://registry.suse.com">registry.suse.com</link> 以 OCI 兼容容器映像的形式获取 SLE BCI，并可以像使用任何其他容器映像一样使用它们。例如，使用某个通用容器：
   </para>
<screen><prompt>&gt; </prompt>podman run --rm -it registry.suse.com/bci/bci-base:15.4 grep '^NAME' /etc/os-release
NAME="SLES"</screen>
   <para>
    或者，可以如下所示在 Dockerfile 中使用 SLE BCI：
   </para>
<screen>FROM registry.suse.com/bci/bci-base:15.4
RUN zypper -n in python3 &amp;&amp; \
    echo "Hello Green World!" &gt; index.html
ENTRYPOINT ["/usr/bin/python3", "-m", "http.server"]
EXPOSE 8000</screen>
   <para>
    然后可以构建容器映像，方法是使用 <command>docker build .</command> 或 <command>buildah bud .</command> 命令：
   </para>
<screen><prompt>&gt; </prompt>docker build .
Sending build context to Docker daemon  2.048kB
Step 1/4 : FROM registry.suse.com/bci/bci-base:15.4
 ---&gt; e34487b4c4e1
Step 2/4 : RUN zypper -n in python3 &amp;&amp;     echo "Hello Green World!" &gt; index.html
 ---&gt; Using cache
 ---&gt; 9b527dfa45e8
Step 3/4 : ENTRYPOINT ["/usr/bin/python3", "-m", "http.server"]
 ---&gt; Using cache
 ---&gt; 953080e91e1e
Step 4/4 : EXPOSE 8000
 ---&gt; Using cache
 ---&gt; 48b33ec590a6
Successfully built 48b33ec590a6
 
<prompt>&gt; </prompt>docker run -p 8000:8000 --rm -d 48b33ec590a6
575ad7edf43e11c2c9474055f7f6b7a221078739fc8ce5765b0e34a0c899b46a
 
<prompt>&gt; </prompt>curl localhost:8000
Hello Green World!</screen>
  </sect2>
 </sect1>
 <sect1 xml:id="sec-bci-why">
  <title>为何使用选择 SLE 基本容器映像</title>

  <para>
   SLE BCI 提供一个平台用于创建基于 SLE 的自定义容器映像和可任意分发的容器化应用程序。SLE BCI 具有与 SLES 相同的可预测企业生命周期。SLE_BCI 15 SP3 和 SP4 软件源（SLE 软件源的子集）使 SLE BCI 能够访问 4,000 个适用于 AMD64/Intel 64、AArch64、ppc64le 和 s390x 体系结构的软件包。软件源中的软件包享有 SUSE 的质量保证并接受其安全审计。以 FIPS 模式在主机上运行时，容器映像符合 FIPS 规范。除此之外，SUSE 还可以通过 SUSE 订阅计划为 SLE BCI 提供官方支持。
  </para>

  <variablelist>
   <varlistentry>
    <term>安全性</term>
    <listitem>
     <para>
      SLE_BCI 软件源中的每个软件包都接受安全审计，SLE BCI 受益于与 SLES 相同的 CVE 处理机制。所有发现和修复的漏洞将通过电子邮件、专门的 <link xlink:href="https://www.suse.com/security/cve/">CVE 页面</link>以 OVAL 和 CVRF 数据的形式公布。为确保供应链的安全，所有容器映像均已使用 Notary v1、Podman 的 GPG 签名和 Sigstore Cosign 进行签名。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>可靠性</term>
    <listitem>
     <para>
      由于 SLE BCI 基于 SLE，因此它们的稳定性和质量保证级别与 SUSE Linux Enterprise Server 相同。类似于 SLES，SLE BCI 可以通过维护更新来获得 bug 修复、改进和安全补丁。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>工具和集成</term>
    <listitem>
     <para>
      SLE BCI 旨在为 hub.docker.com 上的流行容器映像提供直接替代项。您可以使用通用 SLE BCI 及其提供的现成工具来创建自定义容器映像，而语言堆栈 SLE BCI 为构建容器化应用程序提供基础和所需的工具。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>重新分发</term>
    <listitem>
     <para>
      BCI 的 <link xlink:href="https://www.suse.com/de-de/licensing/eula/#bci">EULA</link> 规定较为宽松，您可以基于 BCI 重新分发自定义容器映像。
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect1>
 <sect1 xml:id="sec-bci-variants">
  <title>BCI-Base、BCI-Minimal、BCI-Micro 和 BCI-BusyBox</title>

  <para>
   SUSE 提供多个通用 SLE 基本容器映像，这些映像可用作部署目标或用作创建自定义映像的基础：BCI-Base、BCI-Minimal、BCI-Micro 和 BCI-BusyBox。这些映像采用通用的 SLES 基础，并且它们都不随附特定的语言或应用程序堆栈。所有映像具有 RPM 数据库（即使特定的映像不包含 RPM 软件包管理器），该数据库可用于校验映像中每个文件的来源。每个映像包含 SLES 证书分发包，已部署的应用程序可以通过该分发包使用系统的证书来校验 TLS 连接。
  </para>

  <sect2 xml:id="bci-variants-table">
   <title>快速概览</title>
   <para>
    下表提供了 BCI-Base、BCI-Minimal、BCI-Micro 和 BCI-BusyBox 之间的差异的快速概览。
   </para>
   <informalfigure>
    <mediaobject>
     <imageobject role="fo">
      <imagedata fileref="bci-variants.png" width="80%"/>
     </imageobject>
     <imageobject role="html">
      <imagedata fileref="bci-variants.png" width="100%"/>
     </imageobject>
    </mediaobject>
   </informalfigure>
  </sect2>

  <sect2 xml:id="bci-variants-base">
   <title>BCI-Base 和 BCI-Init：需要灵活性时</title>
   <para>
    此 SLE BCI 附带 Zypper 软件包管理器和一个免费的 SLE-BCI 软件源。这样，您便可以安装软件源中提供的软件并在构建期间自定义映像。该映像的缺点在于其大小。它是最大的通用 SLE BCI，因此它不一定是最佳的部署映像选项。
   </para>
   <para>
    名为 BCI-Init 的 BCI-Base 变体中预安装了 systemd。在需要通过 systemd 在单个容器中管理服务的方案中，BCI-Init 容器映像可能很有用。
   </para>
  </sect2>

  <sect2 xml:id="bci-variants-minimal">
   <title>BCI-Minimal：不需要 Zypper 时</title>
   <para>
    这是 BCI-Base 映像的精简版本。BCI-Minimal 不包含 Zypper，不过其中安装了 RPM 软件包管理器。这样就大幅减小了该映像的大小。但是，虽然 RPM 可以安装和去除软件包，但它缺乏对软件源和自动依赖项解析的支持。因此，BCI-Minimal 映像旨在用于创建部署容器，然后在容器中安装所需的 RPM 软件包。尽管您可以安装所需的依赖项，但需要手动下载和解析这些依赖项。不过，不建议采用这种方法，因为它很容易出错。
   </para>
  </sect2>

  <sect2 xml:id="bci-variants-micro">
   <title>BCI-Micro：需要部署静态二进制文件时</title>
   <para>
    此映像类似于 BCI-Minimal，但不包含 RPM 软件包管理器。该映像的主要用例是部署在外部生成的或者在多阶段构建期间生成的静态二进制文件。由于没有直截了当的方法可以在容器映像中安装其他依赖项，因此我们建议仅在最终构建工件捆绑了所有依赖项并且不存在外部运行时要求（例如 Python 或 Ruby）时，才使用 BCI-Minimal 映像来部署项目。
   </para>
  </sect2>

  <sect2 xml:id="bci-variants-busybox">
   <title>BCI-BusyBox：需要最小的映像且无需 GPLv3 授权时</title>
   <para>
    类似于 BCI-Micro，BCI-BusyBox 映像仅附带最基本的工具。但是，这些工具是由 BusyBox 项目提供的。其好处是可以进一步减小大小。此外，该映像不包含 GPLv3 授权的软件。使用该映像时，请记住 BusyBox 工具和 GNU Coreutils 之间存在一些差异。因此，针对使用 GNU Coreutils 的系统编写的脚本可能需要经过修改才可用于 BusyBox。
   </para>
  </sect2>

  <sect2 xml:id="bci-variants-size">
   <title>大致大小</title>
   <para>
    以下列表提供了每个 SLE BCI 的大致大小供您参考。请记住，提供的数字是粗略估计值。
   </para>
   <itemizedlist>
    <listitem>
     <para>
      <literal>BCI-Base</literal> ~94 MB
     </para>
    </listitem>
    <listitem>
     <para>
      <literal>BCI-Minimal</literal> ~42 MB
     </para>
    </listitem>
    <listitem>
     <para>
      <literal>BCI-Micro</literal> ~26 MB
     </para>
    </listitem>
    <listitem>
     <para>
      <literal>BCI-BusyBox</literal> ~14 MB
     </para>
    </listitem>
   </itemizedlist>
  </sect2>
 </sect1>
 <sect1 xml:id="sec-language-stack-bci">
  <title>语言堆栈 SLE 基本容器映像</title>

  <para>
   如果您在容器方面有一定的实践知识，那么使用 SLE BCI 就不会有任何难度。但是，SLE BCI 有一些与类似产品（例如基于 Debian 或 Alpine Linux 的映像）不同的特性。了解细节有助于在尽可能短的时间内发挥 SLE BCI 的最大作用。
  </para>

  <sect2 xml:id="environment-bci-language-stack">
   <title>语言堆栈 SLE BCI</title>
   <para>
    语言堆栈 SLE BCI 构建在 BCI-Base 的基础之上。下面是可用语言堆栈 SLE BCI 的概览。
   </para>
   <variablelist>
    <varlistentry>
     <term>python</term>
     <listitem>
      <itemizedlist>
       <listitem>
        <para>
         URL：<link xlink:href="registry.suse.com/bci/python">registry.suse.com/bci/python</link>
        </para>
       </listitem>
       <listitem>
        <para>
         标记：3.6、3.9、3.10
        </para>
       </listitem>
       <listitem>
        <para>
         随附标记中指定的 <package>python3</package> 版本和 <package>pip3</package>、<package>curl</package>、<package>git</package> 工具。
        </para>
       </listitem>
      </itemizedlist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>节点</term>
     <listitem>
      <itemizedlist>
       <listitem>
        <para>
         URL：<link xlink:href="registry.suse.com/bci/node">registry.suse.com/bci/node</link>
        </para>
       </listitem>
       <listitem>
        <para>
         标记：12、14、16
        </para>
       </listitem>
       <listitem>
        <para>
         随附标记中指定的 <package>nodejs</package> 版本，以及 <package>npm</package> 和 <package>git</package>。可以使用 <command>npm install -g yarn</command> 命令安装 <package>yarn</package> 软件包管理器。
        </para>
       </listitem>
      </itemizedlist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>openjdk</term>
     <listitem>
      <itemizedlist>
       <listitem>
        <para>
         URL：<link xlink:href="registry.suse.com/bci/openjdk">registry.suse.com/bci/openjdk</link>
        </para>
       </listitem>
       <listitem>
        <para>
         标记：11、17
        </para>
       </listitem>
       <listitem>
        <para>
         随附 OpenJDK 运行时。旨在用于部署 Java 应用程序。
        </para>
       </listitem>
      </itemizedlist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>openjdk-devel</term>
     <listitem>
      <itemizedlist>
       <listitem>
        <para>
         URL：<link xlink:href="registry.suse.com/bci/openjdk-devel">registry.suse.com/bci/openjdk-devel</link>
        </para>
       </listitem>
       <listitem>
        <para>
         标记：11、17
        </para>
       </listitem>
       <listitem>
        <para>
         除了 OpenJDK 运行时之外，还包括 OpenJDK 的开发部分。默认入口点是 <systemitem>jshell</systemitem> 外壳，而不是 Bash。
        </para>
       </listitem>
      </itemizedlist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>ruby</term>
     <listitem>
      <itemizedlist>
       <listitem>
        <para>
         URL：<link xlink:href="registry.suse.com/bci/ruby">registry.suse.com/bci/ruby</link>
        </para>
       </listitem>
       <listitem>
        <para>
         标记：2.5
        </para>
       </listitem>
       <listitem>
        <para>
         基于 Ruby 2.5 的标准开发环境，包含 <package>ruby</package>、<package>gem</package> 和 <package>bundler</package>，以及 <package>git</package> 和 <package>curl</package>。
        </para>
       </listitem>
      </itemizedlist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>golang</term>
     <listitem>
      <itemizedlist>
       <listitem>
        <para>
         URL：<link xlink:href="registry.suse.com/bci/golang">registry.suse.com/bci/golang</link>
        </para>
       </listitem>
       <listitem>
        <para>
         标记：1.16、1.17、1.18
        </para>
       </listitem>
       <listitem>
        <para>
         随附标记中指定的 <package>go</package> 编译器版本。
        </para>
       </listitem>
      </itemizedlist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>dotnet-runtime</term>
     <listitem>
      <itemizedlist>
       <listitem>
        <para>
         URL：<link xlink:href="registry.suse.com/bci/dotnet-runtime">registry.suse.com/bci/dotnet-runtime</link>
        </para>
       </listitem>
       <listitem>
        <para>
         标记：3.1、5.0、6.0
        </para>
       </listitem>
       <listitem>
        <para>
         包括 Microsoft 的 .NET 运行时和 Microsoft .NET 软件源。
        </para>
       </listitem>
      </itemizedlist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>dotnet-aspnet</term>
     <listitem>
      <itemizedlist>
       <listitem>
        <para>
         URL：<link xlink:href="registry.suse.com/bci/dotnet-aspnet">registry.suse.com/bci/dotnet-aspnet</link>
        </para>
       </listitem>
       <listitem>
        <para>
         标记：3.1、5.0、6.0
        </para>
       </listitem>
       <listitem>
        <para>
         随附 Microsoft 的 ASP.NET 运行时和 Microsoft .NET 软件源。
        </para>
       </listitem>
      </itemizedlist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>dotnet-sdk</term>
     <listitem>
      <itemizedlist>
       <listitem>
        <para>
         URL：<link xlink:href="registry.suse.com/suse/dotnet-sdk">registry.suse.com/suse/dotnet-sdk</link>
        </para>
       </listitem>
       <listitem>
        <para>
         标记：3.1、5.0、6.0
        </para>
       </listitem>
       <listitem>
        <para>
         随附 Microsoft 的 .NET 和 ASP.NET SDK，以及 Microsoft .NET 软件源。
        </para>
       </listitem>
      </itemizedlist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>rust</term>
     <listitem>
      <itemizedlist>
       <listitem>
        <para>
         URL：<link xlink:href="registry.suse.com/bci/rust">registry.suse.com/bci/rust</link>
        </para>
       </listitem>
       <listitem>
        <para>
         标记：1.56、1.57、1.58、1.59
        </para>
       </listitem>
       <listitem>
        <para>
         随附 Rust 编译器和 <package>cargo</package> 软件包管理器。
        </para>
       </listitem>
      </itemizedlist>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>

  <sect2 xml:id="bci-package-manager">
   <title>软件包管理器</title>
   <para>
    SUSE Linux Enterprise 中的默认软件包管理器是 Zypper。与 Debian 中的 APT 和 Alpine Linux 中的 APK 类似，Zypper 为所有软件包管理任务提供一个命令行界面。下面是常用的容器相关 Zypper 命令的简要概览。
   </para>
   <variablelist>
    <varlistentry>
     <term>安装包</term>
     <listitem>
      <para>
       <command>zypper --non-interactive install <replaceable>软件包名称</replaceable></command>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>添加软件源</term>
     <listitem>
      <para>
       <command>zypper --non-interactive addrepo <replaceable>软件源 URL</replaceable>;</command> <command>zypper --non-interactive refresh</command>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>更新所有软件包</term>
     <listitem>
      <para>
       <command>zypper --non-interactive update</command>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>去除软件包</term>
     <listitem>
      <para>
       <command>zypper --non-interactive remove --clean-deps <replaceable>软件包名称</replaceable></command>（<option>--clean-deps</option> 标志确保同时去除不再需要的依赖项）
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>清理临时文件</term>
     <listitem>
      <para>
       <command>zypper clean</command>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
   <para>
    有关使用 Zypper 的详细信息，请参见 <link xlink:href="https://documentation.suse.com/sles-15/html/SLES-all/cha-sw-cl.html#sec-zypper"/>。
   </para>
   <para>
    所述的所有命令都使用 <option>--non-interactive</option> 标志来跳过确认，因为在容器构建期间您无法手动同意这些提示。请记住，必须将该标志与任何修改系统的命令一起使用。另请注意，<option>--non-interactive</option> 不是一个“全部为是”标志。<option>--non-interactive</option> 确认用户的意图。例如，如果某个附带 <option>--non-interactive</option> 选项的安装命令需要导入新的软件源签名密钥，则该命令将会失败，因为该操作应该由用户自己来校验。
   </para>
  </sect2>

  <sect2 xml:id="bci-task-examples">
   <title>常用软件集</title>
   <para>
    下面几个示例可让您大致了解如何在 SLE BCI 中以不同于 Debian 的方式完成某些任务。
   </para>
   <variablelist>
    <varlistentry>
     <term>去除孤立的软件包</term>
     <listitem>
      <itemizedlist>
       <listitem>
        <para>
         Debian：<command>apt-get autoremove -y</command>
        </para>
       </listitem>
       <listitem>
        <para>
         SLE BCI：只要您使用 <command>zypper --non-interactive remove --clean-deps <replaceable>软件包名称</replaceable></command> 去除已安装的软件包，就不需要去除孤立的软件包
        </para>
       </listitem>
      </itemizedlist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>获取容器的体系结构</term>
     <listitem>
      <itemizedlist>
       <listitem>
        <para>
         Debian：<command>dpkgArch="$(dpkg --print-architecture | awk -F- '{ print $NF }')"</command>
        </para>
       </listitem>
       <listitem>
        <para>
         SLE BCI：<command>arch="$(uname -p|sed 's/x86_64/amd64/')"</command>
        </para>
       </listitem>
      </itemizedlist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>安装编译所需的软件包</term>
     <listitem>
      <itemizedlist>
       <listitem>
        <para>
         Debian：<command>apt-get install -y build-essential</command>
        </para>
       </listitem>
       <listitem>
        <para>
         SLE BCI：<command>zypper -n in gcc gcc-c++ make</command>
        </para>
       </listitem>
      </itemizedlist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>校验 GnuPG 签名</term>
     <listitem>
      <itemizedlist>
       <listitem>
        <para>
         Debian：<command>gpg --batch --verify <replaceable>签名 URL</replaceable>
         <replaceable>要校验的文件</replaceable></command>
        </para>
       </listitem>
       <listitem>
        <para>
         SLE BCI：<command>zypper -n in dirmngr; gpg --batch --verify <replaceable>签名 URL</replaceable>
         <replaceable>要校验的文件</replaceable>; zypper -n remove --clean-deps dirmngr; zypper -n clean</command>
        </para>
       </listitem>
      </itemizedlist>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>

  <sect2 xml:id="bci-package-naming">
   <title>软件包命名约定</title>
   <para>
    SUSE Linux Enterprise 软件包命名约定不同于 Debian、Ubuntu 和 Alpine，而是更类似于 Red Hat Enterprise Linux。主要差别在于库的开发软件包（即包含报头和构建描述文件的软件包）在 SUSE Linux Enterprise 中命名为 <package><replaceable>PACKAGE</replaceable>-devel</package>，而在 Debian 和 Ubuntu 中则是命名为 <package><replaceable>PACKAGE</replaceable>-dev</package>。如有疑问，请直接使用以下命令搜索软件包：<command>docker run --rm registry.suse.com/bci/bci-base:<replaceable>OS_VERSION</replaceable> zypper search <replaceable>软件包名称</replaceable></command>（请将 <replaceable>OS_VERSION</replaceable> 替换为相应的服务版本号，例如：<literal>15.3</literal> 或 <literal>15.4</literal>)。
   </para>
   <para/>
  </sect2>

  <sect2 xml:id="bci-gpg-keys">
   <title>添加 GPG 签名密钥</title>
   <para>
    将外部软件源添加到容器或容器映像通常需要导入用于对软件包进行签名的 GPG 密钥。可以使用 <command>rpm --import <replaceable>密钥 URL</replaceable></command> 命令来执行导入操作。这会将密钥添加到 RPM 数据库，然后可以安装软件源中的所有软件包。
   </para>
  </sect2>
 </sect1>
</chapter>
 <chapter xml:base="containers-build-tools.xml" version="5.0" xml:id="cha-containers-build" xml:lang="zh-cn">
 <info>
  <title>用于构建映像和管理容器的工具</title>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
 </info>
 <para>
  本章简要概述了用于构建映像和管理容器的工具。下文提到的大部分工具都包含在 <emphasis role="strong"><phrase role="productnumber"><phrase os="sles;sled"/></phrase>SUSE Linux Enterprise Server 15 SP4 Containers 模块</emphasis>中。您可以在 <link xlink:href="https://scc.suse.com/packages?name=SUSE%20Linux%20Enterprise%20Server&amp;version=15.4&amp;arch=x86_64&amp;query=&amp;module=1963">SUSE Customer Center</link> 的 <emphasis role="strong">Containers 模块</emphasis>中查看完整的软件包列表。
 </para>
 <sect1 xml:id="sec-build-tools">
  <title>可供客户使用的工具</title>

  <sect2 xml:id="sec-build-tools-docker">
   <title>Docker</title>
   <para>
    Docker 是一个用于创建和管理容器的系统。其核心是 Docker 开源引擎，这是一种轻量级虚拟化解决方案，可在单台主机上同时运行多个容器。可以使用 Dockerfile 构建 Docker 容器（参见 <xref linkend="Dockerfile" role="internalbook"/>）。有关 Docker 开源引擎的总体介绍，请参见<xref linkend="cha-docker-overview" role="internalbook"/>。
   </para>
  </sect2>

  <sect2 xml:id="sec-build-tools-podman">
   <title>Podman</title>
   <para>
    Podman 表示 Pod Manager 工具。它是一个无守护程序的容器引擎，用于在 Linux 系统上开发、管理和运行 Open Container Initiative (OCI) 容器，可以直接取代 Docker。Podman 是 openSUSE Kubic（基于 openSUSE 构建的 Kubernetes 认证发行套件）中的默认容器运行时。有关 Podman 的总体介绍，请参见<xref linkend="cha-podman-overview" role="internalbook"/>。
   </para>
  </sect2>

  <sect2 xml:id="sec-build-tools-buildah">
   <title>Buildah</title>
   <para>
    Buildah 可帮助您构建 OCI 容器映像。Buildah 是 Podman 的互补工具，<literal>podman build</literal> 使用它来执行容器映像构建。Buildah 可让您从头开始构建映像，也可使用 Dockerfile 从现有映像构建映像。使用 Buildah 命令行工具和基于 OCI 的底层技术（例如 <literal>containers/image</literal> 和 <literal>containers/storage</literal>）构建的 OCI 映像具有可移植性，因此可以在 Docker 开源引擎环境中运行。
   </para>
   <para>
    有关安装和使用 Buildah 的信息，请参见<xref linkend="cha-buildah-overview" role="internalbook"/>。
   </para>
  </sect2>
 </sect1>
 <sect1 xml:id="sec-internal-build-tools">
  <title>SUSE 构建工具</title>

  <sect2 xml:id="sec-internal-build-tools-obs">
   <title>Open Build Service</title>
   <para>
    Open Build Service (OBS) 提供了免费的基础结构，可用于构建和储存 RPM 软件包（包括各种容器格式）。<link xlink:href="https://registry.opensuse.org/cgi-bin/cooverview">OBS 容器注册表</link>提供由 OBS 构建的所有容器映像的详细列表，使用命令完成将映像提取到您的本地 Docker 环境的操作。您可以根据特定需求修改 OBS openSUSE <link xlink:href="https://build.opensuse.org/image_templates">容器映像模板</link>，这是创建您自己的容器分支的最简单方法。您可以使用 Dockerfile 通过本机 Docker 工具从现有映像构建容器映像。也可以使用 KIWI 映像构建解决方案从头开始构建映像。
   </para>
   <para>
    <link xlink:href="https://openbuildservice.org/2018/05/09/container-building-and-distribution/"/> 上提供了有关如何在 OBS 上构建映像的说明。
   </para>
  </sect2>

  <sect2 xml:id="sec-internal-build-tools-kiwi">
   <title>KIWI</title>
   <para>
    KIWI Next Generation 是一种用于构建映像的多功能工具。除容器映像、常规安装 ISO 映像以及适用于虚拟机的映像之外，KIWI 还可构建通过 PXE 或 Vagrant 盒子引导的映像。KIWI 中的主要构建基块是映像 XML 描述，一个包含 <filename>config.xml</filename> 或 <filename>.kiwi</filename> 文件以及脚本或配置数据的目录。使用 KIWI 创建映像的过程是完全自动化的，不需要任何用户交互。映像创建过程所需的任何信息由主要配置文件 <literal>config.xml</literal> 提供。可以使用 <filename>config.sh</filename> 和 <filename>images.sh</filename> 脚本自定义映像。
   </para>
   <note>
    <para>
     请务必区分 KIWI NG（当前版本 9.20.9）及其不再维护的旧版本（7.x.x 或更早版本，现在称为 <link xlink:href="https://documentation.suse.com/kiwi/">KIWI 旧版</link>）。
    </para>
   </note>
   <para>
    有关如何安装 KIWI 以及使用 KIWI 构建映像的特定信息，请参见 <link xlink:href="http://osinside.github.io/kiwi/">KIWI 文档</link>。<link xlink:href="https://github.com/OSInside/kiwi-descriptions">KIWI GitHub 软件源</link>上提供了一系列示例映像描述。
   </para>
   <para>
    KIWI 手册页提供了使用该工具的相关信息。要访问手册页，请安装 <package>kiwi-man-pages</package> 软件包。
   </para>
  </sect2>
 </sect1>
 <sect1 xml:id="sec-building-official-slea-images">
  <title>构建官方 SLE 映像</title>

  <para>
   只有使用内部构建服务构建的映像才会被视为官方映像。
  </para>

  <para>
   <link xlink:href="https://build.opensuse.org"/> 上未提供官方 SLE 容器映像，从该网站导出的 RPM 与内部 RPM 并不相同。这意味着无法在 <link xlink:href="https://build.opensuse.org"/> 上构建官方支持的映像。
  </para>
 </sect1>
</chapter>
 <chapter xml:base="containers-docker-overview.xml" xml:id="cha-docker-overview" xml:lang="zh-cn" version="5.0">
 <info>
  <title>Docker 开源引擎概述</title>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
 </info>
 <para>
  Docker 开源引擎是一个轻量的虚拟化解决方案，无需超级管理程序即可基于单个 Linux 内核同时运行多个虚拟 Linux 环境（容器）。容器通过内核 cgroup（<xref linkend="vle-docker-cgroup" role="internalbook"/>）和<xref linkend="vle-docker-namespace" role="internalbook"/>来隔离。
 </para>
 <para>
  Xen、KVM 和 <systemitem class="library">libvirt</systemitem> 等全虚拟化解决方案基于模拟整个硬件环境，并在这些虚拟机内部运行多个操作系统实例实现。Docker 开源引擎可提供操作系统级别的虚拟化：由单个 Linux 内核控制多个隔离的容器。
 </para>
 <para>
  Docker 开源引擎可让开发人员和系统管理员管理映像的整个生命周期。使用 Docker 开源引擎可以轻松构建、交付和运行包含应用程序的映像。
 </para>
 <para>
  Docker 开源引擎具有以下优势：
 </para>
 <itemizedlist>
  <listitem>
   <para>
    通过容器隔离应用程序。
   </para>
  </listitem>
  <listitem>
   <para>
    近乎本机的性能，因为 Docker 开源引擎可实时管理资源分配。
   </para>
  </listitem>
  <listitem>
   <para>
    通过 cgroup 控制容器内部可用的网络接口和资源。
   </para>
  </listitem>
  <listitem>
   <para>
    对映像进行版本控制。
   </para>
  </listitem>
  <listitem>
   <para>
    基于现有映像构建新映像。
   </para>
  </listitem>
  <listitem>
   <para>
    容器编制。
   </para>
  </listitem>
 </itemizedlist>
 <para>
  Docker 开源引擎存在以下限制：
 </para>
 <itemizedlist>
  <listitem>
   <para>
    容器在主机系统的内核中运行，无法使用不同的内核。
   </para>
  </listitem>
  <listitem>
   <para>
    仅支持 Linux 应用程序，不支持其他操作系统。
   </para>
  </listitem>
  <listitem>
   <para>
    Docker 开源引擎不是像 Xen、KVM 或 <systemitem class="library">libvirt</systemitem> 那样的全虚拟化堆栈。
   </para>
  </listitem>
  <listitem>
   <para>
    安全性取决于主机系统。有关更多细节，请参见<link xlink:href="http://docs.docker.com/articles/security/">官方安全性文档</link>。
   </para>
  </listitem>
 </itemizedlist>
 <sect1 xml:id="cha-docker-architecture">
  <title>Docker 开源引擎体系结构</title>

  <para>
   Docker 开源引擎使用客户端/服务器体系结构。您可以使用 <emphasis>CLI 客户端</emphasis>来与<emphasis>守护程序</emphasis>通讯。<emphasis>守护程序</emphasis>负责对容器执行操作，并在本地或注册表中管理映像。<emphasis>CLI 客户端</emphasis>可以在主机守护程序所在的同一台服务器上运行，也可以在不同的计算机上运行。<emphasis>CLI 客户端</emphasis>使用网络套接字来与<emphasis>守护程序</emphasis>通讯。<xref linkend="fig-docker-architecture" role="internalbook"/>中显示了体系结构。
  </para>

  <figure xml:id="fig-docker-architecture">
   <title>Docker 开源引擎体系结构</title>
   <mediaobject>
    <imageobject>
     <imagedata fileref="docker_architecture.png" width="70%"/>
    </imageobject>
   </mediaobject>
  </figure>
 </sect1>
</chapter>
 <chapter xml:base="containers-docker-installation.xml" xml:id="cha-docker-installation" xml:lang="zh-cn" version="5.0">
 <info>
  <title>设置 Docker 开源引擎</title>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
 </info>
 <sect1 xml:id="sec-preparation">
  <title>准备主机</title>

  <para>
   请按如下所述准备主机。在安装任何与 Docker 相关的软件包之前，需要启用 <literal>Containers 模块</literal>：
  </para>

  <note>
   <title>内置 Docker 编制支持</title>
   <para>
    从 Docker Open Source Engine 1.12 开始，容器编制现在是 Docker 开源引擎不可或缺的组成部分。尽管此功能已在 <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> 中提供，但 SUSE 并不提供对它的支持，此功能仅作为技术预览提供。使用 Kubernetes 进行容器编制。有关细节，请参见 <link xlink:href="http://kubernetes.io/docs/getting-started-guides/kubeadm/">Kubernetes 文档</link>。
   </para>
  </note>

  <procedure>
   <title>使用图形用户界面 YaST 启用 Containers 模块</title>
   <step>
    <para>
     启动 YaST，然后选择<menuchoice><guimenu>软件</guimenu>
     <guimenu>软件源</guimenu></menuchoice>。
    </para>
   </step>
   <step>
    <para>
     单击<guimenu>添加</guimenu>打开附加产品对话框。
    </para>
   </step>
   <step>
    <para>
     选择<guimenu>注册服务器上的扩展和模块</guimenu>，然后单击<guimenu>下一步</guimenu>。
    </para>
   </step>
   <step>
    <para>
     在可用扩展和模块列表中，选择 <guimenu>Containers Module <phrase role="productnumber"><phrase os="sles;sled">15 SP4</phrase></phrase> x86_64</guimenu>，然后单击<guimenu>下一步</guimenu>。
    </para>
    <para>
     Containers 模块及其软件源随即添加到您的系统中。
    </para>
   </step>
   <step>
    <para>
     如果您使用 Repository Mirroring Tool，请更新 RMT 服务器上的软件源列表。
    </para>
   </step>
  </procedure>

  <procedure>
   <title>使用 SUSEConnect 从命令行启用 Containers 模块</title>
   <step>
    <para>
     您也可以使用以下命令添加 Containers 模块：
    </para>
<screen><prompt>&gt; </prompt><command>sudo</command> SUSEConnect -p sle-module-containers/15.4/x86_64</screen>
   </step>
  </procedure>

  <procedure>
   <title>安装和设置 Docker 开源引擎</title>
   <step>
    <para>
     安装 <systemitem>docker</systemitem> 软件包：
    </para>
<screen><prompt>&gt; </prompt><command>sudo</command> zypper install docker</screen>
   </step>
   <step>
    <para>
     要在系统引导时自动启动 Docker 服务，请运行以下命令：
    </para>
<screen><prompt>&gt; </prompt><command>sudo</command> systemctl enable docker.service</screen>
    <para>
     这也会自动启用 <systemitem>docker.socket</systemitem>。
    </para>
   </step>
   <step>
    <substeps>
     <step>
      <para>
       打开 <filename>/etc/sysconfig/docker</filename> 文件。搜索参数 <parameter>DOCKER_OPTS</parameter> 并添加 <literal>--insecure-registry <replaceable>注册表的地址</replaceable></literal>。
      </para>
     </step>
     <step>
      <para>
       将 CA 证书添加到 <filename>/etc/docker/certs.d/<replaceable>REGISTRY_ADDRESS</replaceable></filename> 目录中
      </para>
<screen><prompt>&gt; </prompt><command>sudo</command> cp CA /etc/pki/trust/anchors/</screen>
     </step>
     <step>
      <para>
       将 CA 证书复制到系统中：
      </para>
<screen><prompt>&gt; </prompt><command>sudo</command> update-ca-certificates</screen>
     </step>
    </substeps>
   </step>
   <step>
    <para>
     启动 Docker 服务：
    </para>
<screen><prompt>&gt; </prompt><command>sudo</command> systemctl start docker.service</screen>
    <para>
     这会自动启动 <systemitem>docker.socket</systemitem>。
    </para>
   </step>
  </procedure>

  <para>
   Docker 守护程序将会侦听仅可供 <systemitem class="username">root</systemitem> 用户以及 <systemitem class="groupname">docker</systemitem> 组成员访问的本地套接字。<systemitem class="groupname">docker</systemitem> 组是在安装软件包期间自动创建的。
  </para>

  <para>
   要允许特定用户连接到本地 Docker 守护程序，请使用以下命令：
  </para>

<screen><prompt>&gt; </prompt><command>sudo</command> /usr/sbin/usermod -aG docker <replaceable>USERNAME</replaceable></screen>

  <para>
   这会允许该用户与本地 Docker 守护程序通讯。
  </para>
 </sect1>
 <sect1 xml:id="sec-docker-setup-net">
  <title>配置网络</title>

  <para>
   要使容器能够访问外部网络，请启用 <option>ipv4 ip_forward</option> 规则。
  </para>



  <sect2 xml:id="sec-docker-setup-net-docs">
   <title>Docker 开源引擎与 <command>iptables</command> 交互的方式</title>
   <para>
    要了解有关容器如何相互交互以及如何与系统防火墙交互的详细信息，请参见 <link xlink:href="https://docs.docker.com/v17.09/engine/userguide/networking/default_network/container-communication/">Docker 文档</link>。
   </para>
   <para>
    您也可以彻底阻止 Docker 开源引擎操作 <command>iptables</command>。请参见 <link xlink:href="https://docs.docker.com/network/iptables/#prevent-docker-from-manipulating-iptables">Docker 文档</link>。
   </para>
  </sect2>
 </sect1>
 <sect1 xml:id="sec-docker-storaged">
  <title>储存驱动程序</title>

  <para>
   Docker 开源引擎支持不同的储存驱动程序：
  </para>

  <itemizedlist>
   <listitem>
    <para>
     <systemitem class="resource">vfs</systemitem>：如果 Docker 主机文件系统不支持写入时复制，将自动使用此驱动程序。此驱动程序比其他所列驱动程序更简单，未利用 Docker 开源引擎的某些优势，例如共享层。此驱动程序很可靠，但速度较慢。
    </para>
   </listitem>
   <listitem>
    <para>
     <systemitem class="resource">devicemapper</systemitem>：此驱动程序依赖于 device-mapper 精简供应模块。它支持写入时复制，因此可以利用 Docker 开源引擎的所有优势。
    </para>
   </listitem>
   <listitem>
    <para>
     <systemitem class="resource">btrfs</systemitem>：此驱动程序依赖于 Btrfs 来提供 Docker 开源引擎所需的所有功能。要使用此驱动程序，<filename>/var/lib/docker</filename> 目录必须位于 Btrfs 文件系统上。
    </para>
   </listitem>
  </itemizedlist>

  <para>
   从 <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> 12 开始，默认会使用 Btrfs 文件系统，这会强制 Docker 开源引擎使用 <systemitem class="resource">btrfs</systemitem> 驱动程序。
  </para>

  <para>
   可以通过更改 <filename>/etc/sysconfig/docker</filename> 文件中定义的 <envar>DOCKER_OPTS</envar> 变量值来指定要使用的驱动程序。可以手动进行这种更改，也可以在 YaST 中浏览到<menuchoice>
   <guimenu>系统</guimenu> <guimenu>/etc/sysconfig 编辑器</guimenu>
   <guimenu>系统</guimenu> <guimenu>管理</guimenu>
   <guimenu>DOCKER_OPTS</guimenu> </menuchoice> 菜单，然后输入 <systemitem class="library">-s storage_driver</systemitem> 字符串进行更改。
  </para>

  <para>
   例如，要强制使用 <systemitem class="resource">devicemapper</systemitem> 驱动程序，请输入以下文本：
  </para>

<screen>DOCKER_OPTS="-s devicemapper"</screen>

  <important>
   <title>挂载 <filename>/var/lib/docker</filename></title>
   <para>
    建议在单独的分区或卷上挂载 <filename>/var/lib/docker</filename>。这样，当文件系统损坏时，运行 Docker 开源引擎的操作系统将不受影响。
   </para>
   <para>
    如果您为 <filename>/var/lib/docker</filename> 选择了 Btrfs 文件系统，强烈建议为其创建一个子卷。这可以确保从文件系统快照中排除该目录。如果不从快照中排除 <filename>/var/lib/docker</filename>，当您开始部署容器后，文件系统可能很快就会耗尽磁盘空间。此外，回滚到以前的快照也会重设置 Docker 数据库和映像。有关详细信息，请参见<phrase role="externalbook-sec-snapper-setup-customizing-new-subvolume">“创建和挂载新子卷” (节 “通过 Snapper 进行系统恢复和快照管理”, ↑管理指南)</phrase>。
   </para>
  </important>
 </sect1>
 <sect1 xml:id="sec-docker-setup-updates">
  <title>更新</title>

  <para>
   对 <package>docker</package> 软件包进行的所有更新都会标记为“交互式”（即，不是自动更新），以避免意外的更新破坏正在运行的容器工作负载。一般而言，我们建议在对 Docker 开源引擎应用更新之前停止所有正在运行的容器。
  </para>

  <para>
   为避免数据丢失，我们不建议让工作负载依赖于容器在 Docker 开源引擎更新后保持可启动状态。尽管从技术上讲可以通过 <option>--live-restore</option> 选项使容器能够在更新期间保持运行，但经验表明，这种更新可能会导致性能下降。SUSE 不支持此功能。
  </para>
 </sect1>
</chapter>
 <chapter xml:base="containers-docker-registry.xml" xml:id="cha-registry-installation" xml:lang="zh-cn" version="5.0">
 <info>
  <title>配置映像储存</title>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
 </info>
 <para>
  在创建自定义映像之前，需要确定映像的储存位置。最简单的解决方案是将映像推送到 <link xlink:href="https://hub.docker.com">Docker Hub</link>。默认情况下，推送到 Docker Hub 的所有映像都是公用映像。切勿发布敏感数据或未授权的软件供公众使用。
 </para>
 <para>
  您可以通过以下方式限制对自定义容器映像的访问：
 </para>
 <itemizedlist>
  <listitem>
   <para>
    付费订阅者可以通过 Docker Hub 创建私用软件源。
   </para>
  </listitem>
  <listitem>
   <para>
    使用现场 Docker 注册表可以储存您的组织所用的全部容器映像。
   </para>
  </listitem>
 </itemizedlist>
 <sect1 xml:id="sec-docker-registry-definition">
  <title>什么是 Docker 注册表？</title>

  <para>
   Docker 注册表是用于储存和检索容器映像的开源平台。可以通过运行 Docker 注册表的本地实例来避免使用 Docker Hub。
  </para>

  <para>
   Docker Hub 也会使用 Docker 注册表。但从用户的角度而言，Docker Hub 由以下组件构成：
  </para>

  <variablelist>
   <varlistentry>
    <term>用户界面 (UI)</term>
    <listitem>
     <para>
      用户使用浏览器访问的部分。在 UI 中可以手动或使用搜索功能方便地浏览 Docker Hub 的内容。UI 可用来按不同的用户创建组织。
     </para>
     <para>
      此组件是闭源的。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>身份验证组件</term>
    <listitem>
     <para>
      此组件用于保护 Docker Hub 中储存的映像。它会验证所有推送、提取和搜索请求。
     </para>
     <para>
      此组件是闭源的。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>储存后端</term>
    <listitem>
     <para>
      将映像上传到以及从中下载映像的位置。它由 Docker 注册表提供。
     </para>
     <para>
      此组件是开源的。
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect1>
 <sect1 xml:id="sec-docker-registry-installation">
  <title>运行 Docker 注册表</title>

  <para>
   SUSE 注册表提供了一个容器映像，可用于将本地 Docker 注册表作为容器运行。在启动容器之前，请创建包含以下示例配置的 <filename>config.yml</filename> 文件：
  </para>

<screen>version: 0.1
log:
  level: info
storage:
  filesystem:
    rootdirectory: /var/lib/docker-registry
http:
  addr: 0.0.0.0:5000</screen>

  <para>
   另外，创建一个空目录以映射容器外部的 <filename>/var/lib/docker-registry</filename> 目录。此目录用于储存容器映像。
  </para>

  <para>
   运行以下命令以从 SUSE 注册表提取注册表容器映像，并启动一个可以通过端口 5000 访问的容器：
  </para>

<screen>podman run -d --restart=always --name registry -p 5000:5000 \
-v /<replaceable>PATH</replaceable>/config.yml:/etc/docker/registry/config.yml \
-v /<replaceable>PATH</replaceable>/<replaceable>DIR</replaceable>:/var/lib/ \ docker-registry registry.suse.com/sles12/registry:2.6.2</screen>

  <para>
   为了更方便地管理注册表，请创建相应的系统单元：
  </para>

<screen><prompt role="root"># </prompt> podman generate systemd registry &gt;  \
 /etc/systemd/system/suse_registry.service</screen>

  <para>
   启用并启动注册表服务，然后校验其状态：
  </para>

<screen><prompt role="root"># </prompt>systemctl enable suse_registry.service
<prompt role="root"># </prompt>systemctl start suse_registry.service
<prompt role="root"># </prompt>systemctl status suse_registry.service</screen>

  <para>
   有关 Docker 注册表及其配置的更多细节，请参见 <link xlink:href="https://docs.docker.com/registry/"/> 上的官方文档。
  </para>
 </sect1>
 <sect1 xml:id="sec-docker-registry-limitations">
  <title>限制</title>

  <para>
   Docker 注册表存在两项主要限制：
  </para>

  <itemizedlist>
   <listitem>
    <para>
     它缺少任何形式的身份验证。这意味着，有权访问 Docker 注册表的任何人都可以向它推送映像以及从中提取映像，包括重写现有映像。
    </para>
   </listitem>
   <listitem>
    <para>
     无法查看哪些映像已推送到 Docker 注册表。您需要手动记下其中储存的映像。此外，它没有搜索功能。
    </para>
   </listitem>
  </itemizedlist>
 </sect1>
</chapter>
 <chapter xml:base="containers-get.xml" version="5.0" xml:id="cha-containers-get">
 <info>
  <title>获取容器</title>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
 </info>
 <para>
  本章提供获取容器映像的相关信息。
 </para>
 <sect1 xml:id="sec-sle-base-images">
  <title>SUSE Linux Enterprise 基本映像</title>

  <para>
   SUSE 提供了多个官方基本容器映像，您可以基于这些映像构建自定义容器。每个 SLE 基本映像提供一个具有外壳和软件包管理功能的最小环境。
  </para>

  <para>
   您可从 <link xlink:href="https://registry.suse.com"/> 获取基本映像。有关 SUSE 注册表的信息，请参见<xref linkend="sec-suse-registry" role="internalbook"/>。SUSE 注册表中的基本映像都处于“正式发布”状态（也就是说，它们适合用于生产环境），并且是 SLES 12 和 SLES 15 的 <link xlink:href="https://www.suse.com/products/long-term-service-pack-support/">LTSS</link> 版本。SUSE 注册表中的 SUSE Linux Enterprise 基本映像会收到安全更新，并涵盖在 SUSE 支持计划中。有关这些支持计划的详细信息，请参见<xref linkend="cha-containers-support" role="internalbook"/>。
  </para>
 </sect1>
 <sect1 xml:id="sec-suse-container-properties">
  <title>SUSE 容器属性</title>

  <para>
   SUSE 容器映像都有标识符，这些标识符提供有关这些映像的版本、来源和创建时间的信息。从软件源中提取容器映像并在其上运行 <literal>podman inspect</literal> 之后，便可访问下面列出的各个标识符。
  </para>

  <sect2 xml:id="sec-repository-names">
   <title>软件源名称</title>
   <para>
    软件源名称以产品名称开头，例如：<literal>suse/sle...</literal> 和 <literal>opensuse/tumbleweed</literal>。适用于所有服务包的 SLE 15 容器位于软件源 <literal>suse/sle15</literal> 中。但对于 SLE 12，每个服务包都有一个单独的软件源名称，例如 <literal>suse/sles12sp3</literal>、<literal>suse/sles12sp4</literal> 和 <literal>suse/sles12sp5</literal>。
   </para>
  </sect2>

  <sect2 xml:id="sec-labels">
   <title>标签</title>
   <para>
    标签有助于识别映像。所有 SLE 容器映像标签均以 <literal>com.suse.<replaceable>PRODUCT</replaceable><replaceable>CONTAINER_NAME</replaceable></literal> 开头，后跟其他详细信息。容器映像还包含 <literal>org.opencontainers.image</literal> 标签。
   </para>
   <para>
    下面是所有当前定义的标签的列表。
   </para>
   <variablelist>
    <varlistentry>
     <term><literal>org.opencontainers.image.<emphasis role="strong">title</emphasis></literal>、<literal>com.suse.sle.base.<emphasis role="strong">title</emphasis></literal></term>
     <listitem>
      <itemizedlist>
       <listitem>
        <para>
         <emphasis>必须由派生映像提供：</emphasis>是
        </para>
       </listitem>
       <listitem>
        <para>
         <emphasis>OCI 表示法：</emphasis>
         <literal>org.opencontainers.image.title</literal>
        </para>
       </listitem>
       <listitem>
        <para>
         <emphasis>说明：</emphasis>映像标题
        </para>
       </listitem>
       <listitem>
        <para>
         <emphasis>示例：</emphasis> <literal>SUSE Linux Enterprise 15 基本容器</literal>
        </para>
       </listitem>
      </itemizedlist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>org.opencontainers.image.<emphasis role="strong">description</emphasis></literal>、<literal>com.suse.sle.base.<emphasis role="strong">description</emphasis></literal></term>
     <listitem>
      <itemizedlist>
       <listitem>
        <para>
         <emphasis>必须由派生映像提供：</emphasis>是
        </para>
       </listitem>
       <listitem>
        <para>
         <emphasis>OCI 表示法：</emphasis>
         <literal>org.opencontainers.image.description</literal>
        </para>
       </listitem>
       <listitem>
        <para>
         <emphasis>说明：</emphasis>映像的简要说明
        </para>
       </listitem>
       <listitem>
        <para>
         <emphasis>示例：</emphasis> <literal>包含基于 SUSE Linux Enterprise 15 的容器适用最小环境的映像</literal>
        </para>
       </listitem>
      </itemizedlist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>org.opencontainers.image.<emphasis role="strong">version</emphasis></literal>、<literal>com.suse.sle.base.<emphasis role="strong">version</emphasis></literal></term>
     <listitem>
      <itemizedlist>
       <listitem>
        <para>
         <emphasis>必须由派生映像提供：</emphasis>是
        </para>
       </listitem>
       <listitem>
        <para>
         <emphasis>OCI 表示法：</emphasis>
         <literal>org.opencontainers.image.version</literal>
        </para>
       </listitem>
       <listitem>
        <para>
         <emphasis>说明：</emphasis>映像版本 (<literal><replaceable>MAJOR</replaceable>.<replaceable>SP</replaceable>.<replaceable>CICOUNT</replaceable>.<replaceable>BUILDCOUNT</replaceable></literal>)
        </para>
       </listitem>
       <listitem>
        <para>
         <emphasis>示例：</emphasis> <literal>15.0.4.2</literal>
        </para>
       </listitem>
      </itemizedlist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>org.opencontainers.image.<emphasis role="strong">created</emphasis></literal>、<literal>com.suse.sle.base.<emphasis role="strong">created</emphasis></literal></term>
     <listitem>
      <itemizedlist>
       <listitem>
        <para>
         <emphasis>必须由派生映像提供：</emphasis>是
        </para>
       </listitem>
       <listitem>
        <para>
         <emphasis>OCI 表示法：</emphasis>
         <literal>org.opencontainers.image.created</literal>
        </para>
       </listitem>
       <listitem>
        <para>
         <emphasis>说明：</emphasis>映像构建时戳
        </para>
       </listitem>
       <listitem>
        <para>
         <emphasis>示例：</emphasis> <literal>2018-07-27T14:12:30Z</literal>
        </para>
       </listitem>
      </itemizedlist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>org.opencontainers.image.<emphasis role="strong">vendor</emphasis></literal>、<literal>com.suse.sle.base.<emphasis role="strong">vendor</emphasis></literal></term>
     <listitem>
      <itemizedlist>
       <listitem>
        <para>
         <emphasis>必须由派生映像提供：</emphasis>否
        </para>
       </listitem>
       <listitem>
        <para>
         <emphasis>OCI 表示法：</emphasis>
         <literal>org.opencontainers.image.vendor</literal>
        </para>
       </listitem>
       <listitem>
        <para>
         <emphasis>说明：</emphasis>映像供应商
        </para>
       </listitem>
       <listitem>
        <para>
         <emphasis>示例：</emphasis> <literal>SUSE LLC</literal>
        </para>
       </listitem>
      </itemizedlist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>org.opencontainers.image.<emphasis role="strong">url</emphasis></literal>、<literal>com.suse.sle.base.<emphasis role="strong">url</emphasis></literal></term>
     <listitem>
      <itemizedlist>
       <listitem>
        <para>
         <emphasis>必须由派生映像提供：</emphasis>否
        </para>
       </listitem>
       <listitem>
        <para>
         <emphasis>OCI 表示法：</emphasis>
         <literal>org.opencontainers.image.url</literal>
        </para>
       </listitem>
       <listitem>
        <para>
         <emphasis>说明：</emphasis>附加信息
        </para>
       </listitem>
       <listitem>
        <para>
         <emphasis>示例：</emphasis>
         <literal>https://www.suse.com/products/server/</literal>
        </para>
       </listitem>
      </itemizedlist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>org.openbuildservice.<emphasis role="strong">disturl</emphasis></literal>、<literal>com.suse.sle.base.<emphasis role="strong">disturl</emphasis></literal></term>
     <listitem>
      <itemizedlist>
       <listitem>
        <para>
         <emphasis>必须由派生映像提供：</emphasis>是
        </para>
       </listitem>
       <listitem>
        <para>
         <emphasis>OCI 表示法：</emphasis>
         <literal>org.openbuildservice.disturl</literal>
        </para>
       </listitem>
       <listitem>
        <para>
         <emphasis>说明：</emphasis>映像 OBS URL
        </para>
       </listitem>
       <listitem>
        <para>
         <emphasis>示例：</emphasis>
         <literal>obs://build.suse.de/SUSE:SLE-15:Update:CR/images/2951b67133dd6384cacb28203174e030-sles15-image</literal>
        </para>
       </listitem>
      </itemizedlist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>org.opensuse.<emphasis role="strong">reference</emphasis></literal>、<literal>com.suse.sle.base.<emphasis role="strong">reference</emphasis></literal></term>
     <listitem>
      <itemizedlist>
       <listitem>
        <para>
         <emphasis>必须由派生映像提供：</emphasis>是
        </para>
       </listitem>
       <listitem>
        <para>
         <emphasis>OCI 表示法：</emphasis>
         <literal>org.opensuse.reference</literal>
        </para>
       </listitem>
       <listitem>
        <para>
         <emphasis>说明：</emphasis>指向映像的引用。切勿更改您使用 <command>docker pull <replaceable>REF_NAME</replaceable></command> 获取的映像。
        </para>
       </listitem>
       <listitem>
        <para>
         <emphasis>示例：</emphasis>
         <literal>registry.suse.com/suse/sle15:4.2</literal>
        </para>
       </listitem>
      </itemizedlist>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>

  <sect2 xml:id="sec-tags">
   <title>标记</title>
   <para>
    标记用于引用映像。标记是映像名称的组成部分。与标签不同，标记可以自由定义，通常用于表示版本号。
   </para>
   <para>
    如果某个标记存在于多个映像中，则将使用最新的映像。由映像维护者决定指派给容器映像的标记。
   </para>
   <para>
    常规标记格式为：<literal>软件源名称</literal>: <literal>映像版本规范</literal>（通常为版本号）。例如，<phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> 15 SP2 的最新发布映像的标记将为 <literal>suse/sle15:15.2</literal>。
   </para>
  </sect2>
 </sect1>
 <sect1 xml:id="sec-suse-registry">
  <title>SUSE 注册表</title>

  <para>
   官方 SUSE 注册表可从 <link xlink:href="https://registry.suse.com"/> 获取。它包含经过测试和更新的 SUSE Linux Enterprise 基本容器映像。SUSE 注册表中的所有映像都要经历一个维护过程。构建的映像包含最新可用的更新和修复。SUSE 注册表的 Web 用户界面列出了一部分可用映像。
  </para>
 </sect1>
<sect1 xml:id="sec-verify-containers">
  <title>校验容器</title>
  <para>
  通过 SUSE 注册表提供的映像签名储存在 Notary 中。您可以使用以下命令校验特定映像的签名：
  </para>
<screen>docker trust inspect --pretty registry.suse.com/suse<replaceable>IMAGE</replaceable>:<replaceable>TAG</replaceable></screen>
<para>
例如，<command>docker trust inspect --pretty registry.suse.com/suse/sle15:latest</command> 命令可校验最新 SLE15 基本映像的签名。
</para>
<para>
要在提取映像时自动校验该映像，请将环境变量 <literal>DOCKER_CONTENT_TRUST</literal> 设置为 <literal>1</literal>。例如：
</para>
<screen>env DOCKER_CONTENT_TRUST=1 docker pull registry.suse.com/suse/sle15:latest</screen>
  </sect1>
 <sect1 xml:id="sec-compare-containers">
  <title>比较容器</title>

  <para>
   <link xlink:href="https://github.com/GoogleContainerTools/container-diff#container-diff">container-diff</link> 工具可用于分析和比较容器映像。<literal>container-diff</literal> 可根据多个准则检查映像，其中包括：
  </para>

  <itemizedlist>
   <listitem>
    <para>
     Docker 映像历史
    </para>
   </listitem>
   <listitem>
    <para>
     映像文件系统
    </para>
   </listitem>
   <listitem>
    <para>
     DEB 软件包
    </para>
   </listitem>
   <listitem>
    <para>
     RPM 软件包
    </para>
   </listitem>
   <listitem>
    <para>
     PyPI 软件包
    </para>
   </listitem>
   <listitem>
    <para>
     NPM 软件包
    </para>
   </listitem>
  </itemizedlist>

  <para>
   您可以检查单个映像，也可以对两个映像执行 diff 操作。<literal>container-diff</literal> 支持位于本地 Docker 守护程序和远程注册表中的 Docker 映像。您也可以对 <filename>.tar</filename>、<filename>.tar.gz</filename> 和 <filename>.tgz</filename> 存档使用该工具。
  </para>

  <para>
   <package>container-diff</package> 软件包属于 <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase>
   <phrase role="productnumber"><phrase os="sles;sled">15 SP4</phrase></phrase> Containers 模块的一部分。您也可以单独安装该软件包。有关安装该软件包的说明，请参见 <link xlink:href="https://github.com/GoogleContainerTools/container-diff#installation">container-diff 文档</link>。
  </para>
 </sect1>
</chapter>
 <chapter xml:base="containers-docker-building-images.xml" xml:id="cha-docker-building-images" xml:lang="zh-cn" version="5.0">
 <info>
  <title>创建自定义容器映像</title>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
 </info>
 <para>
  要创建自定义映像，需要有 <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> 的基本映像。您可以使用任何预构建的 <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> 映像。
 </para>
 <sect1 xml:id="sec-download-prebuild-images">
  <title>提取基本 SLES 映像</title>

  <para>
   要获取 SUSE Linux Enterprise 12 SP3 和更高版本的预构建基本映像，请使用以下命令：
  </para>

<screen>
      <prompt>&gt; </prompt>docker pull registry.suse.com/suse/
      <replaceable>IMAGENAME</replaceable>
    </screen>

  <para>
   例如，对于 <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> 15，命令如下：
  </para>

<screen><prompt>&gt; </prompt>docker pull registry.suse.com/suse/sle15</screen>

  <para>
   不需要使用 <literal>sle2docker</literal>，因为系统会从 Docker 注册表中提取该映像。
  </para>

  <para>
   有关获取特定基本映像的信息，请参见<xref linkend="sec-sle-base-images" role="internalbook"/>。
  </para>

  <para>
   容器映像准备就绪后，便可以按照<xref linkend="sec-customize-prebuild-images" role="internalbook"/>中所述对其进行自定义。
  </para>
 </sect1>
 
 <sect1 xml:id="sec-customize-prebuild-images">
  <title>自定义 SLES 容器映像</title>

  <para>
   预构建的映像未配置任何软件源，也不包含任何模块或扩展。它们包含一个 <link xlink:href="https://github.com/SUSE/container-suseconnect">zypper 服务</link>，该服务根据运行容器的 <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> 主机的配置联系 SUSE® Customer Center 或 Repository Mirroring Tool (RMT) 服务器。该服务会获取容器映像所用产品的可用软件源列表。您还可以直接在 <filename>Dockerfile</filename> 中声明扩展。有关详细信息，请参见<xref linkend="sec-docker-sle-images-customizing-the-images-extensions" role="internalbook"/>。
  </para>

  <note>
  <title>SLE_BCI 软件源</title>
  <para>
  从 SUSE Linux Enterprise 15 SP3 开始，默认基本映像会包含 <literal>SLE_BCI</literal> 软件源。仅当某个容器是在未注册的 SLES 主机上构建的或是在此类主机上运行时，或者当容器无法使用注册身份凭证时，才使用此软件源。该软件源提供了一部分 SUSE Linux Enterprise 15 SP3 软件包，用于自定义 SLES 容器映像。无需注册即可使用该软件源，但 SUSE 不对其提供支持。
  </para>
  </note>

  <para>
   您不需要在容器映像中添加任何身份凭证，因为 <systemitem class="daemon">docker</systemitem> 守护程序会自动将计算机身份凭证插入到容器中的 <literal>/run/secrets</literal> 目录。这同样适用于主机系统的 <filename>/etc/SUSEConnect</filename> 文件，该文件会自动插入到 <filename>/run/secrets</filename> 目录中。
  </para>

  <note>
   <title>身份凭证和安全性</title>
   <para>
    <filename>/run/secrets</filename> 目录的内容永远不会包含在容器映像中，因此不存在身份凭证泄露的风险。
   </para>
  </note>

  <note xml:id="note-build-images-different-codebase">
   <title>在已于 RMT 中注册的系统上构建映像</title>
   <para>
    如果用于构建容器映像的主机系统已在 RMT 中注册，则默认行为只允许构建其代码库与主机相同的容器。例如，如果您的容器主机是 SLE 15 系统，则默认只能在该主机上构建基于 SLE 15 的映像。要为不同的 SLE 版本（例如，SLE 15 主机上的 SLE 12）构建映像，可将目标版本的主机计算机身份凭证插入到容器中（如下所述）。请注意，如果 RMT 服务器使用自我签名证书，则需要将匹配的 CA 证书添加到 <filename><replaceable>CA 可信证书储存区</replaceable>/rmt-server.pem</filename> 中的容器才能接受证书。
   </para>
   <para>
    如果主机系统已在 SUSE Customer Center 中注册，则此限制不适用。
   </para>
  </note>

  <note>
   <title>在公有云中的按需 SLE 实例上构建容器映像</title>
   <para>
    在公有云（AWS、GCE 或 Azure）中以按需或即用即付实例形式启动的 SLE 实例上构建容器映像需要执行额外的步骤。要安装软件包和更新，需将<quote>按需</quote>公有云实例连接到更新基础结构。此基础结构基于 SUSE 在不同公有云提供商处运营的 RMT 服务器工作。
   </para>
   <para>
    因此，您的计算机需要找到所需的服务并向其进行身份验证。可以使用 <literal>containerbuild-regionsrv</literal> 服务来执行此操作。通过各公有云提供商的商城提供的公有云映像中提供此服务。在构建映像之前，必须通过运行以下命令在公有云实例上启动此服务：
   </para>
<screen><prompt>&gt; </prompt><command>sudo</command> systemctl start containerbuild-regionsrv</screen>
   <para>
    要让该服务在系统启动时自动启动，请启用该服务：
   </para>
<screen><prompt>&gt; </prompt><command>sudo</command> systemctl enable containerbuild-regionsrv</screen>
   <para>
    SLE 基本映像提供的 Zypper 插件将连接到此服务，并检索身份验证细节以及有关要与哪个更新服务器通讯的信息。为此，必须在启用主机网络的情况下构建容器，例如：
   </para>
<screen>
        <prompt>&gt; </prompt>docker build --network host
        <replaceable>build-directory/</replaceable>
      </screen>
   <para>
    由于公有云中的更新基础结构基于 RMT 工作，因此，为不同于主机 SLE 版本的 SLE 版本构建 SLE 映像也存在同样的限制（参见<xref linkend="note-build-images-different-codebase" role="internalbook"/>）。
   </para>
  </note>

  <para>
   要获取软件源列表，请使用以下命令：
  </para>

<screen><prompt>&gt; </prompt><command>sudo</command> zypper ref -s</screen>

  <para>
   这会自动将所有软件源添加到容器中。对于添加到系统中的每个软件源，将在 <filename>/etc/zypp/repos.d</filename> 下创建一个新文件。这些软件源的 URL 包含一个在 12 小时后自动失效的访问令牌。要续订该令牌，请运行 <command>zypper ref -s</command> 命令。将这些文件包含在容器映像中不会带来任何安全风险。
  </para>

  <para>
   要使用一组不同的身份凭证，请将自定义 <filename>/etc/zypp/credentials.d/SCCcredentials</filename> 文件放入容器映像中。该文件中的计算机身份凭证包含您要使用的订阅。这同样适用于 <filename>SUSEConnect</filename> 文件：要覆盖运行容器的主机系统上的现有文件，请将自定义 <filename>/etc/SUSEConnect</filename> 文件添加到容器映像中。
  </para>

  <para>
   现在，您便可以按照<xref linkend="sec-docker-sle-images-customizing-the-images-sles12sp3" role="internalbook"/>中所述使用 <literal>Dockerfile</literal> 来创建自定义容器映像。
  </para>

  <para>
   如果您要将应用程序移到容器中，请参见<xref linkend="cha-docker-containerize-app" role="internalbook"/>。
  </para>

  <para>
   编辑 <filename>Dockerfile</filename> 后，通过在 <filename>Dockerfile</filename> 所在的同一目录中运行以下命令来构建映像：
  </para>

<screen><prompt>&gt; </prompt>docker build .</screen>

  <para>
   有关 <literal>docker build</literal> 选项的详细信息，请参见<link xlink:href="https://docs.docker.com/engine/reference/commandline/build/">官方 Docker 文档</link>。
  </para>

  <note>
   <title>创建应用程序映像</title>
   <para>
    有关如何为在容器中运行的应用程序创建 <filename>Dockerfile</filename> 的信息，请参见<xref linkend="cha-docker-containerize-app" role="internalbook"/>。
   </para>
  </note>

  <sect2 xml:id="sec-docker-sle-images-customizing-the-images-sles12sp3">
   <title>为 SLE 12 SP3 和更高版本创建自定义映像</title>
   <para>
    下面的 <filename>Dockerfile</filename> 会创建一个基于 <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server </phrase></phrase> 15 的简单容器映像：
   </para>
<screen>
        FROM registry.suse.com/suse/sle15

        RUN zypper ref -s
        RUN zypper -n in vim
      </screen>
   <para>
    如果 Docker 主机计算机已在内部 RMT 服务器中注册，则该映像需要 RMT 使用的 SSL 证书：
   </para>
<screen>
        FROM registry.suse.com/suse/sle15

        # Import the crt file of our private SMT server
        ADD http://smt.<replaceable>example.com</replaceable>/smt.crt /etc/pki/trust/anchors/smt.crt
        RUN update-ca-certificates

        RUN zypper ref -s
        RUN zypper -n in vim
      </screen>
  </sect2>

  <sect2 xml:id="sec-docker-sle-images-metainfo">
   <title>SLE 容器映像中的元信息</title>
   <para>
    从 SUSE Linux Enterprise 12 SP3 开始，所有基本容器映像都包含构建时戳和说明等信息。此信息以附加到基本映像的标签形式提供，因此可用于派生的映像和容器（参见<xref linkend="sec-labels" role="internalbook"/>）。可以使用 <command>docker inspect</command> 查看此信息：
   </para>
<screen>
        <prompt>&gt; </prompt>docker inspect registry.suse.com/suse/sle15
        [...]
        "Labels": {
            "com.suse.sle.base.created": "2020-11-23T11:51:32.695975200Z",
            "com.suse.sle.base.description": "Image containing a minimal environment for containers based on SUSE Linux Enterprise Server 15 SP2.",
            "com.suse.sle.base.disturl": "obs://build.suse.de/SUSE:SLE-15-SP2:Update:CR/images/4a8871be8078bcef2e2417e2a98fc3a0-sles15-image",
            "com.suse.sle.base.reference": "registry.suse.com/suse/sle15:15.2.8.2.794",
            "com.suse.sle.base.title": "SUSE Linux Enterprise Server 15 SP2 Base Container",
            "com.suse.sle.base.url": "https://www.suse.com/products/server/",
            "com.suse.sle.base.vendor": "SUSE LLC",
            "com.suse.sle.base.version": "15.2.8.2.794",
            "org.openbuildservice.disturl": "obs://build.suse.de/SUSE:SLE-15-SP2:Update:CR/images/4a8871be8078bcef2e2417e2a98fc3a0-sles15-image",
            "org.opencontainers.image.created": "2020-11-23T11:51:32.695975200Z",
            "org.opencontainers.image.description": "Image containing a minimal environment for containers based on SUSE Linux Enterprise Server 15 SP2.",
            "org.opencontainers.image.title": "SUSE Linux Enterprise Server 15 SP2 Base Container",
            "org.opencontainers.image.url": "https://www.suse.com/products/server/",
            "org.opencontainers.image.vendor": "SUSE LLC",
            "org.opencontainers.image.version": "15.2.8.2.794",
            "org.opensuse.reference": "registry.suse.com/suse/sle15:15.2.8.2.794"
        },
        [...]
      </screen>
   <para>
    所有标签将显示两次，以确保在派生映像中有关原始基本映像的信息仍然可见，不会被覆盖。
   </para>
  </sect2>

  <sect2 xml:id="sec-docker-sle-images-customizing-the-images-extensions">
   <title>将 SLE 扩展和模块添加到映像中</title>
   <para>
    如果您订阅了要在自定义映像中使用的 <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> 扩展或模块，可以通过指定 <literal>ADDITIONAL_MODULES</literal> 环境变量将它们添加到容器映像中：
   </para>
<screen>ENV ADDITIONAL_MODULES sle-module-desktop-applications,sle-module-development-tools</screen>
  </sect2>
 </sect1>


</chapter>
 <chapter xml:base="containers-docker-containerize-app.xml" xml:id="cha-docker-containerize-app" xml:lang="zh-cn" version="5.0">
 <info>
  <title>创建应用程序映像</title>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
 </info>
 <para>
  使用 Docker 开源引擎可以同时运行多个独立的应用程序环境，与使用整个虚拟机相比，所需的资源用量更少。有多种类型的应用程序适合在容器内部运行：守护程序、Web 服务器以及公开 IP 通讯端口的应用程序。您可以使用 Docker 开源引擎通过在容器内部执行构建过程、构建映像，然后部署基于映像的容器来自动完成构建和部署过程。
 </para>
 <para>
  在容器内部运行应用程序具有以下优势：
 </para>
 <itemizedlist>
  <listitem>
   <para>
    包含应用程序的映像可在运行不同 Linux 主机发行套件和版本的服务器之间移植。
   </para>
  </listitem>
  <listitem>
   <para>
    可以使用软件源来共享应用程序的映像。
   </para>
  </listitem>
  <listitem>
   <para>
    可以在容器和主机系统中使用不同的软件版本，而不会造成依赖关系方面的问题。
   </para>
  </listitem>
  <listitem>
   <para>
    可以运行同一应用程序多个彼此完全独立的实例。
   </para>
  </listitem>
 </itemizedlist>
 <para>
  使用 Docker 开源引擎构建应用程序具有以下优势：
 </para>
 <itemizedlist>
  <listitem>
   <para>
    可以准备整个构建环境的映像。
   </para>
  </listitem>
  <listitem>
   <para>
    应用程序可以在构建它的同一个环境中运行。
   </para>
  </listitem>
  <listitem>
   <para>
    开发人员可以在同一环境中测试其代码，就如同在生产环境中使用时一样。
   </para>
  </listitem>
 </itemizedlist>
 <para>
  下一节提供了有关为应用程序创建容器映像的示例和建议。在继续操作之前，请确保已按照<xref linkend="sec-download-prebuild-images" role="internalbook"/>中所述激活 <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> 基本映像。
 </para>
 <sect1 xml:id="sec-application-with-specific-dependencies">
  <title>运行采用特定软件包版本的应用程序</title>

  <para>
   如果您的应用程序所需的软件包版本不同于系统上安装的软件包版本，您可以创建一个包含应用程序所需软件包版本的容器映像。下面的示例 <filename>Dockerfile</filename> 允许使用较旧的 <literal>example</literal> 软件包版本构建基于最新 <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> 版本的映像：
  </para>

<screen>FROM registry.suse.com/suse/sle15
LABEL maintainer=tux
RUN zypper ref &amp;&amp; zypper in -f example-1.0.0-0
COPY application.rpm /tmp/
RUN zypper --non-interactive in /tmp/application.rpm
ENTRYPOINT ["/etc/bin/application"]
CMD ["-i"]</screen>

  <para>
   通过在 <filename>Dockerfile</filename> 所在的目录中运行以下命令来构建映像：
  </para>

<screen><prompt>&gt; </prompt>docker build --tag tux_application:latest .</screen>

  <para>
   上面显示的 <filename>Dockerfile</filename> 示例会在 <command>docker build</command> 运行期间执行以下操作：
  </para>

  <orderedlist>
   <listitem>
    <para>
     更新 <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> 软件源。
    </para>
   </listitem>
   <listitem>
    <para>
     安装所需的 <literal>example</literal> 软件包版本。
    </para>
   </listitem>
   <listitem>
    <para>
     将应用程序软件包复制到映像。必须在构建环境中放置二进制 RPM。
    </para>
   </listitem>
   <listitem>
    <para>
     将应用程序解包。
    </para>
   </listitem>
   <listitem>
    <para>
     最后两个步骤会在容器启动后运行应用程序。
    </para>
   </listitem>
  </orderedlist>

  <para>
   成功构建 <literal>tux_application</literal> 映像后，可使用以下命令启动基于新映像的容器：
  </para>

<screen><prompt>&gt; </prompt>docker run -it --name application_instance tux_application:latest</screen>

  <para>
   请记住，关闭应用程序后，容器也会退出。
  </para>
 </sect1>
 <sect1 xml:id="sec-applications-with-configuration">
  <title>运行采用特定配置的应用程序</title>

  <para>
   要运行使用不同配置的实例，请创建派生映像并在其中包含附加配置。例如，如果您的应用程序名为 <emphasis>example</emphasis> 且可以使用 <filename>/etc/example/configuration_example</filename> 文件来配置，则您可以使用：
  </para>

<screen>FROM registry.suse.com/suse/sle15 <co xml:id="co-dockerfile-specificconf-from"/>
RUN zypper ref &amp;&amp; zypper --non-interactive in example <co xml:id="co-dockerfile-specificconf-refreshinstall"/>
ENV BACKUP=/backup <co xml:id="co-dockerfile-specificconf-env"/>
RUN mkdir -p $BACKUP <co xml:id="co-dockerfile-specificconf-mkdir"/>
COPY configuration_example /etc/example/ <co xml:id="co-dockerfile-specificconf-configuration"/>
ENTRYPOINT ["/etc/bin/example"] <co xml:id="co-dockerfile-specificconf-entrypoint"/></screen>

  <para>
   上面的示例 <filename>Dockerfile</filename> 会执行以下操作：
  </para>

  <calloutlist>
   <callout arearefs="co-dockerfile-specificconf-from">
    <para>
     从 <xref linkend="sec-download-prebuild-images" role="internalbook"/> 中提取 <literal>sle15</literal> 基本映像。
    </para>
   </callout>
   <callout arearefs="co-dockerfile-specificconf-refreshinstall">
    <para>
     刷新 <emphasis>example</emphasis> 的软件源和安装。
    </para>
   </callout>
   <callout arearefs="co-dockerfile-specificconf-env">
    <para>
     设置 <literal>BACKUP</literal> 环境变量（在从映像启动的容器中持久保存的变量）。您始终可以在运行容器时通过指定新值来重写该变量的值。
    </para>
   </callout>
   <callout arearefs="co-dockerfile-specificconf-mkdir">
    <para>
     创建 <literal>/backup</literal> 目录。
    </para>
   </callout>
   <callout arearefs="co-dockerfile-specificconf-configuration">
    <para>
     将 <filename>configuration_example</filename> 复制到映像。
    </para>
   </callout>
   <callout arearefs="co-dockerfile-specificconf-entrypoint">
    <para>
     运行 <literal>example</literal> 应用程序。
    </para>
   </callout>
  </calloutlist>

  <para>
   现在可以构建映像。成功构建后，可以基于刚刚创建的映像运行容器。
  </para>
 </sect1>
 <sect1 xml:id="sec-run-application-with-volumes">
  <title>在应用程序与主机系统之间共享数据</title>

  <para>
   Docker 开源引擎允许使用<emphasis>卷</emphasis>在主机与容器之间共享数据。您可以直接在 <filename>Dockerfile</filename> 中指定挂载点，但不能在 <filename>Dockerfile</filename> 中指定主机系统上的目录，因为该目录在构建时可能无法访问。在主机系统上的 <literal>/var/lib/docker/volumes/</literal> 下找到挂载的目录。
  </para>

  <note>
   <title>丢弃对要共享的目录所做的更改</title>
   <para>
    使用 <literal>VOLUME</literal> 指令指定挂载点后，将会丢弃使用 <literal>RUN</literal> 指令对目录所做的所有更改。指定挂载点后，该卷将成为临时容器的一部分，而成功构建后会去除该临时容器。这表示要使某些操作生效，必须在指定挂载点<emphasis>之前</emphasis>执行这些操作。例如，如果您需要更改权限，请先进行更改，然后再在 <filename>Dockerfile</filename> 中将目录指定为挂载点。
   </para>
  </note>

  <para>
   运行容器时，使用 <literal>-v</literal> 选项指定主机系统上的特定挂载点：
  </para>

<screen><prompt>&gt; </prompt>docker run -it --name testing -v /home/tux/data:/data sles12sp4:latest /bin/bash</screen>

  <note>
   <para>
    如果您在容器中指定相同的挂载点，<literal>-v</literal> 选项会重写 <literal>VOLUME</literal> 指令。
   </para>
  </note>

  <para>
   下面的示例映像包含一个从主机文件系统读取 Web 内容的 Web 服务器。<filename>Dockerfile</filename> 可能如下所示：
  </para>

<screen>FROM registry.suse.com/suse/sles12sp4
RUN zypper ref &amp;&amp; zypper --non-interactive in apache2
COPY apache2 /etc/sysconfig/
RUN chown -R admin /data
EXPOSE 80
VOLUME /data
ENTRYPOINT ["apache2ctl"]</screen>

  <para>
   上面的示例将 Apache Web 服务器安装到映像，并将整个配置复制到该映像。<literal>data</literal> 目录由 <emphasis>admin</emphasis> 用户拥有，用作储存网页的挂载点。
  </para>
 </sect1>
 <sect1 xml:id="sec-docker-daemons">
  <title>在后台运行的应用程序</title>

  <para>
   如果您的应用程序需要作为守护程序在后台运行，或者作为公开通讯端口的应用程序运行，您可以在后台运行容器。
  </para>

  <para>
   公开端口的应用程序的示例 <filename>Dockerfile</filename> 如下所示：
  </para>

  <example xml:id="ex-docker-dockerfile-apache2">
   <title>构建 Apache2 Web 服务器容器 (<filename>Dockerfile</filename>)</title>
<screen>FROM registry.suse.com/suse/sle15 <co xml:id="co-dockerfile-apache2-from"/>
LABEL maintainer=tux <co xml:id="co-dockerfile-apache2-maintainer"/>
ADD etc/ /etc/zypp/ <co xml:id="co-dockerfile-apache2-repos-services"/>
RUN zypper refs &amp;&amp; zypper refresh <co xml:id="co-dockerfile-apache2-refresh"/>
RUN zypper --non-interactive in apache2 <co xml:id="co-dockerfile-apache2-install"/>
RUN echo "The Web server is running" &gt; /srv/www/htdocs/test.html <co xml:id="co-dockerfile-apache2-echo"/>
# COPY data/* /srv/www/htdocs/ <co xml:id="co-dockerfile-apache2-copy"/>
EXPOSE 80 <co xml:id="co-dockerfile-apache2-expose"/>
ENTRYPOINT ["/usr/sbin/httpd"]
CMD ["-D", "FOREGROUND"]</screen>
   <calloutlist>
    <callout arearefs="co-dockerfile-apache2-from">
     <para>
      按<xref linkend="sec-download-prebuild-images" role="internalbook"/>中所述提取基本映像。
     </para>
    </callout>
    <callout arearefs="co-dockerfile-apache2-maintainer">
     <para>
      映像的维护者（可选）。
     </para>
    </callout>
    <callout arearefs="co-dockerfile-apache2-repos-services">
     <para>
      要复制到 <filename>/etc/zypp/repos.d</filename> 和 <filename>/etc/zypp/services.d</filename> 的软件源与服务文件。如此这些文件便可在容器中的主机上使用。
     </para>
    </callout>
    <callout arearefs="co-dockerfile-apache2-refresh">
     <para>
      用于刷新软件源和服务的命令。
     </para>
    </callout>
    <callout arearefs="co-dockerfile-apache2-install">
     <para>
      用于安装 Apache2 的命令。
     </para>
    </callout>
    <callout arearefs="co-dockerfile-apache2-echo">
     <para>
      用于调试的测试代码行。如果一切符合预期，则可以删除此行。
     </para>
    </callout>
    <callout arearefs="co-dockerfile-apache2-copy">
     <para>
      <literal>COPY</literal> 指令将主机系统中的数据复制到服务器所用容器中的目录。前导井号字符 (<literal>#</literal>) 会将此行标记为注释，系统不会执行此行。
     </para>
    </callout>
    <callout arearefs="co-dockerfile-apache2-expose">
     <para>
      Apache Web 服务器的公开端口。
     </para>
    </callout>
   </calloutlist>
  </example>

  <note>
   <title>确保容器映像所用的端口未被使用</title>
   <para>
    要使用端口 80，请确保主机中没有任何其他服务器软件在此端口上运行。
   </para>
  </note>

  <para>
   要使用容器，请执行以下操作：
  </para>

  <procedure xml:id="pro-docker-apache2">
   <title>测试 Apache2 Web 服务器</title>
   <step>
    <para>
     准备好用于执行构建过程的主机系统。
    </para>
    <substeps>
     <step>
      <para>
       确保主机系统已订阅 <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> 的 <guimenu>Server Applications 模块</guimenu>。要查看已安装的模块或安装其他模块，请打开 YaST 并选择<guimenu>添加系统扩展或模块</guimenu>。
      </para>
     </step>
     <step>
      <para>
       确保已按<xref linkend="sec-download-prebuild-images" role="internalbook"/>中所述安装了 SUSE 注册表中的 SUSE Linux Enterprise 映像。
      </para>
     </step>
     <step>
      <para>
       将 <xref linkend="ex-docker-dockerfile-apache2" role="internalbook"/> 中的 <filename>Dockerfile</filename> 保存到 <filename class="directory">docker</filename> 目录中。
      </para>
     </step>
     <step>
      <para>
       在容器中，您需要访问已在主机上注册的软件源和服务。要使这些软件源和服务可用，请将主机中其对应的文件复制到 <filename class="directory">docker/etc</filename> 目录：
      </para>
<screen><prompt>&gt; </prompt>cd docker
<prompt>&gt; </prompt>mkdir etc
<prompt>&gt; </prompt><command>sudo</command> cp -a /etc/zypp/{repos.d,services.d} etc/</screen>
      <para>
       您也可以不复制所有软件源和服务文件，只复制容器所需的一部分文件。
      </para>
     </step>
     <step>
      <para>
       将网站数据（例如 HTML 文件）添加到 <filename>docker/data</filename> 目录中。此目录的内容将复制到容器映像，从而由 Web 服务器发布。
      </para>
     </step>
    </substeps>
   </step>
   <step xml:id="st-docker-apache2-build">
    <para>
     构建容器。使用 <option>-t</option> 选项为映像设置标签（在下面的命令中，标签为 <literal>tux/apache2</literal>）：
    </para>
<screen><prompt>&gt; </prompt><command>sudo</command> docker build -t tux/apache2 .</screen>
    <para>
     Docker 开源引擎会执行 <filename>Dockerfile</filename> 中提供的指令：提取基本映像、复制内容、刷新软件源、安装 Apache2 等
    </para>
   </step>
   <step>
    <para>
     从上一步中创建的映像启动容器实例：
    </para>
<screen><prompt>&gt; </prompt>docker run --detach --interactive --tty tux/apache2</screen>
    <para>
     Docker 开源引擎将返回容器 ID，例如：
    </para>
<screen>7bd674eb196d330d50f8a3cfc2bc61a243a4a535390767250b11a7886134ab93</screen>
   </step>
   <step>
    <para>
     将浏览器指向 <uri>http://localhost:80/test.html</uri>。您应该会看到消息 <literal>Web 服务器正在运行</literal>。
    </para>
   </step>
   <step>
    <para>
     要查看正在运行的容器的概览，请使用：
    </para>
<screen><prompt>&gt; </prompt>docker ps --latest
CONTAINER ID        IMAGE               COMMAND                  [...]
<emphasis role="bold">7bd674eb196d</emphasis>
tux/apache2         "/usr/sbin/httpd -..."   [...]</screen>
    <para>
     要停止并删除容器，请运行以下命令：
    </para>
<screen><prompt>&gt; </prompt>docker rm --force 7bd674eb196d</screen>
   </step>
  </procedure>

  <para>
   您可以执行以下步骤来使用生成的容器通过 Apache2 Web 服务器提供数据：
  </para>

  <procedure>
   <title>使用您自己的数据创建容器</title>
   <step>
    <para>
     在 <filename>Dockerfile</filename> 中：
    </para>
    <itemizedlist>
     <listitem>
      <para>
       在以 <literal>RUN echo</literal> 开头的行的前面添加 <literal>#</literal> 字符以注释掉该行（<xref linkend="ex-docker-dockerfile-apache2" role="internalbook"/>中的 <xref linkend="co-dockerfile-apache2-echo" role="internalbook"/>）。
      </para>
     </listitem>
     <listitem>
      <para>
       去除以 <literal>COPY</literal> 开头的行的前导 <literal>#</literal> 字符以取消注释该行（<xref linkend="ex-docker-dockerfile-apache2" role="internalbook"/>中的 <xref linkend="co-dockerfile-apache2-copy" role="internalbook"/>）。
      </para>
     </listitem>
    </itemizedlist>
   </step>
   <step>
    <para>
     按<xref linkend="pro-docker-apache2" xrefstyle="select:label" role="internalbook"/> 的<xref linkend="st-docker-apache2-build" role="internalbook"/> 中所述重构建该映像。
    </para>
   </step>
   <step>
    <para>
     在分离模式下运行映像：
    </para>
<screen><prompt>&gt; </prompt>docker run --detach --interactive --tty tux/apache2</screen>
    <para>
     Docker 开源引擎将返回容器 ID，例如：
    </para>
<screen>e43fff4ae9832ecdb7677c058a73039d7610c32145a1d9b6ad0a4ed52b5c4dc7</screen>
   </step>
  </procedure>

  <para>
   要查看发布的数据，请将浏览器指向 <uri>http://localhost:80/test.html</uri>。
  </para>

  <para>
   为了避免将网站数据复制到容器中，请与容器共享主机的某个目录。有关详细信息，请参见 <link xlink:href="https://docs.docker.com/storage/volumes/"/>。
  </para>
 </sect1>
</chapter>
 <chapter xml:base="containers-docker-use.xml" xml:id="cha-working-with-containers" xml:lang="zh-cn" version="5.0">
 <info>
  <title>使用容器</title>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
 </info>
 <para>
  创建自定义映像后，您可以基于该映像启动容器。您可以使用 <command>docker run</command> 命令运行映像的实例。该命令接受多种参数：
 </para>
 <itemizedlist>
  <listitem>
   <para>
    容器名称（建议为您的容器命名）
   </para>
  </listitem>
  <listitem>
   <para>
    容器的用户
   </para>
  </listitem>
  <listitem>
   <para>
    挂载点
   </para>
  </listitem>
  <listitem>
   <para>
    主机名等
   </para>
  </listitem>
 </itemizedlist>
 <sect1 xml:id="sec-start-containers">
  <title>启动和去除容器</title>

  <para>
   当容器的主进程完成时，容器通常会退出。例如，如果某个容器启动了特定应用程序，该应用程序退出时，该容器就会退出。您可以运行以下命令再次启动容器：
  </para>

<screen><prompt>&gt; </prompt>docker start -ai &lt;container name&gt;</screen>

  <para>
   要去除未使用的容器，请运行以下命令：
  </para>

<screen><prompt>&gt; </prompt>docker rm &lt;container name&gt;</screen>
 </sect1>
</chapter>
 <chapter xml:base="containers-podman-overview.xml" xml:id="cha-podman-overview" xml:lang="zh-cn" version="5.0">
 <info>
  <title>Podman 概述</title>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
 </info>
 <para>
  <link xlink:href="https://podman.io/">Podman</link> 是 Pod Manager 工具的简称。它是一个无守护程序的容器引擎，用于在 Linux 系统上开发、管理和运行 Open Container Initiative (OCI) 容器，可以直接取代 Docker。Podman 是 openSUSE Kubic（基于 openSUSE 构建的 Kubernetes 认证发行套件）中的默认容器运行时。您可以使用 Podman 通过 Dockerfile 和一系列与 Docker 开源引擎相同的命令来创建符合 OCI 标准的容器映像。例如，<literal>docker build</literal> 能够执行的任务也可以通过 <literal>podman build</literal> 命令来执行。换言之，Podman 可以直接替代 Docker 开源引擎。
 </para>
 <para>
  从 Docker 开源引擎迁移到 Podman 不需要对既有的工作流程进行任何更改。您无需重构建映像，可以使用完全相同的命令来构建和管理映像，以及运行和控制容器。
 </para>
 <para>
  Podman 与 Docker 开源引擎的差别体现在两个重要方面。
 </para>
 <itemizedlist>
  <listitem>
   <para>
    Podman 不使用守护程序，因此容器引擎将直接与映像注册表、容器和映像储存服务交互。由于 Podman 没有守护程序，因此它提供了与 systemd 的集成。这样就可以通过 systemd 单元来控制容器。您可为现有容器创建这些单元，以及生成可启动容器的单元（如果系统中不存在这些单元）。此外，Podman 可以在容器内部运行 systemd。
   </para>
  </listitem>
  <listitem>
   <para>
    由于 Podman 依赖于多个名称空间（用于为 Linux 进程提供隔离机制），因此无需 root 特权就能创建和运行容器。这意味着 Podman 既可以在 root 模式下运行，也可以在非特权环境中运行。此外，非特权用户创建的容器在主机上无法获得高于容器创建者的特权。
   </para>
  </listitem>
 </itemizedlist>
 <sect1 xml:id="cha-podman-install">
  <title>Podman 安装</title>

  <para>
   要安装 Podman，请运行 <command>sudo zypper in podman</command> 命令。然后运行 <command>podman --version</command> 检查 Podman 是否已成功安装。
  </para>

  <para>
  要在没有 root 特权的情况下运行 Podman，必须将 subuids 和 subgids 指派给运行 Podman 的用户。如果 <filename>/etc/subuid</filename> 文件中没有项，请使用以下命令添加项：
  </para>

<screen><prompt>&gt; </prompt> sudo usermod --add-subuids 100000-165535 --add-subgids 100000-165535 <replaceable>USER</replaceable></screen>

  <para>
   要启用更改，请重引导计算机或停止当前用户的会话。要执行后一种操作，请运行 <command>loginctl list-sessions | grep $USER</command> 并记下会话 ID。然后运行 <command>loginctl kill-session <replaceable>会话 ID</replaceable></command> 以终止会话。
  </para>

  <para>
   以上命令会在主机上定义一系列本地 UID，分配给容器中的用户的 UID 将映射到这些 UID。请注意，为不同用户定义的范围不得重叠。同样重要的是，这些范围不能重复使用现有本地用户或组的 UID。默认情况下，在 SLES 15 中使用 <command>useradd</command> 命令添加用户会自动分配 subUID 和 subGID 范围。
  </para>

  <para>
   在 SUSE Linux Enterprise Server 上以无 root 权限模式使用 Podman 运行容器可能会失败，因为容器需要拥有 SUSE Customer Center 身份凭证的读取访问权限。例如，使用 <command>podman run -it --rm registry.suse.com/suse/sle15 bash</command> 命令运行容器，然后执行 <command>zypper ref</command> 会出现以下错误消息：
  </para>

<screen>Refreshing service 'container-suseconnect-zypp'.
Problem retrieving the repository index file for service 'container-suseconnect-zypp':
[container-suseconnect-zypp|file:/usr/lib/zypp/plugins/services/container-suseconnect-zypp]
Warning: Skipping service 'container-suseconnect-zypp' because of the above error.
Warning: There are no enabled repositories defined.
Use 'zypper addrepo' or 'zypper modifyrepo' commands to add or enable repositories</screen>

  <para>
   要解决该问题，请在主机上运行以下命令为当前用户授予所需的访问权限：
  </para>

<screen><prompt>&gt; </prompt>sudo setfacl -m u:$USER:r /etc/zypp/credentials.d/*</screen>

  <para>
   注销然后重新登录以应用更改。
  </para>

  <para>
   要为多个用户授予所需的访问权限，请使用 <command>groupadd <replaceable>GROUPNAME</replaceable></command> 命令创建一个专用组。然后使用以下命令更改 <filename>/etc/zypp/credentials.d/</filename> 目录中的文件的组所有权和权限。
  </para>

<screen><prompt>&gt; </prompt>sudo chgrp <replaceable>GROUPNAME</replaceable> /etc/zypp/credentials.d/*
<prompt>&gt; </prompt>sudo chmod g+r /etc/zypp/credentials.d/*</screen>

  <para>
   之后，您便可以通过将特定用户添加到这个创建的组来为其授予写入访问权限。
  </para>
 </sect1>
 <sect1 xml:id="cha-podman-use">
  <title>Podman 基本用法</title>

  <para>
   由于 Podman 与 Docker 开源引擎兼容，因此它具有相同的命令和选项。例如，<command>podman pull</command> 命令可从注册表中提取容器映像，而 <command>podman build</command> 命令可用于构建映像。
  </para>

  <para>
   与 Docker 开源引擎相比，Podman 的其中一项优势是可配置为搜索多个注册表。要使 Podman 首先搜索 SUSE 注册表并使用 Docker Hub 作为回退搜索源，请在 <filename>/etc/containers/registries.conf</filename> 文件中添加以下配置：
  </para>

<screen>[registries.search]
registries = ["registry.suse.com", "docker.io"]</screen>

  <para>
   与 Docker 开源引擎类似，Podman 能够以交互模式运行容器，使您可以检查和处理映像。要以交互模式运行 <literal>suse/sle15</literal>，请使用以下命令：
  </para>

<screen><prompt>&gt; </prompt>podman run --rm -ti suse/sle15</screen>

  <sect2 xml:id="cha-podman-build-images">
   <title>使用 Podman 构建映像</title>
   <para>
    Podman 可以基于 Dockerfile 构建映像。<command>podman build</command> 命令的行为与 <command>docker build</command> 相同，并且接受相同的选项。
   </para>
   <para>
    Podman 的配套工具 Buildah 提供了另一种构建映像的方式。有关 Buildah 的更多信息，请参见<xref linkend="cha-buildah-overview" role="internalbook"/>。
   </para>
  </sect2>
 </sect1>
</chapter>
 <chapter xml:base="containers-buildah-overview.xml" xml:id="cha-buildah-overview" xml:lang="zh-cn" version="5.0">
 <info>
  <title>Buildah 概述</title>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
 </info>
 <para>
  <link xlink:href="https://buildah.io/">Buildah</link> 是用于构建符合 OCI 标准的容器映像的工具。Buildah 可处理以下任务：
 </para>
 <itemizedlist>
  <listitem>
   <para>
    从头开始或者基于现有映像创建容器。
   </para>
  </listitem>
  <listitem>
   <para>
    基于工作容器或者通过 Dockerfile 创建映像。
   </para>
  </listitem>
  <listitem>
   <para>
    构建 OCI 或 Docker 开源引擎映像格式的映像。
   </para>
  </listitem>
  <listitem>
   <para>
    挂载工作容器的根文件系统以进行操作。
   </para>
  </listitem>
  <listitem>
   <para>
    使用容器根文件系统的已更新内容作为文件系统层来创建新映像。
   </para>
  </listitem>
  <listitem>
   <para>
    删除工作容器或映像，以及重命名本地容器。
   </para>
  </listitem>
 </itemizedlist>
 <para>
  与 Docker 开源引擎相比，Buildah 具有以下几项优势：
 </para>
 <itemizedlist>
  <listitem>
   <para>
    使用该工具可以挂载工作容器的文件系统，使之可供主机访问。
   </para>
  </listitem>
  <listitem>
   <para>
    通过使用 Buildah 子命令的脚本（而不是 Containerfile 或 Dockerfile）可以实现使用 Buildah 构建容器映像的过程的自动化。
   </para>
  </listitem>
  <listitem>
   <para>
    与 Podman 类似，Buildah 不需要运行守护程序，可由非特权用户使用。
   </para>
  </listitem>
  <listitem>
   <para>
    可以在不挂载 Docker 套接字的情况下在容器内部构建映像，这样可以提高安全性。
   </para>
  </listitem>
 </itemizedlist>
 <sect1 xml:id="cha-podman-buildah">
  <title>Podman 和 Buildah</title>

  <para>
   Podman 和 Buildah 都可用于构建容器映像。虽然 Podman 可让用户使用 Dockerfile 构建映像，但 Buildah 提供的映像构建选项和功能更广泛。
  </para>
 </sect1>
 <sect1 xml:id="cha-buildah-install">
  <title>Buildah 安装</title>

  <para>
   要安装 Buildah，请运行 <command>sudo zypper in buildah</command> 命令。运行 <command>buildah --version</command> 命令检查是否已成功安装 Buildah。
  </para>

  <para>
   如果您已安装 Podman 并将其设置为在无 root 权限模式下使用，则无需进行进一步配置，就能在非特权环境中使用 Buildah。如果需要为 Buildah 启用无 root 权限模式，请运行以下命令：
  </para>

<screen><prompt>&gt; </prompt>sudo usermod --add-subuids 100000-165535 --add-subgids 100000-165535 <replaceable>USER</replaceable></screen>

  <para>
   此命令将为当前用户启用无 root 权限模式。运行该命令后，注销然后重新登录即可启用更改。
  </para>

  <para>
   以上命令会在主机上定义一系列本地 UID，分配给容器中的用户的 UID 将映射到这些 UID。请注意，为不同用户定义的范围不得重叠。同样重要的是，这些范围不能重复使用任何现有本地用户或组的 UID。默认情况下，在 SLES 15 中使用 <command>useradd</command> 命令添加用户会自动分配 subUID 和 subGID 范围。
  </para>

  <note>
   <title>无 root 权限模式下的 Buildah</title>
   <para>
    在无 root 权限模式下，Buildah 命令必须在用户的已修改用户名称空间中执行。要进入此用户名称空间，请运行 <command>buildah unshare</command> 命令。否则 <command>buildah mount</command> 命令将会失败。
   </para>
  </note>
 </sect1>
 <sect1 xml:id="cha-buildah-build-images">
  <title>使用 Buildah 构建映像</title>

  <para>
   Buildah 使用单独的命令来构建映像，而不使用包含指令的特殊文件。使用 Buildah 构建映像涉及以下几个步骤：基于指定的映像运行容器，编辑容器（安装软件包、配置设置等），配置容器选项，以及将所有更改提交到新映像中。虽然此过程可能包括其他步骤（例如，挂载并使用容器的文件系统），但基本的工作流程逻辑是相同的。
  </para>

  <para>
   下面的示例可让您大致了解如何使用 Buildah 构建映像。
  </para>

  <example>
   <title>构建映像的示例</title>
<screen>container=$(buildah from suse/sle15) <co xml:id="ctr"/>
buildah run $container zypper up <co xml:id="run"/>
buildah copy $container . /usr/src/example/ <co xml:id="copy"/>
buildah config --workingdir /usr/src/example $container
buildah config --port 8000 $container
buildah config --cmd "php -S 0.0.0.0:8000" $container <co xml:id="config"/>
buildah config --label maintainer="Tux" $container
buildah config --label version="0.1" $container <co xml:id="label"/>
buildah commit $container example <co xml:id="commit"/>
buildah rm $container <co xml:id="rm"/>
</screen>
   <calloutlist>
    <callout arearefs="ctr">
     <para>
      基于指定的映像（在本例中为 <literal>sle15</literal>）运行容器（也称为工作容器）。
     </para>
    </callout>
    <callout arearefs="run">
     <para>
      在刚刚创建的工作容器中运行命令。在此示例中，Buildah 运行了 <command>zypper up</command> 命令。
     </para>
    </callout>
    <callout arearefs="copy">
     <para>
      将文件和目录复制到容器中的指定位置。在此示例中，Buildah 将当前目录的全部内容复制到 <filename>/usr/src/example/</filename>。
     </para>
    </callout>
    <callout arearefs="config">
     <para>
      <command>buildah config</command> 命令指定容器选项。其中包括定义工作目录、公开端口以及在容器内部运行命令。
     </para>
    </callout>
    <callout arearefs="label">
     <para>
      <command>buildah config --label</command> 命令用于向容器指派标签。标签可能包括 <literal>maintainer</literal>、<literal>description</literal>、<literal>version</literal> 等。
     </para>
    </callout>
    <callout arearefs="commit">
     <para>
      通过提交所有修改基于工作容器创建映像。
     </para>
    </callout>
    <callout arearefs="rm">
     <para>
      删除工作容器。
     </para>
    </callout>
   </calloutlist>
  </example>
 </sect1>
</chapter>
 <chapter xml:base="containers-orchestration.xml" xml:id="cha-orchestration" xml:lang="zh-cn" version="5.0">
 <info>
  <title>容器编制</title>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
 </info>
 <sect1 xml:id="sec-pod-deployment-with-podman">
  <title>使用 Podman 部署 Pod</title>

  <para>
   除了构建和管理映像外，使用 Podman 还可以处理 Pod。Pod 是由包含共享资源（例如网络接口）的一个或多个容器构成的组。Pod 通常会将包含多个容器的应用程序封装成一个单元。
  </para>

  <para>
   <command>podman pod</command> 可用于创建、删除、查询和检查 Pod。要创建新 Pod，请运行 <command>podman pod create</command> 命令。这会创建一个具有随机名称的 Pod。要列出现有的 Pod，请使用 <command>podman pod list</command> 命令。要查看正在运行的 Pod 列表，请运行 <command>podman ps -a --pod</command>。该命令的输出如下所示（为简洁起见，已省略 <literal>STATUS</literal>和 <literal>CREATED</literal> 列）：
  </para>

<screen>POD ID        NAME                # OF CONTAINERS   INFRA ID
399a120a09ff  suspicious_curie    1                 e57820093817
</screen>

  <para>
   请注意，该命令为 Pod 指派了一个随机名称（在本例中为 <literal>suspicious_curie</literal>）。可以使用 <parameter>--name</parameter> 参数为 Pod 指派所需的名称。
  </para>

  <para>
   要检查 Pod 及其内容，请运行 <command>podman ps -a --pod</command> 命令，然后查看输出（为简洁起见，已省略 <literal>COMMAND</literal>、<literal>CREATED</literal>、<literal>STATUS</literal>、<literal>PORTS</literal> 和 <literal>POD ID</literal> 列）：
  </para>

<screen>CONTAINER ID  IMAGE                 NAMES              PODNAME
e57820093817  k8s.gcr.io/pause:3.2  399a120a09ff-infra suspicious_curie
</screen>

  <para>
   创建的 Pod 包含一个通过 <filename>k8s.gcr.io</filename> 名称标识的 <literal>infra</literal> 容器。此容器的用途是保留与 Pod 关联的名称空间，并使 Podman 能够在 Pod 中添加其他容器。
  </para>

  <para>
   使用 <command>podman run --pod</command> 命令可以运行容器并将其添加到所需的 Pod。例如，下面的命令会运行一个基于 <literal>suse/sle15</literal> 映像的容器，并将该容器添加到 <filename>suspicious_curie</filename> Pod：
  </para>

<screen>podman run -d --pod suspicious_curie registry.suse.com/suse/sle15 sleep 1h</screen>

  <para>
   上面的命令会添加一个休眠 60 分钟然后退出的容器。再次运行 <command>podman ps -a --pod</command> 命令，您应该会看到该 Pod 现在包含两个容器。
  </para>

  <para>
   您可以重启动、停止和启动 Pod 中的容器，而不会影响该 Pod 的整体状态。例如，可以使用 <command>sudo podman stop <replaceable>CONTAINER_NAME</replaceable></command> 命令停止容器。
  </para>

  <para>
   要停止 Pod，请使用 <command>podman pod stop</command> 命令：
  </para>

<screen>podman pod stop suspicious_curie</screen>
 </sect1>
</chapter>
 

 <chapter xml:base="containers-troubleshoot.xml" version="5.0" xml:id="cha-containers-troubleshoot">
 <info>
  <title>查错</title>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
 </info>
 <sect1 xml:id="sec-container-diff">
  <title>使用 container-diff 分析容器映像</title>

  <para>
   如果在 SLE 基本容器映像基础上构建的自定义 Docker 开源引擎容器映像无法按预期方式工作，<package>container-diff</package> 工具可帮助您分析该映像并收集用于查错的相关信息。
  </para>

  <para>
   <package>container-diff</package>可以分析映像的变化，具体方式是计算映像之间的差异并以直观易懂且可处理的格式呈现差异。该工具可以找出系统软件包、语言级软件包和容器映像中文件的差异。
  </para>

  <para>
   <package>container-diff</package>可以处理本地容器映像（使用前缀 <literal>daemon://</literal>）、远程注册表中的映像（使用前缀 <literal>remote://</literal>），以及另存为 <literal>.tar</literal> 存档的映像。可以使用 <package>container-diff</package> 来计算映像的本地版本与远程版本之间的差异。
  </para>

  <para>
   要安装 <package>container-diff</package>，请运行 <command>sudo zypper in container-diff</command> 命令。
  </para>

  <sect2 xml:id="sec-container-diff-basics">
   <title>基本 container-diff 命令</title>
   <para>
    <command>container-diff analyze <replaceable>IMAGE</replaceable></command> 命令针对单个映像运行标准分析。它默认会返回容器映像的哈希和大小。如需可帮助您识别和修复问题的详细信息，请使用特定的分析器。使用 <literal>--type</literal> 参数指定所需的分析器。两个最有用的分析器是 <literal>history</literal>（返回映像层创建说明列表）和 <literal>file</literal>（返回文件系统内容的列表，包括名称、路径和大小）：
   </para>
<screen><prompt>&gt; </prompt>sudo container-diff analyze --type=history daemon://<replaceable>IMAGE</replaceable>
<prompt>&gt; </prompt>sudo container-diff analyze --type=file daemon://<replaceable>IMAGE</replaceable></screen>
   <para>
    要查看所有可用参数及其简要说明，请运行 <command>container-diff analyze --help</command> 命令。
   </para>
   <para>
    使用 <command>container-diff diff</command> 命令可以比较两个容器映像并检查两者的差异。与 <command>container-diff analyze</command> 命令类似，<command>container-diff diff</command> 支持多个参数。下面的示例命令会比较两个映像，并返回有关如何基于 IMAGE_1 创建了 IMAGE_2 的说明列表。
   </para>
<screen><prompt>&gt; </prompt>sudo container-diff diff daemon://<replaceable>IMAGE_1</replaceable> daemon://<replaceable>IMAGE_2</replaceable> --type=history</screen>
   <para>
    要查看所有可用参数及其简要说明，请运行 <command>container-diff diff --help</command> 命令。
   </para>
  </sect2>
 </sect1>
</chapter>
 <chapter xml:base="containers-support.xml" version="5.0" xml:id="cha-containers-support">
 <info>
  <title>兼容性和支持计划</title>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
 </info>
 <sect1 xml:id="sec-sle-container-support-matrix">
  <title>支持信息</title>

  <sect2 xml:id="sec-sle-container-non-sle-host-support">
   <title>对 SLES 主机的支持</title>
   <para>
    请查阅以下支持和兼容性矩阵，确保所需的主机系统和容器组合与系统兼容且受支持。
   </para>
   <para>
    <emphasis role="strong">支持以下第三方容器主机平台。</emphasis>
   </para>
   <informalfigure>
    <mediaobject>
     <imageobject role="fo">
      <imagedata fileref="container_support_matrix.png" width="100%"/>
     </imageobject>
     <imageobject role="html">
      <imagedata fileref="container_support_matrix.png" width="100%"/>
     </imageobject>
    </mediaobject>
   </informalfigure>
   <para>
    在大多数情况下，如果应用程序或其依赖项不直接与特定于内核版本的数据结构（<literal>ioctl</literal>、<literal>/proc</literal>、<literal>/sys</literal>、<literal>routing</literal>、<literal>iptables</literal>、<literal>nftables</literal>、<literal>eBPF</literal> 等）或模块（KVM、OVS、SystemTap 等）交互，则所有 SLE 容器预期都可互操作。仅在非特权用户所需的最常见方案中提供对 <literal>ioctl</literal> 的支持和对 <literal>/proc</literal> 的访问。
   </para>
  </sect2>

  <sect2 xml:id="sec-sle-container-sle-host-support">
   <title>对非 SLES 主机的支持</title>
   <para>
    虽然基于 SUSE 的容器受到完全支持，主机环境中的问题仍必须由主机环境供应商负责处理。SUSE 支持属于 SUSE 基本容器的组件。还支持来自 SUSE 软件源的软件包。容器中的其他组件和应用程序不在 SUSE 支持的范围内。构建派生容器需要订阅 SUSE Linux Enterprise。
   </para>
   <para>
    基于 SUSE Linux Enterprise Server 12 SP5 和 SUSE Linux Enterprise Server 15（所有服务包）的容器根据其官方生命周期和下表所述接受支持。
   </para>
   <informalfigure>
    <mediaobject>
     <imageobject role="fo">
      <imagedata fileref="container_non-sle_support.png" width="100%"/>
     </imageobject>
     <imageobject role="html">
      <imagedata fileref="container_non-sle_support.png" width="100%"/>
     </imageobject>
    </mediaobject>
   </informalfigure>
  </sect2>
 </sect1>
 <sect1 xml:id="sec-sle-container-support-plans">
  <title>支持计划</title>

  <para>
   有三项 SUSE 容器支持的指导原则。
  </para>

  <orderedlist numeration="arabic">
   <listitem>
    <para>
     容器映像生命周期遵循相关产品的生命周期。
    </para>
    <para>
     例如，SLES <phrase role="productnumber"><phrase os="sles;sled">15 SP4</phrase></phrase> 容器映像遵循 SLES <phrase role="productnumber"><phrase os="sles;sled">15 SP4</phrase></phrase> 生命周期。
    </para>
   </listitem>
   <listitem>
    <para>
     容器发布状态还与相关产品的状态相匹配。
    </para>
    <para>
     例如，如果 SLES <phrase role="productnumber"><phrase os="sles;sled">15 SP4</phrase></phrase> 处于 Alpha、Beta、RC 或 GA 阶段，则相关容器具有同样的发布状态。
    </para>
   </listitem>
   <listitem>
    <para>
     容器是使用相关产品中的软件包构建的。
    </para>
    <para>
     例如，SLES <phrase role="productnumber"><phrase os="sles;sled">15 SP4</phrase></phrase> 容器映像是使用与 SLES <phrase role="productnumber"><phrase os="sles;sled">15 SP4</phrase></phrase> 主版本相同的软件包构建的。
    </para>
   </listitem>
  </orderedlist>

  <para>
   有关更多信息，请参见<link xlink:href="https://www.suse.com/lifecycle">产品支持生命周期</link>页面，以及适用于 <link xlink:href="https://registry.suse.com">SUSE 注册表</link>中特定容器映像的文档。
  </para>

  <para>
   容器映像可以处于不同的支持状态，因此对它们的支持可能有限制。有关特定容器映像的更多信息，请参见相应的 <link xlink:href="https://registry.suse.com">SUSE 注册表</link>页面。
  </para>
 </sect1>
 <sect1 xml:id="sec-supported-containers-suse-host">
  <title>SUSE 主机环境中支持的容器</title>

  <para>
   下列支持选项（层）适用于 SUSE 主机环境上的 SUSE Linux Enterprise Server 容器。
  </para>

  <sect2 xml:id="sec-tier-suse-one">
   <title>第一层</title>
   <variablelist>
    <varlistentry>
     <term>由 SUSE 提供的容器</term>
     <listitem>
      <para>
       由 SUSE 提供的容器受到完全支持。此层级适用于容器、主机环境以及支持所涵盖的所有产品。该支持包括标准支持和<link xlink:href="https://www.suse.com/products/long-term-service-pack-support/">长期服务包支持</link> (LTSS)。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>

  <sect2 xml:id="sec-tier-suse-two">
   <title>第二层</title>
   <variablelist>
    <varlistentry>
     <term>由签署了确保联合工程协作协议的合作伙伴提供的容器</term>
     <listitem>
      <para>
       此层级面向重要的独立软件供应商 (ISV)。签署了联合工程协作协议的合作伙伴容器受到完全支持。此层级适用于协议涵盖的容器、主机环境以及支持（包括标准支持和 LTSS）下的所有产品。协议未涵盖的产品属于第三层。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>

  <sect2 xml:id="sec-tier-suse-three">
   <title>第三层</title>
   <variablelist>
    <varlistentry>
     <term>所有其他第三方容器</term>
     <listitem>
      <para>
       SUSE 容器主机环境受到完全支持。但是，与容器供应商所维护的第三方容器相关的问题由相关容器供应商负责处理。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>
 </sect1>
 <sect1 xml:id="sec-supported-container-host-environments">
  <title>支持的容器主机环境</title>

  <para>
   下文述及的支持选项（层）适用于以下容器选项：
  </para>

  <itemizedlist>
   <listitem>
    <para>
     SUSE Linux Enterprise 基本容器
    </para>
   </listitem>
   <listitem>
    <para>
     由 SUSE 提供的容器
    </para>
   </listitem>
   <listitem>
    <para>
     派生自 SLE 基本容器的第三方容器环境
    </para>
   </listitem>
   <listitem>
    <para>
     使用 KIWI（参见<xref linkend="sec-internal-build-tools-kiwi" role="internalbook"/>）和 Open Build Service（参见<xref linkend="sec-internal-build-tools-obs" role="internalbook"/>）从 SLE 软件包构建的第三方容器
    </para>
   </listitem>
  </itemizedlist>

  <sect2 xml:id="sec-tier-one">
   <title>第一层</title>
   <variablelist>
    <varlistentry>
     <term>SUSE 产品</term>
     <listitem>
      <para>
       此层适用于 SUSE Linux Enterprise Server。由 SUSE 提供的容器和主机环境以及支持所涵盖的所有产品受到完全支持。该支持包括标准支持和 LTSS。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>

  <sect2 xml:id="sec-tier-two">
   <title>第二层</title>
   <variablelist>
    <varlistentry>
     <term>签署了确保联合工程协作协议的第三方供应商</term>
     <listitem>
      <para>
       签署了联合工程协作协议的合作伙伴容器和主机环境受到完全支持。此层级适用于协议涵盖的容器、主机环境以及支持（包括标准支持和 LTSS）下的所有产品。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>

  <sect2 xml:id="sec-tier-three">
   <title>第三层</title>
   <variablelist>
    <varlistentry>
     <term>未签署协议的选定第三方供应商</term>
     <listitem>
      <para>
       此层面向由选定第三方供应商提供的环境。虽然基于 SUSE 的容器受到完全支持，主机环境中的问题仍必须由主机环境供应商负责处理。SUSE 支持来自 SUSE 基本容器的组件，还支持来自 SUSE 软件源的软件包。容器中的其他组件和应用程序不在 SUSE 支持的范围内。构建派生容器需要 SLE 订阅。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>

  <sect2 xml:id="sec-tier-four">
   <title>第四层</title>
   <variablelist>
    <varlistentry>
     <term>任何其他容器主机环境</term>
     <listitem>
      <para>
       上述支持层中未提及的任何容器主机环境受到有限支持。相关细节请与 SUSE 支持团队讨论，该团队可能会就问题和建议的备用解决方案进行会审。在任何其他情况下，主机环境中的问题都必须由主机环境供应商负责处理。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>
 </sect1>
 <sect1 xml:id="sec-tech-previews">
  <title>技术预览</title>

  <para>
   标记为技术预览的容器映像由 SUSE 提供，让您有机会在环境中测试新技术并分享反馈。如果您测试了技术预览，请联系 SUSE 代表，以分享您的经验和用例。您的反馈对于我们的未来开发非常有帮助。
  </para>

  <para>
   技术预览存在以下限制：
  </para>

  <itemizedlist>
   <listitem>
    <para>
     技术预览可能在功能上不完整、不稳定或者不适合生产用途。
    </para>
   </listitem>
   <listitem>
    <para>
     技术预览不受支持。
    </para>
   </listitem>
   <listitem>
    <para>
     技术预览可能仅适用于特定的硬件体系结构。
    </para>
   </listitem>
   <listitem>
    <para>
     技术预览的细节和功能可能随时会发生变化。因此，可能无法升级到技术预览的后续版本，而只能全新安装。
    </para>
   </listitem>
   <listitem>
    <para>
     我们随时可能会取消技术预览。例如，SUSE 发现某个预览不符合客户或市场的需求，或者不符合企业标准，就可能会取消该预览。SUSE 不承诺未来将提供此类技术的受支持版本。
    </para>
   </listitem>
  </itemizedlist>

  <para>
   容器映像标记为<literal>技术预览</literal>，并且在 <link xlink:href="https://registry.suse.com">registry.suse.com</link> 上也采用这种标记。此外，作为技术预览提供的容器映像在容器映像元数据中包含 <literal>com.suse.supportlevel="techpreview"</literal> 标签。可以使用 <command>docker inspect</command> 命令或其他容器运行时中的相应命令检查元数据是否包含该标签。
  </para>
 </sect1>
</chapter>
 <appendix xml:base="containers-terminology.xml" version="5.0" xml:id="cha-containers-terminology">
 <info>
  <title>术语</title>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
 </info>
 <variablelist>
  <varlistentry xml:id="Container">
   <term>容器</term>
   <listitem>
    <para>
     <emphasis>容器</emphasis>是基于特定容器映像的正在运行的实例。每个<emphasis>容器</emphasis>都可通过唯一的容器 ID 来识别。
    </para>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="vle-docker-cgroup">
   <term>控制组</term>
   <listitem>
    <para>
     <emphasis>控制组</emphasis>（也称为 <literal>cgroup</literal>）是一项 Linux 内核功能，可用于将任务（进程）及其所有子项聚合或划分成分层组织的组，以管理其资源限制。
    </para>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="Docker-engine">
   <term>Docker 开源引擎</term>
   <listitem>
    <para>
     Docker 开源引擎是一种服务器-客户端类型的应用程序，用于执行与容器相关的所有任务。Docker 开源引擎由以下组件构成：
    </para>
    <itemizedlist>
     <listitem>
      <formalpara>
       <title>守护程序：</title>
       <para>
        Docker 开源引擎的服务器端，负责管理所有 Docker 对象（映像、容器、容器使用的网络连接等）。
       </para>
      </formalpara>
     </listitem>
     <listitem>
      <formalpara>
       <title>REST API：</title>
       <para>
        应用程序可以使用此 API 来直接与守护程序通讯。
       </para>
      </formalpara>
     </listitem>
     <listitem>
      <formalpara>
       <title>CLI 客户端：</title>
       <para>
        可让您与守护程序通讯。如果守护程序与 CLI 客户端在不同的计算机上运行，CLI 客户端可以使用 Docker 开源引擎提供的网络套接字或 REST API 进行通讯。
       </para>
      </formalpara>
     </listitem>
    </itemizedlist>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="Dockerfile">
   <term>Dockerfile</term>
   <listitem>
    <para>
     <emphasis>Dockerfile</emphasis> 提供有关如何构建容器映像的指令。<xref linkend="Docker-engine" role="internalbook"/>会读取 <emphasis>Dockerfile</emphasis> 中的指令，并根据这些指令构建新映像。
    </para>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="Docker-Image">
   <term>映像</term>
   <listitem>
    <para>
     <emphasis>映像</emphasis>是用于创建<emphasis>容器</emphasis>的只读模板。Docker 映像由一系列相互叠加构建的层组成。每个层对应于一项永久性更改，例如，应用程序的一项更新。更改储存在称作 <emphasis>Dockerfile</emphasis> 的文件中。有关更多细节，请参见<link xlink:href="http://docs.docker.com/engine/reference/glossary#image">官方 Docker 文档</link>。
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>容器映像</term>
   <listitem>
    <para>
     <emphasis>容器映像</emphasis>是一个不可更改的静态文件，它包含可执行代码，因此可以在 IT 基础结构上运行独立的进程。映像由系统库、系统工具以及在容器化平台上运行程序所需的其他平台设置组成。容器映像通过在父映像或基本映像上构建的文件系统层进行编译。
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>基本映像</term>
   <listitem>
    <para>
     <emphasis>基本映像</emphasis>是没有父映像的映像。在 Dockerfile 中，基本映像由 <literal>FROM scratch</literal> 指令进行识别。
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>父映像</term>
   <listitem>
    <para>
     充当其他容器映像基础的映像。换言之，如果某个映像不是基本映像，则它派生自父映像。在 Dockerfile 中，<literal>FROM</literal> 指令指向父映像。大多数 Docker 容器都是使用父映像创建的。
    </para>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="vle-docker-namespace">
   <term>名称空间</term>
   <listitem>
    <para>
     Docker 开源引擎为其容器使用 Linux <emphasis>名称空间</emphasis>，这样可以隔离为特定容器保留的资源。
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>工作调度</term>
   <listitem>
    <para>
     在生产环境中，您通常需要使用每个集群节点上有许多容器的群集。容器必须相互协作，因而您需要通过一个框架来自动管理容器。自动管理容器的行为称为容器编制，通常由 Kubernetes 处理。
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>注册表</term>
   <listitem>
    <para>
     <emphasis>注册表</emphasis>是已创建映像的储存区。它通常包含多个<emphasis>软件源</emphasis>。注册表有两种类型：
    </para>
    <itemizedlist>
     <listitem>
      <para>
       公共注册表：任何用户（通常是已注册的用户）都可以下载和使用映像。公共注册表的典型示例是 <link xlink:href="https://hub.docker.com/">Docker Hub</link>。
      </para>
     </listitem>
     <listitem>
      <para>
       专用注册表：仅限特定用户访问，或者从特定专用网络访问。
      </para>
     </listitem>
    </itemizedlist>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>软件源</term>
   <listitem>
    <para>
     <emphasis>软件源</emphasis>是<emphasis>注册表</emphasis>中的映像的储存区。
    </para>
   </listitem>
  </varlistentry>
 </variablelist>
</appendix>
  

 <appendix xml:base="common_legal.xml" version="5.0" role="legal">
 <title>GNU 许可证</title>
 <info>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker/>
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
 </info>
 <para>
  本附录包含 GNU 自由文档许可证版本 1.2。
 </para>
 <?xml-stylesheet href="urn:x-suse:xslt:profiling:docbook50-profile.xsl"
                 type="text/xml"
                 title="Profiling step"?><sect1 xml:base="common_gfdl1.2_i.xml" version="5.0" role="legal">
 <title>GNU free documentation license</title>

 <info>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager"/>
 </info>

 <para>
  Copyright (C) 2000, 2001, 2002 Free Software Foundation, Inc. 51 Franklin St,
  Fifth Floor, Boston, MA 02110-1301 USA. Everyone is permitted to copy and
  distribute verbatim copies of this license document, but changing it is not
  allowed.
 </para>

 <bridgehead renderas="sect4">
    0. PREAMBLE
  </bridgehead>

 <para>
  The purpose of this License is to make a manual, textbook, or other
  functional and useful document "free" in the sense of freedom: to assure
  everyone the effective freedom to copy and redistribute it, with or without
  modifying it, either commercially or non-commercially. Secondarily, this
  License preserves for the author and publisher a way to get credit for their
  work, while not being considered responsible for modifications made by
  others.
 </para>

 <para>
  This License is a kind of "copyleft", which means that derivative works of
  the document must themselves be free in the same sense. It complements the
  GNU General Public License, which is a copyleft license designed for free
  software.
 </para>

 <para>
  We have designed this License to use it for manuals for free software,
  because free software needs free documentation: a free program should come
  with manuals providing the same freedoms that the software does. But this
  License is not limited to software manuals; it can be used for any textual
  work, regardless of subject matter or whether it is published as a printed
  book. We recommend this License principally for works whose purpose is
  instruction or reference.
 </para>

 <bridgehead renderas="sect4">
    1. APPLICABILITY AND DEFINITIONS
  </bridgehead>

 <para>
  This License applies to any manual or other work, in any medium, that
  contains a notice placed by the copyright holder saying it can be distributed
  under the terms of this License. Such a notice grants a world-wide,
  royalty-free license, unlimited in duration, to use that work under the
  conditions stated herein. The "Document", below, refers to any such manual or
  work. Any member of the public is a licensee, and is addressed as "you". You
  accept the license if you copy, modify or distribute the work in a way
  requiring permission under copyright law.
 </para>

 <para>
  A "Modified Version" of the Document means any work containing the Document
  or a portion of it, either copied verbatim, or with modifications and/or
  translated into another language.
 </para>

 <para>
  A "Secondary Section" is a named appendix or a front-matter section of the
  Document that deals exclusively with the relationship of the publishers or
  authors of the Document to the Document's overall subject (or to related
  matters) and contains nothing that could fall directly within that overall
  subject. (Thus, if the Document is in part a textbook of mathematics, a
  Secondary Section may not explain any mathematics.) The relationship could be
  a matter of historical connection with the subject or with related matters,
  or of legal, commercial, philosophical, ethical or political position
  regarding them.
 </para>

 <para>
  The "Invariant Sections" are certain Secondary Sections whose titles are
  designated, as being those of Invariant Sections, in the notice that says
  that the Document is released under this License. If a section does not fit
  the above definition of Secondary then it is not allowed to be designated as
  Invariant. The Document may contain zero Invariant Sections. If the Document
  does not identify any Invariant Sections then there are none.
 </para>

 <para>
  The "Cover Texts" are certain short passages of text that are listed, as
  Front-Cover Texts or Back-Cover Texts, in the notice that says that the
  Document is released under this License. A Front-Cover Text may be at most 5
  words, and a Back-Cover Text may be at most 25 words.
 </para>

 <para>
  A "Transparent" copy of the Document means a machine-readable copy,
  represented in a format whose specification is available to the general
  public, that is suitable for revising the document straightforwardly with
  generic text editors or (for images composed of pixels) generic paint
  programs or (for drawings) some widely available drawing editor, and that is
  suitable for input to text formatters or for automatic translation to a
  variety of formats suitable for input to text formatters. A copy made in an
  otherwise Transparent file format whose markup, or absence of markup, has
  been arranged to thwart or discourage subsequent modification by readers is
  not Transparent. An image format is not Transparent if used for any
  substantial amount of text. A copy that is not "Transparent" is called
  "Opaque".
 </para>

 <para>
  Examples of suitable formats for Transparent copies include plain ASCII
  without markup, Texinfo input format, LaTeX input format, SGML or XML using a
  publicly available DTD, and standard-conforming simple HTML, PostScript or
  PDF designed for human modification. Examples of transparent image formats
  include PNG, XCF and JPG. Opaque formats include proprietary formats that can
  be read and edited only by proprietary word processors, SGML or XML for which
  the DTD and/or processing tools are not generally available, and the
  machine-generated HTML, PostScript or PDF produced by some word processors
  for output purposes only.
 </para>

 <para>
  The "Title Page" means, for a printed book, the title page itself, plus such
  following pages as are needed to hold, legibly, the material this License
  requires to appear in the title page. For works in formats which do not have
  any title page as such, "Title Page" means the text near the most prominent
  appearance of the work's title, preceding the beginning of the body of the
  text.
 </para>

 <para>
  A section "Entitled XYZ" means a named sub-unit of the Document whose title
  either is precisely XYZ or contains XYZ in parentheses following text that
  translates XYZ in another language. (Here XYZ stands for a specific section
  name mentioned below, such as "Acknowledgements", "Dedications",
  "Endorsements", or "History".) To "Preserve the Title" of such a section when
  you modify the Document means that it remains a section "Entitled XYZ"
  according to this definition.
 </para>

 <para>
  The Document may include Warranty Disclaimers next to the notice which states
  that this License applies to the Document. These Warranty Disclaimers are
  considered to be included by reference in this License, but only as regards
  disclaiming warranties: any other implication that these Warranty Disclaimers
  may have is void and has no effect on the meaning of this License.
 </para>

 <bridgehead renderas="sect4">
    2. VERBATIM COPYING
  </bridgehead>

 <para>
  You may copy and distribute the Document in any medium, either commercially
  or non-commercially, provided that this License, the copyright notices, and
  the license notice saying this License applies to the Document are reproduced
  in all copies, and that you add no other conditions whatsoever to those of
  this License. You may not use technical measures to obstruct or control the
  reading or further copying of the copies you make or distribute. However, you
  may accept compensation in exchange for copies. If you distribute a large
  enough number of copies you must also follow the conditions in section 3.
 </para>

 <para>
  You may also lend copies, under the same conditions stated above, and you may
  publicly display copies.
 </para>

 <bridgehead renderas="sect4">
    3. COPYING IN QUANTITY
  </bridgehead>

 <para>
  If you publish printed copies (or copies in media that commonly have printed
  covers) of the Document, numbering more than 100, and the Document's license
  notice requires Cover Texts, you must enclose the copies in covers that
  carry, clearly and legibly, all these Cover Texts: Front-Cover Texts on the
  front cover, and Back-Cover Texts on the back cover. Both covers must also
  clearly and legibly identify you as the publisher of these copies. The front
  cover must present the full title with all words of the title equally
  prominent and visible. You may add other material on the covers in addition.
  Copying with changes limited to the covers, as long as they preserve the
  title of the Document and satisfy these conditions, can be treated as
  verbatim copying in other respects.
 </para>

 <para>
  If the required texts for either cover are too voluminous to fit legibly, you
  should put the first ones listed (as many as fit reasonably) on the actual
  cover, and continue the rest onto adjacent pages.
 </para>

 <para>
  If you publish or distribute Opaque copies of the Document numbering more
  than 100, you must either include a machine-readable Transparent copy along
  with each Opaque copy, or state in or with each Opaque copy a
  computer-network location from which the general network-using public has
  access to download using public-standard network protocols a complete
  Transparent copy of the Document, free of added material. If you use the
  latter option, you must take reasonably prudent steps, when you begin
  distribution of Opaque copies in quantity, to ensure that this Transparent
  copy will remain thus accessible at the stated location until at least one
  year after the last time you distribute an Opaque copy (directly or through
  your agents or retailers) of that edition to the public.
 </para>

 <para>
  It is requested, but not required, that you contact the authors of the
  Document well before redistributing any large number of copies, to give them
  a chance to provide you with an updated version of the Document.
 </para>

 <bridgehead renderas="sect4">
    4. MODIFICATIONS
  </bridgehead>

 <para>
  You may copy and distribute a Modified Version of the Document under the
  conditions of sections 2 and 3 above, provided that you release the Modified
  Version under precisely this License, with the Modified Version filling the
  role of the Document, thus licensing distribution and modification of the
  Modified Version to whoever possesses a copy of it. In addition, you must do
  these things in the Modified Version:
 </para>

 <orderedlist numeration="upperalpha" spacing="normal">
  <listitem>
   <para>
    Use in the Title Page (and on the covers, if any) a title distinct from
    that of the Document, and from those of previous versions (which should, if
    there were any, be listed in the History section of the Document). You may
    use the same title as a previous version if the original publisher of that
    version gives permission.
   </para>
  </listitem>
  <listitem>
   <para>
    List on the Title Page, as authors, one or more persons or entities
    responsible for authorship of the modifications in the Modified Version,
    together with at least five of the principal authors of the Document (all
    of its principal authors, if it has fewer than five), unless they release
    you from this requirement.
   </para>
  </listitem>
  <listitem>
   <para>
    State on the Title page the name of the publisher of the Modified Version,
    as the publisher.
   </para>
  </listitem>
  <listitem>
   <para>
    Preserve all the copyright notices of the Document.
   </para>
  </listitem>
  <listitem>
   <para>
    Add an appropriate copyright notice for your modifications adjacent to the
    other copyright notices.
   </para>
  </listitem>
  <listitem>
   <para>
    Include, immediately after the copyright notices, a license notice giving
    the public permission to use the Modified Version under the terms of this
    License, in the form shown in the Addendum below.
   </para>
  </listitem>
  <listitem>
   <para>
    Preserve in that license notice the full lists of Invariant Sections and
    required Cover Texts given in the Document's license notice.
   </para>
  </listitem>
  <listitem>
   <para>
    Include an unaltered copy of this License.
   </para>
  </listitem>
  <listitem>
   <para>
    Preserve the section Entitled "History", Preserve its Title, and add to it
    an item stating at least the title, year, new authors, and publisher of the
    Modified Version as given on the Title Page. If there is no section
    Entitled "History" in the Document, create one stating the title, year,
    authors, and publisher of the Document as given on its Title Page, then add
    an item describing the Modified Version as stated in the previous sentence.
   </para>
  </listitem>
  <listitem>
   <para>
    Preserve the network location, if any, given in the Document for public
    access to a Transparent copy of the Document, and likewise the network
    locations given in the Document for previous versions it was based on.
    These may be placed in the "History" section. You may omit a network
    location for a work that was published at least four years before the
    Document itself, or if the original publisher of the version it refers to
    gives permission.
   </para>
  </listitem>
  <listitem>
   <para>
    For any section Entitled "Acknowledgements" or "Dedications", Preserve the
    Title of the section, and preserve in the section all the substance and
    tone of each of the contributor acknowledgements and/or dedications given
    therein.
   </para>
  </listitem>
  <listitem>
   <para>
    Preserve all the Invariant Sections of the Document, unaltered in their
    text and in their titles. Section numbers or the equivalent are not
    considered part of the section titles.
   </para>
  </listitem>
  <listitem>
   <para>
    Delete any section Entitled "Endorsements". Such a section may not be
    included in the Modified Version.
   </para>
  </listitem>
  <listitem>
   <para>
    Do not retitle any existing section to be Entitled "Endorsements" or to
    conflict in title with any Invariant Section.
   </para>
  </listitem>
  <listitem>
   <para>
    Preserve any Warranty Disclaimers.
   </para>
  </listitem>
 </orderedlist>

 <para>
  If the Modified Version includes new front-matter sections or appendices that
  qualify as Secondary Sections and contain no material copied from the
  Document, you may at your option designate some or all of these sections as
  invariant. To do this, add their titles to the list of Invariant Sections in
  the Modified Version's license notice. These titles must be distinct from any
  other section titles.
 </para>

 <para>
  You may add a section Entitled "Endorsements", provided it contains nothing
  but endorsements of your Modified Version by various parties--for example,
  statements of peer review or that the text has been approved by an
  organization as the authoritative definition of a standard.
 </para>

 <para>
  You may add a passage of up to five words as a Front-Cover Text, and a
  passage of up to 25 words as a Back-Cover Text, to the end of the list of
  Cover Texts in the Modified Version. Only one passage of Front-Cover Text and
  one of Back-Cover Text may be added by (or through arrangements made by) any
  one entity. If the Document already includes a cover text for the same cover,
  previously added by you or by arrangement made by the same entity you are
  acting on behalf of, you may not add another; but you may replace the old
  one, on explicit permission from the previous publisher that added the old
  one.
 </para>

 <para>
  The author(s) and publisher(s) of the Document do not by this License give
  permission to use their names for publicity for or to assert or imply
  endorsement of any Modified Version.
 </para>

 <bridgehead renderas="sect4">
    5. COMBINING DOCUMENTS
  </bridgehead>

 <para>
  You may combine the Document with other documents released under this
  License, under the terms defined in section 4 above for modified versions,
  provided that you include in the combination all of the Invariant Sections of
  all of the original documents, unmodified, and list them all as Invariant
  Sections of your combined work in its license notice, and that you preserve
  all their Warranty Disclaimers.
 </para>

 <para>
  The combined work need only contain one copy of this License, and multiple
  identical Invariant Sections may be replaced with a single copy. If there are
  multiple Invariant Sections with the same name but different contents, make
  the title of each such section unique by adding at the end of it, in
  parentheses, the name of the original author or publisher of that section if
  known, or else a unique number. Make the same adjustment to the section
  titles in the list of Invariant Sections in the license notice of the
  combined work.
 </para>

 <para>
  In the combination, you must combine any sections Entitled "History" in the
  various original documents, forming one section Entitled "History"; likewise
  combine any sections Entitled "Acknowledgements", and any sections Entitled
  "Dedications". You must delete all sections Entitled "Endorsements".
 </para>

 <bridgehead renderas="sect4">
    6. COLLECTIONS OF DOCUMENTS
  </bridgehead>

 <para>
  You may make a collection consisting of the Document and other documents
  released under this License, and replace the individual copies of this
  License in the various documents with a single copy that is included in the
  collection, provided that you follow the rules of this License for verbatim
  copying of each of the documents in all other respects.
 </para>

 <para>
  You may extract a single document from such a collection, and distribute it
  individually under this License, provided you insert a copy of this License
  into the extracted document, and follow this License in all other respects
  regarding verbatim copying of that document.
 </para>

 <bridgehead renderas="sect4">
    7. AGGREGATION WITH INDEPENDENT WORKS
  </bridgehead>

 <para>
  A compilation of the Document or its derivatives with other separate and
  independent documents or works, in or on a volume of a storage or
  distribution medium, is called an "aggregate" if the copyright resulting from
  the compilation is not used to limit the legal rights of the compilation's
  users beyond what the individual works permit. When the Document is included
  in an aggregate, this License does not apply to the other works in the
  aggregate which are not themselves derivative works of the Document.
 </para>

 <para>
  If the Cover Text requirement of section 3 is applicable to these copies of
  the Document, then if the Document is less than one half of the entire
  aggregate, the Document's Cover Texts may be placed on covers that bracket
  the Document within the aggregate, or the electronic equivalent of covers if
  the Document is in electronic form. Otherwise they must appear on printed
  covers that bracket the whole aggregate.
 </para>

 <bridgehead renderas="sect4">
    8. TRANSLATION
  </bridgehead>

 <para>
  Translation is considered a kind of modification, so you may distribute
  translations of the Document under the terms of section 4. Replacing
  Invariant Sections with translations requires special permission from their
  copyright holders, but you may include translations of some or all Invariant
  Sections in addition to the original versions of these Invariant Sections.
  You may include a translation of this License, and all the license notices in
  the Document, and any Warranty Disclaimers, provided that you also include
  the original English version of this License and the original versions of
  those notices and disclaimers. In case of a disagreement between the
  translation and the original version of this License or a notice or
  disclaimer, the original version will prevail.
 </para>

 <para>
  If a section in the Document is Entitled "Acknowledgements", "Dedications",
  or "History", the requirement (section 4) to Preserve its Title (section 1)
  will typically require changing the actual title.
 </para>

 <bridgehead renderas="sect4">
    9. TERMINATION
  </bridgehead>

 <para>
  You may not copy, modify, sublicense, or distribute the Document except as
  expressly provided for under this License. Any other attempt to copy, modify,
  sublicense or distribute the Document is void, and will automatically
  terminate your rights under this License. However, parties who have received
  copies, or rights, from you under this License will not have their licenses
  terminated so long as such parties remain in full compliance.
 </para>

 <bridgehead renderas="sect4">
    10. FUTURE REVISIONS OF THIS LICENSE
  </bridgehead>

 <para>
  The Free Software Foundation may publish new, revised versions of the GNU
  Free Documentation License from time to time. Such new versions will be
  similar in spirit to the present version, but may differ in detail to address
  new problems or concerns. See
  <link xlink:href="http://www.gnu.org/copyleft/">http://www.gnu.org/copyleft/</link>.
 </para>

 <para>
  Each version of the License is given a distinguishing version number. If the
  Document specifies that a particular numbered version of this License "or any
  later version" applies to it, you have the option of following the terms and
  conditions either of that specified version or of any later version that has
  been published (not as a draft) by the Free Software Foundation. If the
  Document does not specify a version number of this License, you may choose
  any version ever published (not as a draft) by the Free Software Foundation.
 </para>

 <bridgehead renderas="sect4">
    ADDENDUM: How to use this License for your documents
  </bridgehead>

<screen>Copyright (c) YEAR YOUR NAME.
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.2
or any later version published by the Free Software Foundation;
with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.
A copy of the license is included in the section entitled “GNU
Free Documentation License”.</screen>

 <para>
  If you have Invariant Sections, Front-Cover Texts and Back-Cover Texts,
  replace the “with...Texts.” line with this:
 </para>

<screen>with the Invariant Sections being LIST THEIR TITLES, with the
Front-Cover Texts being LIST, and with the Back-Cover Texts being LIST.</screen>

 <para>
  If you have Invariant Sections without Cover Texts, or some other combination
  of the three, merge those two alternatives to suit the situation.
 </para>

 <para>
  If your document contains nontrivial examples of program code, we recommend
  releasing these examples in parallel under your choice of free software
  license, such as the GNU General Public License, to permit their use in free
  software.
 </para>
</sect1>
</appendix>
</book>
