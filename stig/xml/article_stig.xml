<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="urn:x-suse:xslt:profiling:docbook50-profile.xsl"
 type="text/xml"
 title="Profiling step"?>
<!DOCTYPE article
[
<!ENTITY % entities SYSTEM "generic-entities.ent">
%entities;
]>
<article xml:id="article-stig"
 xmlns="http://docbook.org/ns/docbook"
 version="5.0"
 xml:lang="en"
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink">
  <title>Hardening &sle; with &stiga;</title>
  <titleabbrev>Hardening &sle; with &stiga;</titleabbrev>
  <info><productname>&productname;</productname><date>
<?dbtimestamp format="B d, Y"?></date>
    <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
      <dm:bugtracker>
        <dm:url>https://bugzilla.suse.com/enter_bug.cgi</dm:url>
        <dm:component>Security</dm:component>
        <dm:product>Documentation</dm:product>
        <dm:assignee>taroth@suse.com</dm:assignee>
      </dm:bugtracker>
      <dm:editurl>https://github.com/SUSE/doc-unversioned/edit/main/stig/xml/</dm:editurl>
      <dm:translation>no</dm:translation>
    </dm:docmanager>
    <abstract>
      <para>
        This document introduces you to auditing and hardening &sle; with the
        &stig; (&stiga;) by the
        <orgname>&disa; (&disaa;)</orgname>
        .
      </para>
    </abstract>
  </info>
  <important xml:id="stig-disclaimer">
    <title>Disclaimer</title>
    <para>
      &suse; seeks to provide customers with quick and easy guides that can
      assist them in maintaining security compliance. Implementation of the
      settings contained within this guide without its prior testing in a
      non-operational environment is highly discouraged. The developers of
      these profiles and documentation have made reasonable efforts to ensure
      overall compliance. They assume no responsibility for its use by other
      parties, and make no guarantee, expressed or implied, about its quality,
      reliability or any other characteristic.
    </para>
  </important>
  <sect1 xml:id="stig-whatis">
    <title>What is &stiga;?</title>

    <para>
      &stiga; stands for <literal>&stig;</literal>. The
      <orgname>&disa; (&disaa;)</orgname>
      organization, which is a parent agency of the United States
      <orgname>Department of Defense (DoD)</orgname>
      , approves and publishes <systemitem>&stig;s (&stiga;s)</systemitem> and
      updates them every 90 days.
    </para>

    <para>
      &stiga;s are a set of rules and best practices for configuring systems to
      defend against potential threats. Each implementation guide is tailored
      to a specific product and version, defining a configuration standard with
      cybersecurity requirements for this product and version.
    </para>

    <para>
      These requirements must be met when the system connects to a DoD network.
      But &stig;s are also used outside of the government sector.
    </para>
  </sect1>
  <sect1 xml:id="stig-benefits">
    <title>Benefits</title>

    <para>
      When a &stig; is implemented for a system, the system is hardened. The
      goals are to minimize attacks and to prevent system access (both
      physically and via a network) and to define processes for maintenance
      (applying software updates) and vulnerability patching. &stig;s can also
      cover configuration settings, for example, for operating systems,
      routers, databases, firewall rules, domain name servers and switches.
    </para>

    <para>
      &stiga;s are ubiquitous across all systems.
    </para>
  </sect1>
  <sect1 xml:id="stig-use">
    <title>Hardening &productname; with &stiga;</title>

    <para>
      There are several ways to harden your systems with the &stiga;.
    </para>

    <variablelist>
      <varlistentry>
        <term>During installation with &yast; or &ay;</term>
        <listitem>
          <para>
            Starting with &sle; 15 SP4, &yast; and &ay; let you check certain
            basic aspects of the system at installation time. You can also
            enable a full scan or scan and remediation, respectively, at first
            boot of the system.
          </para>
          <para>
            For details, see
            <link
       xlink:href="https://documentation.suse.com/sles/15/html/SLES-all/cha-install.html#sec-yast-install-proposal-security-profile"><citetitle>&sles;
            &deploy;</citetitle></link>.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>With &openscap;</term>
        <listitem>
          <para>
            You can scan or remediate an existing system to bring it to a
            compliant state. &openscap; can be used to check and remediate
            local systems as well as remote systems.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>With &stiga; Viewer</term>
        <listitem>
          <para>
            You can manually review the rules from DISA and apply them to a
            dedicated system.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </sect1>
  <sect1 xml:id="stig-openscap-sle15">
    <title>Applying a &stiga; profile</title>

    <para>
      The contents delivered with the <citetitle>&ssg;</citetitle> can be used
      to check or check and remediate systems according to a specific profile.
    </para>

    <para>
      Regarding &stiga;, &suse; supports the following
      <citetitle>&ssg;</citetitle> profiles:
    </para>

    <itemizedlist>
      <listitem>
        <para>
          &disaa; &stiga; for &sle; 15
        </para>
      </listitem>
      <listitem>
        <para>
          &disaa; &stiga; for &sle; 12
        </para>
      </listitem>
    </itemizedlist>

    <para>
      The following sections give certain examples on how to scan &sle; with
      <command>oscap</command> for &stiga; compliance and how to perform a
      remediation. For more background on &openscap; and the
      <citetitle>&ssg;</citetitle>, see the article
      <link
     xlink:href="https://documentation.suse.com/compliance/all/html/SLES-openscap/article-openscap.html">
      <citetitle>Hardening &sle; with &openscap;</citetitle></link>.
    </para>

    <sect2 xml:id="stig-openscap-scan-sle15">
      <title>Scanning a &slea; system for &stiga; compliance</title>
      <para>
        The following example shows how to scan &sle; 15 locally with
        <command>oscap</command> for vulnerability issues according to the
        profile <literal>&disaa; &stiga; for &sle; 15</literal>. You can save
        the results in XML format and genberate an HTML report can be
        generated.
      </para>
      <example xml:id="ex-stig-oscap-scan-sle15">
        <title>Scanning &sle; with oscap</title>
<screen>&prompt.sudo;<command>oscap</command> xccdf eval<co xml:id="co-oscap-eval"/> \
     --profile <replaceable>stig</replaceable><co xml:id="co-oscap-eval-profile"/> \
     --results <replaceable>/tmp/results.xml</replaceable><co xml:id="co-oscap-eval-results"/> \
     --report <replaceable>/tmp/report.html</replaceable><co xml:id="co-oscap-eval-report"/> \
     /usr/share/xml/scap/ssg/content/ssg-sle15-ds-1.2.xml<co xml:id="co-oscap-eval-ssg"/></screen>
        <calloutlist>
          <callout arearefs="co-oscap-eval">
            <para>
              Calls the <command>oscap xccdf</command> module and tells it to
              perform an evaluation (vulnerability scan).
            </para>
          </callout>
          <callout arearefs="co-oscap-eval-profile">
            <para>
              Specifies the profile to use, in this case,
              <literal>stig</literal>.
            </para>
          </callout>
          <callout arearefs="co-oscap-eval-results">
            <para>
              Saves the results of the evaluation to
              <replaceable>/tmp/results.xml</replaceable>.
            </para>
          </callout>
          <callout arearefs="co-oscap-eval-report">
            <para>
              Generates an HTML report called
              <replaceable>/tmp/report.html</replaceable> in addition to the
              results in XML.
            </para>
          </callout>
          <callout arearefs="co-oscap-eval-ssg">
            <para>
              Specifies the <literal>&ssg;</literal> policy file to use. In
              this example, we use a policy file in the
              <literal>DataStream</literal> format that applies to &sle; code
              15. To list all available policies, run: <command>ls -1
              /usr/share/xml/scap/ssg/content/ssg-*-ds.xml</command>. For more
              information about a particular policy, run <command>oscap
              info</command> on the file.
            </para>
          </callout>
        </calloutlist>
        <para>
          The evaluation process usually takes a few minutes, depending on the
          number of selected rules.
        </para>
      </example>
    </sect2>

    <sect2 xml:id="stig-openscap-remediate-sle15">
      <title>Making a &slea; system &stiga;-compliant</title>
      <para>
        The following examples show how to scan and remediate &sle; locally
        with <command>oscap</command> according to the profile <literal>&disaa;
        &stiga; for &sle; 15</literal>.
      </para>
      <sect3 xml:id="oscap-remediate-sle-fly">
        <title>Remediating &sle; with oscap (on the fly)</title>
        <para>
          For remediation with <command>oscap</command> on the fly, use the
          <option>--remediate</option> command-line option.
        </para>
        <example xml:id="ex-oscap-remediate-sle15-fly">
          <title>Remediating &slea; 15 with oscap (on the fly)</title>
<screen>&prompt.sudo;<command>oscap</command> xccdf eval --remediate<co xml:id="co-oscap-remedy-fly"/> \
      --profile <replaceable>stig</replaceable><co xml:id="co-oscap-remedy-fly-profile"/> \
      --results <replaceable>/tmp/results.xml</replaceable><co xml:id="co-oscap-remedy-fly-results"/> \
      /usr/share/xml/scap/ssg/content/ssg-sle15-ds-1.2.xml<co xml:id="co-oscap-remedy-fly-ssg"/></screen>
          <calloutlist>
            <callout arearefs="co-oscap-remedy-fly">
              <para>
                Calls the <command>oscap xccdf</command> module and tells it to
                perform an evaluation plus a remediation of the target system
                in one go.
              </para>
            </callout>
            <callout arearefs="co-oscap-remedy-fly-profile">
              <para>
                Specifies the profile to use, in this case,
                <literal>stig</literal>.
              </para>
            </callout>
            <callout arearefs="co-oscap-remedy-fly-results">
              <para>
                Saves the results of the evaluation to
                <replaceable>/tmp/results.xml</replaceable>.
              </para>
            </callout>
            <callout arearefs="co-oscap-remedy-fly-ssg">
              <para>
                Specifies the <literal>&ssg;</literal> policy file to use. In
                this example, we use a policy file in the
                <literal>DataStream</literal> format that applies to &sle; code
                15. To list all available policies, run: <command>ls -1
                /usr/share/xml/scap/ssg/content/ssg-*-ds.xml</command>. For
                more information about a particular policy, run <command>oscap
                info</command> on the file.
              </para>
            </callout>
          </calloutlist>
          <para>
            In the resulting <replaceable>/tmp/results.xml</replaceable> file,
            the first <tag class="element"
       >TestResult</tag> element
            shows the result of the scan <emphasis>before</emphasis> the
            remediation. The second <tag class="element">TestResult</tag>
            element shows the result of the scan <emphasis>after</emphasis>
            applying the remediation. In the second
            <tag class="element">TestResult</tag> element, if the result of a
            rule is <literal>fixed</literal>, this means that the fix was
            successfully applied, and this rule now passes evaluation. If the
            result of a rule is <literal>error</literal>, this means that the
            remediation for this rule was not successful, and the rule still
            does not pass evaluation.
          </para>
        </example>
      </sect3>
      <sect3 xml:id="oscap-remediate-sle-post">
        <title>Remediating &sle; with oscap (after scanning)</title>
        <para>
          In this example, we first execute a scan and then run the remediation
          as next step.
        </para>
        <example xml:id="ex-oscap-remediate-sle15-post">
          <title>Remediating &slea; with oscap (after scanning)</title>
          <procedure>
            <step>
<screen>&prompt.sudo;<command>oscap</command> xccdf eval<co xml:id="co-oscap-remedy-post1"/> \
        --profile <replaceable>stig</replaceable><co xml:id="co-oscap-remedy-post1-profile"/> \
        --results <replaceable>/tmp/results.xml</replaceable><co xml:id="co-oscap-remedy-post1-results"/> \
        /usr/share/xml/scap/ssg/content/ssg-sle15-ds-1.2.xml<co xml:id="co-oscap-remedy-post1-ssg"/></screen>
              <calloutlist>
                <callout arearefs="co-oscap-remedy-post1">
                  <para>
                    Calls the <command>oscap xccdf</command> module and tells
                    it to perform an evaluation.
                  </para>
                </callout>
                <callout arearefs="co-oscap-remedy-post1-profile">
                  <para>
                    Specifies the profile to use, in this case,
                    <literal>stig</literal>.
                  </para>
                </callout>
                <callout arearefs="co-oscap-remedy-post1-results">
                  <para>
                    Saves the results of the evaluation as an XCCDF file to
                    <replaceable>/tmp/results.xml</replaceable>.
                  </para>
                </callout>
                <callout arearefs="co-oscap-remedy-post1-ssg">
                  <para>
                    Specifies the <literal>&ssg;</literal> policy file to use.
                    In this example, we use a policy file in the
                    <literal>DataStream</literal> format that applies to &sle;
                    code 15. To list all available policies, run: <command>ls
                    -1 /usr/share/xml/scap/ssg/content/ssg-*-ds.xml</command>.
                    For more information about a particular policy, run
                    <command>oscap info</command> on the file.
                  </para>
                </callout>
              </calloutlist>
              <para>
                During this step, the system is only evaluated, and the results
                are stored in a <tag class="element">TestResult</tag> element
                in <replaceable>/tmp/results.xml</replaceable>.
              </para>
            </step>
            <step>
<screen>&prompt.sudo;<command>oscap</command> xccdf remediate<co xml:id="co-oscap-remedy-post2-command"/> \
        --results <replaceable>/tmp/results.xml</replaceable><co xml:id="co-oscap-remedy-post2-results"/> \
        <replaceable>/tmp/results.xml</replaceable><co xml:id="co-oscap-remedy-post2-ssg"/></screen>
              <calloutlist>
                <callout arearefs="co-oscap-remedy-post2-command">
                  <para>
                    Calls the <command>oscap xccdf</command> module and tells
                    it to perform a remediation.
                  </para>
                </callout>
                <callout arearefs="co-oscap-remedy-post2-results">
                  <para>
                    Saves the results of the remediation to
                    <replaceable>/tmp/results.xml</replaceable>.
                  </para>
                </callout>
                <callout arearefs="co-oscap-remedy-post2-ssg">
                  <para>
                    Uses the <replaceable>/tmp/results.xml</replaceable> XCCDF
                    file from the first step (evaluation) as input file.
                  </para>
                </callout>
              </calloutlist>
              <para>
                During this step, the results file from the first step is used
                as input for the <command>oscap</command> command. You can
                safely store the results from the second step in the same file
                that you use as input file,
                <replaceable>/tmp/results.xml</replaceable>. During this run,
                <command>oscap</command> creates a new
                <tag class="element">xccdf:TestResult</tag> element in the
                file. The new element is based on the previous one and inherits
                all the data. The newly created
                <tag class="element">xccdf:TestResult</tag> element differs
                only in the <tag class="element">rule-result</tag> elements
                which failed in the first run. Only for those is the
                remediation executed.
              </para>
            </step>
          </procedure>
        </example>
      </sect3>
      <sect3 xml:id="stig-remediate-sle-ansible">
        <title>Remediating a &slea; system with Ansible</title>
        <para>
          You can use the Ansible playbooks provided by the
          <literal>&ssg;</literal> to remediate a local system.
        </para>
        <para>
          The <package>ansible</package> package is available from
          <literal>SUSE Package Hub</literal>. Register your &sle; system and
          enable the <literal>SUSE Package Hub</literal> extension. For &sle;
          12, you additionally need to enable the <literal>Public
          Cloud</literal> module. Then install the package with <command>sudo
          zypper in ansible</command>.
        </para>
        <example xml:id="ex-remediate-sle15-ansible">
          <title>Remediating &slea; 15 with Ansible</title>
          <para>
            For example, to remediate your system using the &stiga; Ansible
            playbook for &sle; 15 provided by the <literal>&ssg;</literal>, use
            the following command.
          </para>
          <warning>
            <title>System configuration changes</title>
            <para>
              The following command alters the configuration of your system
              immediately. Make sure to test this thoroughly in a
              non-production system first.
            </para>
          </warning>
<screen>&prompt.sudo;ansible-playbook -i "localhost," -c local \
      /usr/share/scap-security-guide/ansible/sle15-playbook-stig.yml</screen>
          <para>
            After the playbook has finished, you are prompted to log in to your
            system, which is now compliant to the chosen policy.
          </para>
          <informalfigure>
            <mediaobject>
              <imageobject role="fo">
                <imagedata fileref="gnome-login-screen-stig.png" width="95%"/>
              </imageobject>
              <imageobject role="html">
                <imagedata fileref="gnome-login-screen-stig.png" width="90%"/>
              </imageobject>
              <textobject role="description"><phrase>&gnome; login screen on a &stiga;-compliant system</phrase>
              </textobject>
            </mediaobject>
          </informalfigure>
        </example>
      </sect3>
    </sect2>
  </sect1>
  <sect1 xml:id="stig-viewer">
    <title>Working with checklists in &stigviewer;</title>

    <para>
      <guimenu>&stigviewer;</guimenu> is a Java-based graphical user interface
      to open content and create checklists for managing the &stiga; security
      settings on your system or network.
    </para>

    <sect2 xml:id="stig-viewer-install">
      <title>Installing &stigviewer;</title>
      <para>
        The <guimenu>&stigviewer;</guimenu> application is available as a ZIP
        archive from
        <link
     xlink:href="https://public.cyber.mil/stigs/stig-viewing-tools/"/>.
        Download the Linux version of the <guimenu>&stigviewer;</guimenu>.
      </para>
      <para>
        To install <guimenu>&stigviewer;</guimenu>, unpack the ZIP archive. In
        the directory with the extracted files, start the
        <guimenu>&stigviewer;</guimenu> with <command>./STIGViewer</command>.
      </para>
      <figure xml:id="fig-stig-viewer-main">
        <title>&stigviewer;&mdash;main window</title>
        <mediaobject>
          <imageobject role="fo">
            <imagedata fileref="disa-stig-viewer-main.png" width="95%"/>
          </imageobject>
          <imageobject role="html">
            <imagedata fileref="disa-stig-viewer-main.png" width="90%"/>
          </imageobject>
          <textobject role="description"><phrase>&stigviewer;&mdash;main window</phrase>
          </textobject>
        </mediaobject>
      </figure>
    </sect2>

    <sect2 xml:id="stig-viewer-use">
      <title>Using &stigviewer;</title>
      <para>
        To view a &stig; for &sle;, you have the following two options.
      </para>
      <procedure>
        <title>Importing from a ZIP archive</title>
        <para>
          You can download a ZIP archive with the &stiga; checklist for your
          &sle; version (<literal>12</literal> or <literal>15</literal>).
        </para>
        <step>
          <para>
            Go to
            <link
      xlink:href="https://public.cyber.mil/stigs/downloads/"/>.
          </para>
        </step>
        <step>
          <para>
            In the <guimenu>Search</guimenu> field, enter
            <literal>SUSE</literal> and select and download the &stig;
            checklist that matches the &sle; system you want to harden.
          </para>
        </step>
        <step>
          <para>
            In <guimenu>&stigviewer;</guimenu>, click <menuchoice>
            <guimenu>File</guimenu><guimenu>Import STIG</guimenu></menuchoice>
            and select the downloaded ZIP archive.
          </para>
        </step>
        <step>
          <para>
            Enable the checkbox beneath the entry in the <guimenu>&stiga;
            Explorer</guimenu> panel to show the individual rules in the middle
            panel and details for each rule on the right-hand side.
          </para>
          <informalfigure>
            <mediaobject>
              <imageobject role="fo">
                <imagedata fileref="disa-stig-viewer-explorer.png" width="95%"/>
              </imageobject>
              <imageobject role="html">
                <imagedata fileref="disa-stig-viewer-explorer.png" width="90%"/>
              </imageobject>
              <textobject role="description"><phrase>&stigviewer;&mdash;explorer</phrase>
              </textobject>
            </mediaobject>
          </informalfigure>
        </step>
      </procedure>
      <procedure>
        <title>Importing from XCCDF XML</title>
        <para>
          Use the <command>oscap</command> command-line tool to generate an
          XCCDF XML file that can be opened with
          <guimenu>&stigviewer;</guimenu>.
        </para>
        <step>
<screen>&prompt.sudo;<command>oscap</command> xccdf eval<co xml:id="co-stigviewer-oscap-eval"/> \
      --profile <replaceable>stig</replaceable><co xml:id="co-stigviewer-oscap-eval-profile"/> \
      --stig-viewer <replaceable>/tmp/results_stig.xml</replaceable><co xml:id="co-stigviewer-oscap-eval-results"/> \
      /usr/share/xml/scap/ssg/content/ssg-sle15-ds-1.2.xml<co xml:id="co-stigviewer-oscap-eval-ssg"/></screen>
          <calloutlist>
            <callout arearefs="co-stigviewer-oscap-eval">
              <para>
                Calls the <command>oscap xccdf</command> module and tells it to
                perform an evaluation (vulnerability scan).
              </para>
            </callout>
            <callout arearefs="co-stigviewer-oscap-eval-profile">
              <para>
                Tells <command>oscap</command> to use the
                <literal>stig</literal> profile for the scan.
              </para>
            </callout>
            <callout arearefs="co-stigviewer-oscap-eval-results">
              <para>
                Saves the results of the evaluation to
                <replaceable>/tmp/results_stig.xml</replaceable>. This is an
                XCCDF XML file that can be imported into
                <guimenu>&stigviewer;</guimenu>.
              </para>
            </callout>
            <callout arearefs="co-stigviewer-oscap-eval-ssg">
              <para>
                Specifies the <literal>&ssg;</literal> policy file to use. In
                this example, we use a policy file in the
                <literal>DataStream</literal> format that applies to &sle; code
                15.
              </para>
            </callout>
          </calloutlist>
        </step>
        <step>
          <para>
            In <guimenu>&stigviewer;</guimenu>, click <menuchoice>
            <guimenu>File</guimenu><guimenu>Import STIG</guimenu></menuchoice>
            and select the XML file you generated.
          </para>
        </step>
        <step>
          <para>
            Enable the checkbox beneath the entry in the <guimenu>&stiga;
            Explorer</guimenu> panel to show the individual rules in the middle
            panel.
          </para>
        </step>
      </procedure>
      <para>
        For more information about <guimenu>&stigviewer;</guimenu>, refer to
        the comprehensive <citetitle>STIG Viewer 2.x User Guide</citetitle>,
        which is available for download at
        <link
     xlink:href="https://public.cyber.mil/stigs/downloads/"/>, or
        the README file that you can access from within
        <guimenu>&stigviewer;</guimenu> by selecting <menuchoice>
        <guimenu>Help</guimenu><guimenu>View Readme</guimenu></menuchoice>.
      </para>
    </sect2>
  </sect1>
  <xi:include href="common_copyright_quick.xml"/>
  <xi:include href="common_license_gfdl1.2.xml"/>
</article>
